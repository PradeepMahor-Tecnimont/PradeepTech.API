@model TCMPLApp.WebApp.Models.LeaveClaimsViewModel
@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@Html.AntiForgeryToken()

@{
    //const int CoreOnDutyCreateEditDeleteId = 174;

    UserIdentity currentUserIdentity = CurrentUserIdentity;
}

@section BreadCrumbs
    {
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home" asp-area="SelfService">SelfService</a></li>
        <li class="breadcrumb-item"><a asp-action="ActionsHRIndex" asp-controller="Home" asp-area="SelfService">HR actions</a></li>
        <li class="breadcrumb-item active">Leave claims</li>
    </ol>
}

    @section styles
    {

    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
    <link href="~/lib/dropzone/dropzone.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/lib/dropzone/basic.css" rel="stylesheet" asp-append-version="true" />
    <style>
        tr.group,
        tr.group:hover {
            background-color: #ddd !important;
            font-weight: 500;
            color: #007bff !important
        }
    </style>
}

    @{
    ViewData["Title"] = "Leave claims";

}

<div style="display:none">
    @Html.TextBoxFor(model => model.FilterDataModel.StartDate, "{0:dd-MMM-yyyy}", htmlAttributes: new { @type = "hidden" })
    @Html.TextBoxFor(model => model.FilterDataModel.EndDate, "{0:dd-MMM-yyyy}", htmlAttributes: new { @type = "hidden" })

    <input readonly type="hidden" asp-for="@Model.FilterDataModel.Empno" />
</div>



<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Leave claims</p>
    </div>
    <div class="card-toolbar">
        <div role="toolbar">

            <a class="btn btn-outline-primary btn-sm border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("LeaveClaimCreate", "Attendance", new { Area = "SelfService" })'
               data-modaltitle="Leave claim"
               data-modalheader="Leave claim">
                <i class="fas fa-plus"></i>&nbsp;Leave claim
            </a>

            <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("LeaveClaimFilterGet", "Attendance", new { Area = "SelfService" })'
               data-modaltitle="Filters - Leave"
               data-modalheader="Filters - Leave">
                <i class="fas fa-filter"></i>&nbsp;Filters
            </a>
            <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5"
               data-actionid="LeaveClaimIndex"
               data-url='@Url.Action("ResetFilter", "Attendance", new { Area = "SelfService" })'
               href="#"
               onclick="resetFilter(event, this);"
               style="display: none;">
                <i class="fas fa-filter"></i> Reset
            </a>

            <a class="btn btn-outline-primary btn-sm border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("LeaveClaimsXLUpload", "Attendance", new { Area = "SelfService" })'
               data-modaltitle="Upload leave claims"
               data-modalheader="Upload leave claims">
                <i class="fa fa-upload"></i>&nbsp;Upload leave claims
            </a>

        </div>
    </div>

    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        @*<div class="input-group pt-1 pl-1 pr-1 ">
        <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
        <div class="input-group-append">
        <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
        </div>
        </div>*@

        <table id="tbGrid" class="table table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr role="row">
                    <th></th>
                    <th>@Html.DisplayNameFor(model => model.EmployeeName)</th>
                    <th>@Html.DisplayNameFor(model => model.Parent)</th>
                    <th>@Html.DisplayNameFor(model => model.ApplicationId)</th>
                    <th>@Html.DisplayNameFor(model => model.ApplicationDate)</th>
                    <th>@Html.DisplayNameFor(model => model.StartDate)</th>
                    <th>@Html.DisplayNameFor(model => model.EndDate)</th>
                    <th>@Html.DisplayNameFor(model => model.LeaveType)</th>
                    <th>@Html.DisplayNameFor(model => model.DbCr)</th>
                    <th>@Html.DisplayNameFor(model => model.LeavePeriod)</th>
                    <th>@Html.DisplayNameFor(model => model.MedCertFileName)</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/lib/dropzone/dropzone.js" asp-append-version="true"></script>

    <script type="text/javascript">
        function localScript() {
            initControls();
            initUploadLeaveClaimsControls();
            initSelect2();


            initFilter();
            initDatePicker();
            //console.log("localScrit");
        }

        function downloadLeaveClaimsXLTemplate() {
            console.log("downloadTemplate");
            $.ajax({
                headers: { "RequestVerificationToken": $('#formLeaveClaimsUpload input[name="__RequestVerificationToken"]').val() },
                url: "@Url.Action("LeaveClaimsXLTemplate", "Attendance", new { Area = "SelfService" })",
                type: "GET",
                cache: false,
                xhr: function () {
                    var xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 2) {
                            if (xhr.status == 200) {
                                xhr.responseType = "blob";
                            }
                        }
                    };
                    return xhr;
                },
                beforeSend: function () {
                    showLoader();
                },

                success: function (blob, status, xhr) {

                    var filename = "";
                    var disposition = xhr.getResponseHeader('Content-Disposition');
                    if (disposition && disposition.indexOf('attachment') !== -1) {
                        var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                        var matches = filenameRegex.exec(disposition);
                        if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                    }
                    var link = document.createElement('a');
                    var url = window.URL.createObjectURL(blob);

                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;
                    link.click();
                    link.remove();
                    window.URL.revokeObjectURL(url);
                    hideLoader();
                    toastr.success("File downloaded successfully.");
                },
                error: function (xhr) {
                    showError(xhr);
                    hideLoader();
                }
            });
        }

        function initDatePicker() {
            $('.datepicker').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false,
                useCurrent: true,
                nowButton: true,
                clearButton: true
            });

            $("#endDate").on("change", function (event, date) {
                $("#EndDate").val($(this).val());
            });

            $("#startDate").on("change", function (event, date) {
                if (!date) {
                    $("#StartDate").val('');
                    $("#endDate").val('');
                    $("#endDate").trigger('change');
                    return;
                }
                else
                    $("#StartDate").val(date.format("DD-MMM-YYYY"));
                if ($("#endDate").val()) {
                    //let startDate = moment($(this).val(), "DD-MMM-YYYY");
                    let endDate = moment($("#endDate").val(), "DD-MMM-YYYY");
                    if (endDate < date) {
                        $("#endDate").val('');
                        //$('#endDate').val(moment(startDate).format("DD-MMM-YYYY"));
                        $("#endDate").trigger('change');
                    }
                }
                else {
                    $("#endDate").val($(this).val());
                }

                $("#endDate").bootstrapMaterialDatePicker('setDate', $(this).val());
                $("#endDate").trigger('change');
            });


            $("#revisedEndDate").on("change", function (event, date) {
                $("#LeavePLReviseViewModel_RevisedEndDate").val($(this).val());
            });


            $("#revisedStartDate").on("change", function (event, date) {
                if (!date) {
                    $("#LeavePLReviseViewModel_RevisedStartDate").val('');
                    $("#revisedEndDate").val('');
                    $("#revisedEndDate").trigger('change');
                    return;
                }
                else
                    $("#LeavePLReviseViewModel_RevisedStartDate").val(date.format("DD-MMM-YYYY"));
                if ($("#revisedEndDate").val()) {
                    //let startDate = moment($(this).val(), "DD-MMM-YYYY");
                    let endDate = moment($("#revisedEndDate").val(), "DD-MMM-YYYY");
                    if (endDate < date) {
                        $("#revisedEndDate").val('');
                        //$('#endDate').val(moment(startDate).format("DD-MMM-YYYY"));
                        $("#revisedEndDate").trigger('change');
                    }
                }
                else {
                    $("#revisedEndDate").val($(this).val());
                }

                $("#revisedEndDate").bootstrapMaterialDatePicker('setDate', $(this).val());
                $("#revisedEndDate").trigger('change');
            });


            $('#startDate').val($('#StartDate').val());
            $('#endDate').val($('#EndDate').val());

            $('#revisedStartDate').val($('#LeavePLReviseViewModel_RevisedStartDate').val());
            $('#revisedEndDate').val($('#LeavePLReviseViewModel_RevisedEndDate').val());

        }

        function initFilter() {

            var currYear = moment().year();
            var curYearLastDate = new Date(currYear, 11, 31);
            var curYearMinDate = new Date((currYear - 1), 0, 1);
            $('#startDateFilter').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                minDate: curYearMinDate,
                maxDate: curYearLastDate,
                time: false
            }).on('change', function (e, date) {
                $('#endDateFilter').bootstrapMaterialDatePicker('setMinDate', date);
                $('#endDateFilter').bootstrapMaterialDatePicker('setMaxDate', curYearLastDate);

                $("#StartDate").val(date.format('DD-MMM-YYYY'));

            });
            console.log($("#EndDate").val());

            $('#endDateFilter').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                minDate: curYearMinDate,
                maxDate: curYearLastDate,
                time: false
            }).on('change', function (e, date) {
                $("#EndDate").val(date.format('DD-MMM-YYYY'));
            });

            //console.log("StartDate-" + $('#StartDate')val());
            //console.log("EndDate-" + $('#EndDate').val());

            if ($('#StartDate').val()) {
                $('#startDateFilter').bootstrapMaterialDatePicker('setDate', new Date($("#StartDate").val()));
            }
            if ($('#EndDate').val())
                $('#endDateFilter').bootstrapMaterialDatePicker('setDate', new Date($("#EndDate").val()));

        }


        function initControls() {

            showHideHalfDayDiv();

            let idLeavePeriod = "#LeavePeriod";
            let idDummyHalfDayDay = "#halfDayDay";
            let idModelHalfDayDay = "#HalfDayDay";
            $("#dropZoneWrapper").hide();
            $(idDummyHalfDayDay).on('change', function () {
                $(idModelHalfDayDay).val($(this).val());
            });
            $("#LeaveType").off('change').on('change', function () {
                let leavePeriod = ($("#LeavePeriod").val() ? $("#LeavePeriod").val() : 0) * 1;
                //console.log($(this).val());
                //console.log(leavePeriod);
                if (($(this).val() == "SL" || $(this).val() == "SC") && leavePeriod >= 2)
                    initDropZone(".pdf");
                else
                    detachDropZone();
            });

            $("#LeavePeriod").off('change').on('change', function () {
                showHideHalfDayDiv();
                let leavePeriod = ($(this).val() ? $(this).val() : 0) * 1;
                //console.log(leavePeriod);
                if (leavePeriod >= 2 && ($("#LeaveType").val() == "SL" || $("#LeaveType").val() == "SC"))
                    initDropZone(".pdf");
                else
                    detachDropZone();
            });

            $('#btnsubmitleaveclaim').off('click').on('click', function () {
                event.preventDefault();
                event.stopPropagation();
                submitLeaveClaimForm();
            });

        }

        function initUploadLeaveClaimsControls() {
            if ($("#formLeaveClaimsXLUpload").length != 0) {
                initDropZone(".xlsx");
            }


            $('#btnUploadLeaveClaimsXL').off('click').on('click', function () {
                event.preventDefault();
                event.stopPropagation();
                submitLeaveClaimsXL();
            });

            $('#btnLeaveClaimsXLTemplate').off('click').on('click', function () {
                event.preventDefault();
                event.stopPropagation();
                downloadLeaveClaimsXLTemplate();
            });

        }

        function showHideHalfDayDiv() {
            //console.log("inside shohidehalfdaydiv");
            let leavePeriod = 1;
            let idLeavePeriod = "#LeavePeriod";
            let idDummyHalfDayDay = "#halfDayDay";
            let idModelHalfDayDay = "#HalfDayDay";

            if ($(idLeavePeriod).val())
                leavePeriod = $(idLeavePeriod).val() * 1;


            let remainder = leavePeriod % 1;
            //console.log(leavePeriod + '-' + remainder);

            if (remainder > 0) {
                $('#divHalfDay').show();
                if ($(idDummyHalfDayDay).val() != null && $(idDummyHalfDayDay).val() != '')
                    $(idModelHalfDayDay).val($(idDummyHalfDayDay).val());
                else {
                    $(idDummyHalfDayDay).val(null);
                }
            }
            else {
                $('#divHalfDay').hide();
                $(idDummyHalfDayDay).val("");
                $(idModelHalfDayDay).val('0');
            }
        }

        $(document).ready(function () {
            localLoadDataTable();
        });

        function localLoadDataTable() {
            $('#tbGrid').DataTable().destroy();

            $('#tbGrid tbody').empty();


            var table = $('#tbGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                },
                aaSorting: [[1, 'asc']],
                ordering: false,
                responsive: true,
                autoWidth: false,
                pageLength: 25,
                lengthMenu: [25, 50],
                processing: true,
                serverSide: true,
                stateSave: true,
                info: false,
                filter: false,
                layout: { topStart: null, bottomStart: 'pageLength', bottomEnd: 'paging' },
        @if ((bool)@Context.Items["isMobile"] == false)
        {
            <text>
                    ordering: false,
                    //order: [1, "asc"],
                    columns: [
                    {
                        data: null,
                        render: function (data, type, row) {
                            return '<button class="btn btn-sm-icon" ' +
                        ' data-jqueryselector="openmodal" ' +
                        ' data-modalcontainer="modalcontainer" ' +
                        ' data-url="@Url.Action("LeaveDetails", "Attendance", new { Area = "SelfService" })"' +
                        ' data-modalpopupwidth="rightw35" ' +
                        ' data-applicationid="' + data.applicationId + '"' +
                        ' data-modaltitle="Leave details" ' +
                        ' data-modalheader="Leave details" ' +
                        ' > ' +
                                ' <i class="far fa-list-alt" aria-hidden="true"></i> ' +
                                ' </button>'
                        },
                        'className': "td-icon",
                    },
                    { data: "employeeName" },
                    { data: "parent" },
                    { data: "applicationId" },
                    {
                        data: "applicationDate",
                        render: function (data, type, row) {
                            return moment(data).format("DD-MMM-YYYY");
                        }
                    },
                    {
                        data: "startDate",
                        render: function (data, type, row) {
                            return moment(data).format("DD-MMM-YYYY");
                        }
                    },
                    {
                        data: "endDate",
                        render: function (data, type, row) {
                            if (data == null)
                                return '';
                            else
                                return moment(data).format("DD-MMM-YYYY");
                        }
                    },
                    { data: "leaveType" },
                    { data: "dbCr" },
                    { data: "leavePeriod" },
                    {
                        'data': null,
                        render: function (data, type, row) {

                            if (data.medCertFileName != null) {
                                return '<a href="#" onclick="ofbfileDownload(event, this);"' +
                            'data-url="@Url.Action("DownloadMedicalCertificateFile", "Attendance", new { Area = "SelfService" })"' +
                            'data-keyid="' + data.applicationId + '"' +
                            'data-clientfilename="' + data.applicationId + '_MedCert.pdf"' +
                            '>MedCert ' +
                                    //'<i class="fas fa-file-download" ></i >' +
                                    '</a > ';
                            }
                            else return '';
                        },
                        'className': "td-icon",
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            return ' <button class="btn btn-outline-danger btn-sm border-none "  ' +
                        ' onclick="showDeleteConfirmationPopup(event,this);" ' +
                        ' data-url="@Url.Action("LeaveDeletionForce", "Attendance", new { Area = "SelfService" })" ' +
                        ' data-postsavereloaddatatable="OK" ' +
                        ' data-applicationid="' + data.applicationId + '" ' +
                        ' data-modaltitle="Please Confirm!" ' +
                        ' data-confirmationtext="Delete leave application ' + data.applicationId + ' ?" ' +
                        ' data-confirmationtype="warning" data-confirmbuttontext="Delete application"> ' +
                                ' <i class="fa fa-trash" aria-hidden="true"></i> ' +
                                ' </button> ';
                        },
                        'className': "td-icon",
                    }
                ],
            </text>
        }
        else
        {
            <text>
                    ordering: false,
                    columns: [
                    {
                        data: null,
                        render: function (data, type, row) {
                            var item = '<div class="card">';
                            item += '<div class="card-mobiledatatable">';

                            item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.ApplicationDate)' + '</dt><dd class="col-lg-8">' + moment(data.applicationDate).format('L') + '</dd></dl>';
                            item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.ApplicationId)' + '</dt><dd class="col-lg-8">' + data.appNo + '</dd></dl>';
                            item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.LeaveType)' + '</dt><dd class="col-lg-8">' + data.leaveType + '</dd></dl>';
                            item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.StartDate)' + '</dt><dd class="col-lg-8">' + moment(data.startDate).format('L') + '</dd></dl>';
                            item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.EndDate)' + '</dt><dd class="col-lg-8">' + moment(data.endDate).format('L') + '</dd></dl>';
                            item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.LeavePeriod)' + '</dt><dd class="col-lg-8">' + data.leavePeriod + '</dd></dl>';

                            item += '</div></div>';
                            return item
                        },
                        sortable: false,
                        searchable: false,
                        className: "datatable-td-mobile"
                    }
                ],
            </text>
        }
                ajax: {
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                url: '@Url.Action("GetListsLeaveClaims", "Attendance")',
                type: 'GET',
                cache: true,
                dataType: "json",
                data: function (d) {
                    d.columns = null;
                    d.order = null;
                    d.search = null;
                    d.genericSearch = null; // $('#FilterDataModel_GenericSearch').val();
                    d.startDate = ($('#FilterDataModel_StartDate').val());
                    d.endDate = ($('#FilterDataModel_EndDate').val());
                    d.leaveType = ($('#FilterDataModel_LeaveType').val());
                    d.empno = ($('#FilterDataModel_Empno').val());
                },
                error: function (request, status, error) {
                    notify('error', request.responseText, 'danger');
                }
            },
                success: function (data) {
                    console.log(data);
                }
                });
            }


        function PostFilterReLoadDataTable(data) {
            $("#modalcontainer").modal('hide');

            $("#FilterDataModel_StartDate").val(data.startDate);
            $("#FilterDataModel_EndDate").val(data.endDate);
            $("#FilterDataModel_LeaveType").val(data.leaveType);
            $("#FilterDataModel_Empno").val(data.empno);

            console.log(data);
            //$("#FilterDataModel_StartDate").val();
            //$("#FilterDataModel_EndDate").val();

            localLoadDataTable();

            hideLoader();
        }

        function PostSaveReLoadDataTable(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                localLoadDataTable();
                hideLoader();
                notify('success', data.response, 'Success');
            }
        }

        Dropzone.autoDiscover = false;

        function initDropZone(fileTypeExtension) {
            $("#dropZoneWrapper").show();
            let formId = "#" + $("div#iddropzone2").closest("form").attr("id");
            $('div#iddropzone2').each(function () {

                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    return;
                }
            });

            $("div#iddropzone2").dropzone({
                url: '@Url.Action("TrainingFileUpload", "EmployeeTraining", new {Area = "SWPVaccine"})',
                autoProcessQueue: false,
                uploadMultiple: false,
                parallelUploads: 1,
                maxFiles: 1,
                maxFilesize: 1,
                addRemoveLinks: true,
                createImageThumbnails: false,
                acceptedFiles: fileTypeExtension,
                init: function () {
                    var myDropzone = this;

                    // First change the button to actually tell Dropzone to process the queue.
                    //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                    //    // Make sure that the form isn't actually being sent.
                    //    e.preventDefault();
                    //    e.stopPropagation();
                    //    myDropzone.processQueue();
                    //});

                    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    // of the sending event because uploadMultiple is set to true.
                    this.on("processing", function (file) {
                        console.log($(formId).attr("action"));
                        this.options.url = $(formId).attr("action");
                    });
                    this.on("sending", function (file, xhr, formData) {

                        formData.append("file", file);
                        var data = $(formId).serializeArray();

                        $.each(data, function (key, el) {
                            formData.append(el.name, el.value);
                        });
                        showModalLoader();

                    });
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                    });
                    this.on("successmultiple", function (files, data) {
                        console.log(data);
                        if (data.success) {
                            PostSaveReLoadDataTable(data)
                        }
                        else {
                            notify("error", data.response, "File upload failed.");
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("success", function (files, data) {
                        console.log(data);
                        if (data.success) {
                            PostSaveReLoadDataTable(data)
                        }
                        else {
                            notify("error", data.response, "File upload failed.");
                            if (data.fileContent != null) {
                                var blob = b64toBlob(data.fileContent.fileContents, data.fileContent.contentType);
                                var link = document.createElement('a');
                                link.href = window.URL.createObjectURL(blob);
                                link.download = data.fileContent.fileDownloadName;
                                link.click();
                            }
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("errormultiple", function (files, data) {
                        notify("error", "File not uploaded + " + data.response, "Error");
                        this.removeAllFiles(true);
                        hideModalLoader();

                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                    });
                }

            });

            const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
                const byteCharacters = atob(b64Data);
                const byteArrays = [];

                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                    const slice = byteCharacters.slice(offset, offset + sliceSize);

                    const byteNumbers = new Array(slice.length);
                    for (let i = 0; i < slice.length; i++) {
                        byteNumbers[i] = slice.charCodeAt(i);
                    }

                    const byteArray = new Uint8Array(byteNumbers);
                    byteArrays.push(byteArray);
                }

                const blob = new Blob(byteArrays, { type: contentType });
                return blob;
            };

        }

        function detachDropZone() {

            $("#dropZoneWrapper").hide();
            $('div#iddropzone2').each(function () {
                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    dropzoneControl.destroy();
                }
            });
        }

        function submitLeaveClaimForm() {
            if ($("#formNewLeaveClaimCreate").length == 0) {
                console.log("Form not found");
                return;
            }
            let htmlClaimForm = document.getElementById("formNewLeaveClaimCreate");


            let leavePeriod = $("#LeavePeriod").val() * 1;

            if (($("#LeaveType").val() == "SL" || $("#LeaveType").val() == "SC") && leavePeriod >= 2) {
                oDropZone2 = Dropzone.forElement("div#iddropzone2");
                if (oDropZone2.files.length == 0) {
                    notify("error", "No files selected.", "Error")
                    return;
                }
                console.log("process queue");
                oDropZone2.processQueue();
                return;
            }

            $("#formNewLeaveClaimCreate").submit();
        }

        function submitLeaveClaimsXL() {

            var formLeaveClaimsXLUpload = "#formLeaveClaimsXLUpload";
            if ($(formLeaveClaimsXLUpload).length == 0) {
                console.log("Form not found");
                return;
            }


            oDropZone2 = Dropzone.forElement("div#iddropzone2");
            if (oDropZone2.files.length == 0) {
                notify("error", "No files selected.", "Error");
                return;
            }
            oDropZone2.processQueue();
        }
    </script>
}  