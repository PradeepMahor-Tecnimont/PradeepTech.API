@model TCMPLApp.WebApp.Models.DeskBookingAttendanceStatusHistoryViewModel
@{
    ViewData["Title"] = "Desk Booking : Employee Attendance Status History";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home" asp-area="DeskBooking">Desk Booking</a></li>
        <li class="breadcrumb-item active" aria-current="page">Desk Booking : Employee Attendance Status History</li>
    </ol>
}

@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}
@Html.HiddenFor(m => m.FilterDataModel.IsActive)
<input readonly type="hidden" asp-for="@Model.FilterDataModel.AreaId" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.CostCode" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.OfficeLocationCode" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.BookingDate" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.IsDeskBooked" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.IsPresent" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.IsCrossAttend" />
@{
    var filterDate = DateTime.Now;
    if (Model.FilterDataModel.BookingDate != null)
    {
        filterDate = DateTime.ParseExact(Model.FilterDataModel.BookingDate, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture);
    }

}

<form class="form-filter-datetime"
      id="formDeskBookAttendanceStatusHistoryFilterSet"
      asp-area="DeskBooking"
      asp-controller="Bookings"
      asp-action="DeskBookAttendanceStatusHistoryFilterSet"
      data-ajax="true"
      data-ajax-metDms="post"
      data-ajax-update="#modal-content"
      data-ajax-begin="onBegin(null)"
      data-ajax-complete="onComplete(null);"
      data-ajax-success="PostFilterReLoadDataTable(data);"
      data-ajax-failure="onError"
      accept-charset="UTF-8">

    <input type="hidden" id="OfficeLocationCode" name="OfficeLocationCode" />
</form>

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Desk Booking : Employee Attendance Status History</p>
    </div>

    @if (!string.IsNullOrEmpty(Model.FilterDataModel.CostCode)
  || !string.IsNullOrEmpty(Model.FilterDataModel.AreaId)
  || !string.IsNullOrEmpty(Model.FilterDataModel.OfficeLocationCode)
  || Model.FilterDataModel.IsPresent != null
  || Model.FilterDataModel.IsDeskBooked != null
  || Model.FilterDataModel.IsCrossAttend != null
  )
    {
        <div class="d-flex flex-row p-1">
            <span id="filterGet ">
                <i class="fas fa-filter"></i>&nbsp;Filter applied  ::

                @if (!string.IsNullOrEmpty(Model.FilterDataModel.BookingDate))
                {
                    @Html.Raw("BookingDate : <b>" + (filterDate.ToLongDateString()) + "</b>")
                    ;
                }
                @if (Model.FilterDataModel.IsDeskBooked != null)
                {
                    if (Model.FilterDataModel.IsDeskBooked == 1)
                    {
                        @Html.Raw(" Desk Booked : <b>Yes</b>")
                    }
                    else
                    {
                        @Html.Raw(" Desk Booked : <b>No</b>")
                    }
                }
                @if (Model.FilterDataModel.IsPresent != null)
                {
                    if (Model.FilterDataModel.IsPresent == 1)
                    {
                        @Html.Raw(", Present : <b>Yes</b>")
                        ;
                    }
                    else
                    {
                        @Html.Raw(", Present : <b>No</b>")
                        ;
                    }
                }
                @if (Model.FilterDataModel.IsCrossAttend != null)
                {
                    if (Model.FilterDataModel.IsCrossAttend == 1)
                    {
                        @Html.Raw(", Present : <b>Yes</b>")
                        ;
                    }
                    else
                    {
                        @Html.Raw(", Present : <b>No</b>")
                        ;
                    }
                }
                @if (!string.IsNullOrEmpty(Model.FilterDataModel.CostCode))
                {
                    @Html.Raw(", Department : <b>" + (Model.FilterDataModel.CostCode) + "</b>")
                    ;

                }
                @if (!string.IsNullOrEmpty(Model.FilterDataModel.AreaId))
                {
                    @Html.Raw(", AreaId : <b>" + (Model.FilterDataModel.AreaId) + "</b>")
                    ;

                }

                @if (!string.IsNullOrEmpty(Model.FilterDataModel.OfficeLocationCode))
                {
                    if (Model.FilterDataModel.OfficeLocationCode == "01")
                    {
                        @Html.Raw("Office Location : ") <b>Malad</b>
                        ;
                    }
                    if (Model.FilterDataModel.OfficeLocationCode == "02")
                    {
                        @Html.Raw("Office Location : ") <b>Airoli</b>
                        ;
                    }
                    if (Model.FilterDataModel.OfficeLocationCode == "03")
                    {
                        @Html.Raw("Office Location : ") <b>Delhi</b>
                        ;
                    }
                }
            </span>
        </div>
        <hr />
    }

    <div class="d-flex flex-row">
        @*  @if (CurrentUserIdentity.ProfileActions.Any(p => p.ActionId == TCMPLApp.Domain.Models.DeskBooking.DeskBookingHelper.ActionDeskBookAdmin))
            { *@
        <a title="GoTo Current Status" class="btn btn-outline-primary btn-sm border border-white mx-2 "
           href="@Url.Action("DeskBookingAttendanceStatusIndex", "Bookings", new { Area = "DeskBooking" })">
            <i class="fas fa-walking"></i> &nbsp;GoTo Current Status
        </a>
        <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
           data-jqueryselector="openmodal"
           data-modalcontainer="modalcontainer"
           data-modalpopupwidth="rightw35"
           data-url='@Url.Action("DeskBookAttendanceStatusHistoryFilterGet", "Bookings", new { Area = "DeskBooking" })'
           data-modaltitle="Filters - Desk Book Attendance Status"
           data-modalheader="Filters - Desk Book Attendance Status">
            <i class="fas fa-filter"></i>&nbsp;Filters
        </a>
        <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5"
           data-actionid="DeskBookAttendanceStatusHistoryIndex"
           data-url='@Url.Action("ResetFilter", "Bookings", new { Area = "DeskBooking" })'
           href="#"
           onclick="resetFilter(event, this);"
           style="display: none;">
            <i class="fas fa-filter"></i> Reset
        </a>

        <a style="float:right" class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto"
           href="#"
           data-jqueryselector="binarydownload"
           data-url="@(Url.Action("DeskBookAttendanceStatusHistoryExcelDownload", "Bookings", new { Area = "DeskBooking" }))">
            <i class="fas fa-file-excel green-color"></i>&nbsp;Export
        </a>
        @*  } *@
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>

        <table id="tbDeskBookAttendanceStatusHistory" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.EmpName)</th>
                    <th>@Html.DisplayNameFor(model => model.DeptName)</th>
                    <th>@Html.DisplayNameFor(model => model.AreaDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.BookingDate)</th>
                    <th>@Html.DisplayNameFor(model => model.BookedDesk)</th>
                    <th>@Html.DisplayNameFor(model => model.DeskOffice)</th>
                    <th>@Html.DisplayNameFor(model => model.Shiftcode)</th>
                    <th>@Html.DisplayNameFor(model => model.IsDeskBook)</th>
                    <th>@Html.DisplayNameFor(model => model.IsPresent)</th>
                    <th>@Html.DisplayNameFor(model => model.PunchInOffice)</th>
                    <th>@Html.DisplayNameFor(model => model.IsCrossAttend)</th>
                </tr>
            </thead>
        </table>

        <div id="result"></div>
    </div>
</div>

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            loadDeskBookAttendanceStatusHistoryDataTable();
        });

        function localScript() {
            initSelect2();
            initDatePicker();
        }

        function initDatePicker() {
            var date = new Date();
            var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            var end = new Date(date.getFullYear(), date.getMonth(), date.getDate());

            $('.datepicker').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false,
                nowButton: true,
                minDate: new Date(),
                maxDate: new Date()

            });

            $('#fromDate').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false,
                startDate: today,
                endDate: end,
            }).on('change', function (e, date) {
                $("#FromDate").val(date.format('DD-MMM-YYYY'));

            });

            if ($('#FromDate').val()) {
                $('#fromDate').bootstrapMaterialDatePicker('setDate', new Date($("#FromDate").val()));
            }

        }

        let vVUloadDeskBookAttendanceStatusHistoryList = "@Url.Action("GetListsDeskBookAttendanceStatusHistory", "Bookings")";

        function loadDeskBookAttendanceStatusHistoryDataTable() {
            genericLoadDataTable({
                pDataTableId: "#tbDeskBookAttendanceStatusHistory",
                pColumns: datatableDeskBookAttendanceStatusHistoryColumns,
                pUrl: vVUloadDeskBookAttendanceStatusHistoryList,
                PStateSave: false,
                pUrlParams: {
                    genericSearch: $('#GenericSearch').val() ? $('#GenericSearch').val() : null,
                    areaId: $('#FilterDataModel_AreaId').val() ? $('#FilterDataModel_AreaId').val() : null,
                    costCode: $('#FilterDataModel_CostCode').val() ? $('#FilterDataModel_CostCode').val() : null,
                    officeLocationCode: $('#FilterDataModel_OfficeLocationCode').val() ? $('#FilterDataModel_OfficeLocationCode').val() : null,
                    bookingDate: $('#FilterDataModel_BookingDate').val() ? $('#FilterDataModel_BookingDate').val() : null,
                    isPresent: $('#FilterDataModel_IsPresent').val() ? $('#FilterDataModel_IsPresent').val() : null,
                    isDeskBooked: $('#FilterDataModel_IsDeskBooked').val() ? $('#FilterDataModel_IsDeskBooked').val() : null,
                    isCrossAttend: $('#FilterDataModel_IsCrossAttend').val() ? $('#FilterDataModel_IsCrossAttend').val() : null,

                },
                pRequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()

            });
        };

        @if ((bool)@Context.Items["isMobile"] == false)
        {
            <text>
                let datatableDeskBookAttendanceStatusHistoryColumns = [
                    {
                        data: null,
                        render: function (data, type, row) {
                            return data.empno + " - " + data.empName
                        }
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            return data.deptCode + " - " + data.deptName
                        }
                    },
                    { data: "areaDesc" },
                    {
                        data: "bookingDate",
                        width: '10.0rem',
                        render: function (data, type, row) {
                            if (data)
                                return moment(data).format("DD-MMM-YYYY");
                            else
                                return '';
                        }
                    },
                    { data: "bookedDesk" },
                    { data: "deskOffice" },
                    { data: "shiftcode" },
                    { data: "isDeskBook" },
                    { data: "isPresent" },
                    { data: "punchInOffice" },
                    { data: "isCrossAttend" },
                ];
            </text>
        }

            $("#GenericSearch").keypress(function (event) {
                if (event.keyCode === 13) {
                    if ($("#GenericSearch").length) {
                        loadDeskBookAttendanceStatusHistoryDataTable();
                    }
                }
            });

        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                loadDeskBookAttendanceStatusHistoryDataTable();
            }
        });

        function PostFilterReLoadDataTable(data) {

            $("#modalcontainer").modal('hide');
            $("#FilterDataModel_AreaId").val(data.areaId);
            $("#FilterDataModel_CostCode").val(data.costCode);
            $("#FilterDataModel_OfficeLocationCode").val(data.officeLocationCode);
            $("#FilterDataModel_IsPresent").val(data.isPresent);
            $("#FilterDataModel_IsDeskBooked").val(data.isDeskBooked);
            $("#FilterDataModel_IsCrossAttend").val(data.isCrossAttend);
            location.reload();
            hideLoader();

        }
    </script>
}