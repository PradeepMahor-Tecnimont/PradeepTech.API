@model TCMPLApp.WebApp.Models.DeskBookEmployeeProjectMappingViewModel
@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@Html.AntiForgeryToken()

@{
    //const int CoreOnDutyCreateEditDeleteId = 174;

    UserIdentity currentUserIdentity = CurrentUserIdentity;

}

@section BreadCrumbs
    {
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home" asp-area="DeskBooking">Desk Booking</a></li>
        <li class="breadcrumb-item active">Employee project mapping</li>
    </ol>
}

@section styles
    {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}

@{
    ViewData["Title"] = "Office workspace";
}

<div id="employeeProjectMapping" name="employeeProjectMapping">
    <div style="display:none">
        @Html.TextBoxFor(model => model.FilterDataModel.StartDate, "{0:dd-MMM-yyyy}", htmlAttributes: new { @type = "hidden" })

        <input readonly type="hidden" asp-for="@Model.FilterDataModel.Empno" />
        <input readonly type="hidden" asp-for="@Model.FilterDataModel.Assign" />
        <input readonly type="hidden" asp-for="@Model.FilterDataModel.Projno" />
    </div>
    <div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
        <div class="app-h4 app-card-header mb-2">
            <p>Employee project mapping</p>
        </div>
        <div class="card-toolbar">
            <div role="toolbar">
                <a class="btn btn-outline-primary btn-sm border-white"
                   data-jqueryselector="openmodal"
                   data-modalcontainer="modalcontainer"
                   data-modalpopupwidth="rightw35"
                   data-url='@Url.Action("EmployeeProjectMappingCreate", "Bookings", new { Area = "DeskBooking" })'
                   data-modaltitle="Employee project mapping"
                   data-modalheader="Employee project mapping">
                    <i class="fas fa-plus"></i>&nbsp;@localizer["Employee project map"]
                </a>
                <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
                   data-jqueryselector="openmodal"
                   data-modalcontainer="modalcontainer"
                   data-modalpopupwidth="rightw35"
                   data-url='@Url.Action("EmployeeProjectMappingFilterGet", "Bookings", new { Area = "DeskBooking" })'
                   data-modaltitle="Filters - Employee project mapping"
                   data-modalheader="Filters - Employee project mapping">
                    <i class="fas fa-filter"></i>&nbsp;Filters
                </a>
                <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5"
                   data-actionid="EmployeeProjectMappingIndex"
                   data-url='@Url.Action("ResetFilter", "Bookings", new { Area = "DeskBooking" })'
                   href="#"
                   onclick="resetFilter(event, this);"
                   style="display: none;">
                    <i class="fas fa-filter"></i> Reset
                </a>
            </div>
        </div>

        <div class="m-1"></div>
        <div class="bg-gray-active rounded ">
            <div class="input-group pt-1 pl-1 pr-1 ">
                <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch"
                       placeholder="Search employee no or name...">
                <div class="input-group-append">
                    <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
                </div>
            </div>
            <table id="tbDataGrid" class="table table-bordered table-responsive-lg ">
                <thead class="bg-info text-white">
                    <tr role="row">
                        <th> @Html.DisplayNameFor(model => model.Empno) </th>
                        <th> @Html.DisplayNameFor(model => model.Empname) </th>
                        <th> @Html.DisplayNameFor(model => model.Projno) </th>
                        <th> @Html.DisplayNameFor(model => model.Projname) </th>
                        <th>&nbsp;</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        function localScript() {
            initSelect2();

        }

        function localLoadDataTable() {

            $('#tbDataGrid').DataTable().destroy();
            $('#tbDataGrid tbody').empty();
            var table = $('#tbDataGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                },
                ordering: false,
                responsive: true,
                autoWidth: false,
                pageLength: 25,
                lengthMenu: [25, 50, 100, 200],
                processing: true,
                serverSide: true,
                stateSave: false,
                info: false,
                filter: false,
                layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
                columnDefs: [
                    { orderable: false, targets: 0 }
                ],
        @if ((bool)@Context.Items["isMobile"] == false)
        {
            <text>
                    ordering: false,
                    columns: [
                    { data: "empno", width: '3.0rem' },
                    { data: "empname", width: '10.0rem' },
                    { data: "projno", width: '2.0rem' },
                    { data: "projname", width: '15.0rem' },
                    {
                        data: null,
                        render: function (data, type, row) {

                            return ' <button class="btn btn-outline-danger btn-sm border-none"  ' +
                                ' onclick="showDeleteConfirmationPopup(event,this);" ' +
                                ' data-url="@Url.Action("EmployeeProjectMappingDelete", "Bookings", new { Area = "DeskBooking" })" ' +
                                ' data-redirecturl="" ' +
                                ' data-postsavereloaddatatable="OK" ' +
                                ' data-applicationid="' + data.keyid + '" ' +
                                ' data-modaltitle="Please Confirm!" ' +
                                ' data-confirmationtext="Delete employee ' + data.empname + ' ?" ' +
                                ' data-confirmationtype="warning" data-confirmbuttontext="Delete employees"> ' +
                                ' <i class="fa fa-trash" aria-hidden="true"></i> ' +
                                ' </button> ';

                        },
                        'className': "td-icon",
                    },
                    {
                        data: null,
                        render: function (data, type, row) {

                            return '<button class="btn btn-outline-primary btn-sm border-none" ' +
                                ' data-jqueryselector="openmodal" ' +
                                ' data-modalcontainer="modalcontainer" ' +
                                ' data-url="@Url.Action("EmployeeProjectMappingUpdate", "Bookings", new { Area = "DeskBooking" })"' +
                                ' data-modalpopupwidth="rightw35" ' +
                                ' data-applicationid="' + data.keyid + '"' +
                                ' data-empno="' + data.empno + '"' +
                                ' data-modaltitle="Edit employee project mapping" ' +
                                ' data-modalheader="Edit employee project mapping" ' +
                                ' > ' +
                                ' <i class="fas fa-edit" aria-hidden="true"></i> ' +
                                ' </button>'
                        },
                        'className': "td-icon",
                    }
                ],
            </text>
        }
        else
        {
            <text>
                    ordering: false,
                    columns: [
                    {
                        data: null,
                        render: function (data, type, row) {
                            var item = '<div class="card">';
                            item += '<div class="card-mobiledatatable">';
                            item += '</div></div>';
                            return item
                        },
                        sortable: false,
                        searchable: false,
                        className: "datatable-td-mobile"
                    }
                ],
            </text>
        }
                ajax: {
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                url: '@Url.Action("GetListEmployeeProjectMapping", "Bookings")',
                type: 'GET',
                cache: true,
                dataType: "json",
                data: function (d) {
                    d.columns = null;
                    d.order = null;
                    d.search = null;
                    d.empno = $('#FilterDataModel_Empno').val();
                    d.assign = $('#FilterDataModel_Assign').val();
                    d.projno = $('#FilterDataModel_Projno').val();
                    d.genericSearch = $('#GenericSearch').val();
                },
                error: function (request, status, error) {
                    notify('error', request.responseText, 'danger');
                }
            }
                      });

                  }

        $(document).ready(function () {

            localLoadDataTable();

        });

        $("#GenericSearch").keypress(function (event) {
            if (event.keyCode === 13) {
                var dataTable = $('#tbDataGrid').DataTable();
                if ($("#GenericSearch").length) {
                    dataTable
                        .search($('#GenericSearch').val())
                        .draw();
                } else {
                    dataTable
                        .search($('#genericSearch').val())
                        .draw();
                }
            }
        });

        $('#buttonSearch').on('click', function () {
            var dataTable = $('#tbDataGrid').DataTable();
            if ($("#GenericSearch").length) {
                dataTable
                    .search($('#GenericSearch').val())
                    .draw();
            } else {
                dataTable
                    .search($('#genericSearch').val())
                    .draw();
            }
        });

        function PostSaveReLoadDataTable(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                localLoadDataTable();
                hideLoader();
                notify('success', data.response, 'Success');
            }
        }

        function PostFilterReLoadDataTable(data) {
            $("#modalcontainer").modal('hide');

            $("#FilterDataModel_StartDate").val(data.startDate);

            location.reload(true);

            //localLoadDataTable();

            hideLoader();
        }
    </script>
}