@model TCMPLApp.WebApp.Areas.RapReporting.RapViewModel;
@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@Html.AntiForgeryToken()

@{
    UserIdentity currentUserIdentity = CurrentUserIdentity;
    const string actionName = "ManhoursProjectionsCurrentJobsIndex";
    const string controllerName = "Transactions";
}

@section BreadCrumbs
{
        <ol class="breadcrumb">
            <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="RapReporting">Rap Reporting</a></li>
            <li class="breadcrumb-item "><a asp-action="TransactionsIndex" asp-controller="Transactions" asp-area="RapReporting">Transactions</a></li>
            <li class="breadcrumb-item active" aria-current="page">Manhours projections - current jobs</li>
        </ol>
}

@section styles
{
        <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
        <link href="~/lib/dropzone/dropzone.css" rel="stylesheet" asp-append-version="true" />
        <link href="~/lib/dropzone/basic.css" rel="stylesheet" asp-append-version="true" />
        <!-- DataTable -->
    @*<link rel="stylesheet" href="~/assets/plugins/data-tables/css/datatables.min.css" asp-append-version="true">*@
        <!-- Material Datepicker css -->
        <link rel="stylesheet" href="~/lib/bootstrap-material-datetimepicker/css/bootstrap-material-datetimepicker.css" asp-append-version="true" />
}

@{
    ViewData["Title"] = "Manhours projections - current jobs";
}

<input id="Yyyy" readonly type="hidden" asp-for="@Model.FilterDataModel.Yyyy" />
<input id="YearMode" readonly type="hidden" asp-for="@Model.FilterDataModel.YearMode" />
<input id="Yyyymm" readonly type="hidden" asp-for="@Model.FilterDataModel.Yyyymm" />
<input id="CostCode" readonly type="hidden" asp-for="@Model.FilterDataModel.CostCode" />
<input id="Projno" readonly type="hidden" asp-for="@Model.FilterDataModel.Projno" />

<div class="card-toolbar p-l-15">
    <div role="toolbar">
        <button id="filterGet" type="button" class="btn btn-secondary btn-sm border-white"
                data-jqueryselector="openmodal"
                data-modalcontainer="modalcontainer"
                data-modalpopupwidth="rightw35"
                data-url='@Url.Action("FilterGet", "Home", new { Area = "RapReporting" })'
                data-actionName=@actionName
                data-controllerName=@controllerName
                data-modaltitle="Filter"
                data-modalheader="Filter">
            <i class="fas fa-filter"></i>&nbsp;Filter ::

            @if (!string.IsNullOrEmpty(Model.FilterDataModel.Yyyy))
            {
                @Html.Raw(localizer["Year : "] + Model.FilterDataModel.Yyyy);
            }
            @if (!string.IsNullOrEmpty(Model.FilterDataModel.YearMode))
            {
                @Html.Raw(localizer[", Year mode : "] + (Model.FilterDataModel.YearMode == "A" ? "April - March" : "January - December"));
            }
            @if (!string.IsNullOrEmpty(Model.FilterDataModel.Yyyymm))
            {
                @Html.Raw(localizer[", Year month : "] + (Model.FilterDataModel.Yyyymm.Substring(4, 2) == "01" ? "Jan " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "02" ? "Feb " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "03" ? "Mar " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "04" ? "Apr " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "05" ? "May " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "06" ? "Jun " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "07" ? "Jul " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "08" ? "Aug " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "09" ? "Sep " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "10" ? "Oct " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "11" ? "Nov " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                  : "Dec " + Model.FilterDataModel.Yyyymm.Substring(0, 4)));
            }
            @if (!string.IsNullOrEmpty(Model.FilterDataModel.CostCode))
            {
                @Html.Raw(localizer[", Cost code : "] + Model.FilterDataModel.CostCode);
            }

        </button>

    </div>
</div>
<div class="m-2"></div>

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Manhours projections - current jobs</p>
    </div>
    <div class="card-toolbar">
        <div role="toolbar">
            <a title="Create" class="btn btn-outline-primary btn-sm border-none" href="#"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw40"
               data-url='@Url.Action("ManhoursProjectionsCurrentJobsProjectCreate", "Transactions", new { Area = "RapReporting" })'
               data-modaltitle="Create"
               data-modalheader="Create">
                <i class="fas fa-plus"></i> Create project
            </a>
        </div>
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">

        <table id="tbGrid" class="table table-striped table-bordered table-responsive ">
            <thead class="bg-info text-white">
                <tr role="row">
                    <th></th>
                    <th>Project no.</th>
                    <th>Project name</th>
                    <th>Original budget</th>
                    <th>Revised budget</th>
                    <th>Actual upto @ViewData["PreviousMonth"]</th>
                    <th>Forecast from @ViewData["ProcessingMonth"]</th>
                    <th>Current estimate</th>
                </tr>
            </thead>
            <tfoot>
                <tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr>
            </tfoot>
        </table>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
        <script src="~/lib/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js" asp-append-version="true"></script>
        <script src="~/js/site-rap.js" asp-append-version="true"></script>
        <script src="~/lib/dropzone/dropzone.js" asp-append-version="true"></script>

        <script type="text/javascript">

            function localScript() {
                initSelect2();

                var yearMonthListUrl = "@Url.Action("GetYearMonthList", "Home", new { Area = "RapReporting" })";
                callRapReportingFilterListeners(yearMonthListUrl);

                var cancelButtonRedirectUrl = "@Url.Action("RedirectPage", "Home", new
            {
                Area = "RapReporting",
                actionName = @actionName,
                controllerName = @controllerName
            })";
                callCancelButtonListeners(cancelButtonRedirectUrl);


                setTimeout(
                    function () {
                        localLoadDetailDataTable();
                    }, 100);

                initImportManhoursProjectionsControls();
            }

            $(document).ready(function () {
                if ($('#Yyyy').val() == null || $('#Yyyy').val() == '' ||
                    $('#YearMode').val() == null || $('#YearMode').val() == '' ||
                    $('#Yyyymm').val() == null || $('#Yyyymm').val() == '' ||
                    $('#CostCode').val() == null || $('#CostCode').val() == '') {
                    $("#filterGet").click();
                }
                else {
                    localLoadDataTable();
                }
            });

            function localLoadDataTable() {
                var table = $('#tbGrid').DataTable({
                    drawCallback: function (settings) {
                        loadScript();
                    },
                    destroy: true,
                    pageLength: 25,
                    lengthMenu: [25, 50],
                    processing: true,
                    serverSide: true,
                    stateSave: false,
                    info: false,
                    filter: false,
                    layout: { topStart: null, bottomStart: 'pageLength', bottomEnd: 'paging' },
        @if ((bool)@Context.Items["isMobile"] == false)
        {
            <text>
                            ordering: false,
                            columns: [
                            {
                                data: null,
                                render: function (data, type, row) {

                                    return '<a class="btn btn-outline-info btn-sm border-none"' +
                                        'href = "#"' +
                                        'data-jqueryselector="openmodal"' +
                                        'data-modalcontainer="modalcontainer"' +
                                        'data-modalpopupwidth="rightw40"' +
                                        'data-url="@Url.Action("ManhoursProjectionsCurrentJobsDetailList", "Transactions", new { Area = "RapReporting" })"' +
                                        'data-statichtmlsourcedivid=""' +
                                        'data-modaltitle="Manhours projections"' +
                                        'data-modalheader="Manhours projections"' +
                                        'data-costcode="' + data.costcode + '"' +
                                        'data-projno="' + data.projno + '"' +
                                        'data-projnoname="' + data.name + '" >' +
                                        '<i class="far fa-eye" > </i></a > ';
                                },
                                className: "td-icon",
                            },

                            { data: "projno" },
                            { data: "name" },
                            { data: "originalBudg", 'className': "text-right" },
                            { data: "revisedBudg", 'className': "text-right" },
                            { data: "cummhours", 'className': "text-right" },
                            { data: "projections", 'className': "text-right"  },
                            {
                                data: null,
                                render: function (data) {
                                    return parseFloat(data.cummhours) + parseFloat(data.projections);
                                    },
                                'className': "text-right"
                    },
                        ],
            </text>
        }
        else
        {
            <text>
                            ordering: false,
                            columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';

                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ],
            </text>
        }
                    ajax: {
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    url: '@Url.Action("GetListsManhoursProjectionsCurrentJobs", "Transactions", new { Area = "RapReporting" })',
                    type: 'GET',
                    cache: true,
                    dataType: "json",
                    data: function (d) {
                        d.columns = null;
                        d.order = null;
                        d.search = null;
                        d.genericSearch = null; // $('#FilterDataModel_GenericSearch').val();
                        d.businessEntityId = null; // $('#FilterDataModel_BusinessEntityId').val();
                        d.startDateTime = null; // $('#FilterDataModel_StartDateTime').val();
                        d.endDateTime = null; // $('#FilterDataModel_EndDateTime').val();
                        d.statusTypeId = null; // $('#FilterDataModel_StatusTypeId').val();
                        d.costcode = $('#CostCode').val();
                        d.yearMode = $('#YearMode').val();
                        d.yyyy = $('#Yyyy').val();
                        //d.companyCode =  $('#FilterDataModel_CompanyCode').val();
                        //d.vendor =  $('#FilterDataModel_Vendor').val();
                        //d.currency =  $('#FilterDataModel_Currency').val();
                        //d.projno =  $('#FilterDataModel_Projno').val();
                        //d.isActive = $('#FilterDataModel_IsActive').val();
                        //d.endDate = $('#FilterDataModel_EndDate').val();
                    },
                    error: function (request, status, error) {
                        notify('error', request.responseText, 'danger');
                    }
                },
                    "footerCallback": function (row, data, start, end, display) {
                        var api = this.api(), data;

                        // converting to interger to find total
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        // computing column Total of the complete result
                        var orginalBudgetTotal = api
                            .column(3)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        var revisedBudgetTotal = api
                            .column(4)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        var actualTotal = api
                            .column(5)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        var forecastTotal = api
                            .column(6)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                            var estimateTotal = actualTotal ?? 0;
                             estimateTotal = estimateTotal + forecastTotal ?? 0;


                        // Update footer by showing the total with the reference of the column index
                        $(api.column(0).footer()).html('Total');
                        $(api.column(3).footer()).html(orginalBudgetTotal);
                        $(api.column(4).footer()).html(revisedBudgetTotal);
                        $(api.column(5).footer()).html(actualTotal);
                        $(api.column(6).footer()).html(forecastTotal);
                        $(api.column(7).footer()).html(estimateTotal);
                    }
                                        });
                                    }

            function localLoadDetailDataTable() {
                var table = $('#tbGridDetail').DataTable({
                    drawCallback: function (settings) {
                        loadScript();
                    },
                    destroy: true,
                    pageLength: 25,
                    lengthMenu: [25, 50],
                    processing: true,
                    serverSide: true,
                    stateSave: false,
                    info: false,
                    filter: false,
                    layout: { topStart: null, bottomStart: 'pageLength', bottomEnd: 'paging' },
        @if ((bool)@Context.Items["isMobile"] == false)
        {
            <text>
                            ordering: false,
                            columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    return '<a class="btn btn-outline-primary btn-sm border-none" href="#" data-jqueryselector="openmodal" data-modalcontainer="modalcontainer" data-modalpopupwidth="rightw40" data-url="@Url.Action("UpdateManhoursProjectionsCurrentJobs", "Transactions", new { Area = "RapReporting" })" data-statichtmlsourcedivid="" data-modaltitle="Update manhours projections" data-modalheader="Update manhours projections" data-costcode="' + data.costcode + '" data-projno="' + data.projno + '" data-yymm="' + data.yymm + '" data-hours="' + data.hours + '"><i class="fas fa-edit"></i></a>';
                                },
                                className: "td-icon",
                            },
                            { data: "yymm" },
                            { data: "hours", 'className': "text-right" },
                            {
                                data: null,
                                render: function (data, type, row) {
                                    return ' <a class="btn btn-outline-danger btn-sm border-none"  ' +
                                        ' onclick="showDeleteConfirmationPopup(event,this);" ' +
                                        ' data-url="@Url.Action("ManhoursProjectionsCurrentJobsDelete", "Transactions", new { Area = "RapReporting" })" ' +
                                        ' data-postDeleteReLoadDataTables="OK" ' +
                                        ' data-costcode="' + data.costcode + '" ' +
                                        ' data-projno="' + data.projno + '" ' +
                                        ' data-yymm="' + data.yymm + '" ' +
                                        ' data-hours="' + data.hours + '" ' +
                                        ' data-modaltitle="Please Confirm!" ' +
                                        ' data-confirmationtext="Delete manhours projection ' + data.costcode + '-' + data.projno + '-' + data.yymm + '-' + data.hours + ' ?" ' +
                                        ' data-confirmationtype="warning" data-confirmbuttontext="Delete"> ' +
                                        ' <i class="fa fa-trash" aria-hidden="true"></i> ' +
                                        ' </a> ';
                                },
                                className: "td-icon",
                            },
                        ],
            </text>
        }
        else
        {
            <text>
                            ordering: false,
                            columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';

                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ],
            </text>
        }
                    ajax: {
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    url: '@Url.Action("GetListsManhoursProjectionsCurrentJobsDetail", "Transactions", new { Area = "RapReporting" })',
                    type: 'GET',
                    cache: false,
                    dataType: "json",
                    data: function (d) {
                        d.columns = null;
                        d.order = null;
                        d.search = null;
                        d.genericSearch = null; // $('#FilterDataModel_GenericSearch').val();
                        d.businessEntityId = null; // $('#FilterDataModel_BusinessEntityId').val();
                        d.startDateTime = null; // $('#FilterDataModel_StartDateTime').val();
                        d.endDateTime = null; // $('#FilterDataModel_EndDateTime').val();
                        d.statusTypeId = null; // $('#FilterDataModel_StatusTypeId').val();
                        d.projno = $("#formManHoursProjectionsCurrentJobsDetail input[id=projno]").val();
                        d.costcode = $('#CostCode').val();
                    },
                    error: function (request, status, error) {
                        notify('error', request.responseText, 'danger');
                    }
                },
                    "footerCallback": function (row, data, start, end, display) {
                        var api = this.api(), data;

                        // converting to interger to find total
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        // computing column Total of the complete result
                        var hrsTotal = api
                            .column(2)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);


                        // Update footer by showing the total with the reference of the column index
                        $(api.column(0).footer()).html('Total');
                        $(api.column(2).footer()).html(hrsTotal);
                    }
                                        });
                                    }

            function PostSaveReLoadDataTable(data) {
                if (data.success) {
                    localLoadDataTable();
                    hideLoader();
                    notify('success', data.response, 'Success');
                }
            }

            function PostCreateSaveReLoadDataTable(data) {
                if (data.success) {
                    $("#modalcontainer").modal('hide');
                    localLoadDataTable();
                    hideLoader();
                    notify('success', data.response, 'Success');
                }
            }

            function PostDeleteReLoadDataTables(data) {
                if (data.success) {
                    localLoadDataTable();
                    localLoadDetailDataTable();
                    hideLoader();
                    notify('success', data.response, 'Success');
                }
            }

            function initImportManhoursProjectionsControls() {

                if ($("#formManhoursProjectionsCurrentJobsEditXLUpload").length != 0) {
                    initDropZone(".xlsx");
                }
                $('#btnManhoursProjectionsCurrentJobsXLTemplate').on('click').on('click', function () {
                    event.preventDefault();
                    event.stopPropagation();
                    downloadManhoursProjectionsCurrentJobsXLTemplate();
                });

                $('#btnManhoursProjectionsCurrentJobsXL').on('click').on('click', function () {
                    event.preventDefault();
                    event.stopPropagation();
                    submitManhoursProjectionsCurrentJobsXL();
                });
            }

            function initDropZone(fileTypeExtension) {
                $("#dropZoneWrapper").show();
                let formId = "#" + $("div#iddropzone2").closest("form").attr("id");
                $('div#iddropzone2').each(function () {
                    let dropzoneControl = $(this)[0].dropzone;
                    if (dropzoneControl) {
                        return;
                    }
                });

                $("div#iddropzone2").dropzone({
                    url: '@Url.Action("TrainingFileUpload", "EmployeeTraining", new { Area = "SWPVaccine" })',
                    autoProcessQueue: false,
                    uploadMultiple: false,
                    parallelUploads: 1,
                    maxFiles: 1,
                    maxFilesize: 1,
                    addRemoveLinks: true,
                    createImageThumbnails: false,
                    acceptedFiles: fileTypeExtension,
                    init: function () {
                        var myDropzone = this;

                        // First change the button to actually tell Dropzone to process the queue.
                        //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                        //    // Make sure that the form isn't actually being sent.
                        //    e.preventDefault();
                        //    e.stopPropagation();
                        //    myDropzone.processQueue();
                        //});

                        // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                        // of the sending event because uploadMultiple is set to true.
                        this.on("processing", function (file) {
                            //console.log($(formId).attr("action"));
                            this.options.url = $(formId).attr("action");
                        });
                        this.on("sending", function (file, xhr, formData) {

                            formData.append("file", file);
                            var data = $(formId).serializeArray();

                            $.each(data, function (key, el) {
                                formData.append(el.name, el.value);
                            });
                            showModalLoader();

                        });
                        this.on("sendingmultiple", function () {
                            // Gets triggered when the form is actually being sent.
                            // Hide the success button or the complete form.
                        });
                        this.on("successmultiple", function (files, data) {
                            if (data.success) {
                                PostSaveReLoadDataTable(data)
                            }
                            else {
                                notify("error", data.response, "File upload failed.");
                            }
                            hideModalLoader();

                            this.removeAllFiles(true);
                        });
                        this.on("success", function (files, data) {
                            if (data.success) {
                                PostSaveReLoadDataTable(data)
                            }
                            else {
                                notify("error", data.response, "File upload failed.");
                                if (data.fileContent != null) {
                                    var blob = b64toBlob(data.fileContent.fileContents, data.fileContent.contentType);
                                    var link = document.createElement('a');
                                    link.href = window.URL.createObjectURL(blob);
                                    link.download = data.fileContent.fileDownloadName;
                                    link.click();
                                }
                            }
                            hideModalLoader();

                            this.removeAllFiles(true);
                        });
                        this.on("errormultiple", function (files, data) {
                            notify("error", "File not uploaded + " + data.response, "Error");
                            this.removeAllFiles(true);
                            hideModalLoader();

                            // Gets triggered when there was an error sending the files.
                            // Maybe show form again, and notify user of error
                        });
                    }

                });

                const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
                    const byteCharacters = atob(b64Data);
                    const byteArrays = [];

                    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                        const slice = byteCharacters.slice(offset, offset + sliceSize);

                        const byteNumbers = new Array(slice.length);
                        for (let i = 0; i < slice.length; i++) {
                            byteNumbers[i] = slice.charCodeAt(i);
                        }

                        const byteArray = new Uint8Array(byteNumbers);
                        byteArrays.push(byteArray);
                    }

                    const blob = new Blob(byteArrays, { type: contentType });
                    return blob;
                };
            }

            function downloadManhoursProjectionsCurrentJobsXLTemplate() {
                $.ajax({
                    headers: { "RequestVerificationToken": $('#formManhoursProjectionsCurrentJobsEditXLUpload input[name="__RequestVerificationToken"]').val() },
                    url: "@Url.Action("ManhoursProjectionsCurrentJobsXLTemplate", "Transactions", new { Area = "RapReporting" })",
                    type: "GET",
                    data: {
                        costcode: $('#CostcodeImport').val(),
                        projno: $('#ProjnoImport').val()
                    },
                    cache: false,
                    xhr: function () {
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 2) {
                                if (xhr.status == 200) {
                                    xhr.responseType = "blob";
                                }
                            }
                        };
                        return xhr;
                    },
                    beforeSend: function () {
                        showLoader();
                    },

                    success: function (blob, status, xhr) {

                        var filename = "";
                        var disposition = xhr.getResponseHeader('Content-Disposition');
                        if (disposition && disposition.indexOf('attachment') !== -1) {
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            var matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                        }
                        var link = document.createElement('a');
                        var url = window.URL.createObjectURL(blob);

                        link.href = window.URL.createObjectURL(blob);
                        link.download = filename;
                        link.click();
                        link.remove();
                        window.URL.revokeObjectURL(url);
                        hideLoader();
                        toastr.success("File downloaded successfully.");
                    },
                    error: function (xhr) {
                        showError(xhr);
                        hideLoader();
                    }
                });
            }

            function submitManhoursProjectionsCurrentJobsXL() {
                var formManhoursProjectionsCurrentJobsEditXLUpload = "#formManhoursProjectionsCurrentJobsEditXLUpload";
                if ($(formManhoursProjectionsCurrentJobsEditXLUpload).length == 0) {
                    console.log("Form not found");
                    return;
                }

                oDropZone2 = Dropzone.forElement("div#iddropzone2");
                if (oDropZone2.files.length == 0) {
                    notify("error", "No files selected.", "Error");
                    return;
                }
                oDropZone2.processQueue();
            }

        </script>
}