@model TCMPLApp.WebApp.Areas.RapReporting.RapViewModel;
@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@Html.AntiForgeryToken()

@{   
    UserIdentity currentUserIdentity = CurrentUserIdentity;
    const string actionName = "OvertimeUpdateIndex";
    const string controllerName = "Transactions";
}

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="RapReporting">Rap Reporting</a></li>
        <li class="breadcrumb-item "><a asp-action="TransactionsIndex" asp-controller="Transactions" asp-area="RapReporting">Transactions</a></li>
        <li class="breadcrumb-item active" aria-current="page">Overtime update</li>
    </ol>
}

@section styles
{
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />    
    <link href="~/lib/dropzone/dropzone.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/lib/dropzone/basic.css" rel="stylesheet" asp-append-version="true" />
    <!-- DataTable -->
    @*<link rel="stylesheet" href="~/assets/plugins/data-tables/css/datatables.min.css" asp-append-version="true">*@
    <!-- Material Datepicker css -->
    <link rel="stylesheet" href="~/lib/bootstrap-material-datetimepicker/css/bootstrap-material-datetimepicker.css" asp-append-version="true" />
}

@{
    ViewData["Title"] = "Overtime update";
}

<input id="Yyyy" readonly type="hidden" asp-for="@Model.FilterDataModel.Yyyy" />
<input id="YearMode" readonly type="hidden" asp-for="@Model.FilterDataModel.YearMode" />
<input id="Yyyymm" readonly type="hidden" asp-for="@Model.FilterDataModel.Yyyymm" />
<input id="CostCode" readonly type="hidden" asp-for="@Model.FilterDataModel.CostCode" />

<div class="card-toolbar p-l-15">
    <div role="toolbar">
        <button id="filterGet" type="button" class="btn btn-secondary btn-sm border-white"
                data-jqueryselector="openmodal"
                data-modalcontainer="modalcontainer"
                data-modalpopupwidth="rightw35"
                data-url='@Url.Action("FilterGet", "Home", new { Area = "RapReporting" })'
                data-actionName=@actionName
                data-controllerName=@controllerName
                data-modaltitle="Filter"
                data-modalheader="Filter">
            <i class="fas fa-filter"></i>&nbsp;Filter ::

            @if (!string.IsNullOrEmpty(Model.FilterDataModel.Yyyy))
            {
                @Html.Raw(localizer["Year : "] + Model.FilterDataModel.Yyyy);
            }
            @if (!string.IsNullOrEmpty(Model.FilterDataModel.YearMode))
            {
                @Html.Raw(localizer[", Year mode : "] + (Model.FilterDataModel.YearMode == "A" ? "April - March" : "January - December"));
            }
            @if (!string.IsNullOrEmpty(Model.FilterDataModel.Yyyymm))
            {
                @Html.Raw(localizer[", Year month : "] + (Model.FilterDataModel.Yyyymm.Substring(4, 2) == "01" ? "Jan " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "02" ? "Feb " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "03" ? "Mar " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "04" ? "Apr " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "05" ? "May " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "06" ? "Jun " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "07" ? "Jul " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "08" ? "Aug " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "09" ? "Sep " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "10" ? "Oct " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : Model.FilterDataModel.Yyyymm.Substring(4, 2) == "11" ? "Nov " + Model.FilterDataModel.Yyyymm.Substring(0, 4)
                                            : "Dec " + Model.FilterDataModel.Yyyymm.Substring(0, 4)));
            }
            @if (!string.IsNullOrEmpty(Model.FilterDataModel.CostCode))
            {
                @Html.Raw(localizer[", Cost code : "] + Model.FilterDataModel.CostCode);
            }

        </button>

    </div>
</div>
<div class="m-2"></div>

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Overtime update</p>
    </div>
    <div class="card-toolbar">
        <div role="toolbar">   
            <a title="Create" class="btn btn-outline-primary btn-sm border-none" href="#"
                data-jqueryselector="openmodal"
                data-modalcontainer="modalcontainer"
                data-modalpopupwidth="rightw40"
                data-url='@Url.Action("OvertimeUpdateCreate", "Transactions", new { Area = "RapReporting" })'
                data-modaltitle="Create"
                data-modalheader="Create"            
                data-costcode = "@Model.FilterDataModel.CostCode">
                <i class="fas fa-plus"></i> Create
            </a>
            <a title="Create bulk" class="btn btn-outline-primary btn-sm border-none" href="#"
                data-jqueryselector="openmodal"
                data-modalcontainer="modalcontainer"
                data-modalpopupwidth="rightw40"
                data-url='@Url.Action("OvertimeUpdateCreateBulk", "Transactions", new { Area = "RapReporting" })'
                data-modaltitle="Create bulk"
                data-modalheader="Create bulk"
                data-costcode = "@Model.FilterDataModel.CostCode">
                <i class="fas fa-plus"></i> Create bulk
            </a>
            
        </div>
    </div>   
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">

        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr role="row">
                    <th></th>
                    <th>Yymm</th>
                    <th>OT %</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js" asp-append-version="true"></script>
    <script src="~/js/site-rap.js" asp-append-version="true"></script>
    <script src="~/lib/dropzone/dropzone.js" asp-append-version="true"></script>

    <script type="text/javascript">

        function localScript() {
            initSelect2();

            var yearMonthListUrl = "@Url.Action("GetYearMonthList", "Home", new {Area = "RapReporting"})";
            callRapReportingFilterListeners(yearMonthListUrl);

            var cancelButtonRedirectUrl = "@Url.Action("RedirectPage", "Home", new {Area = "RapReporting",
                                                                                    actionName = @actionName,
                                                                                    controllerName = @controllerName})";
            callCancelButtonListeners(cancelButtonRedirectUrl);

            initImportOvertimeUpdateControls();
        }               

        $(document).ready(function () {
            if ($('#Yyyy').val() == null || $('#Yyyy').val() == '' ||
                $('#YearMode').val() == null || $('#YearMode').val() == '' ||
                $('#Yyyymm').val() == null || $('#Yyyymm').val() == '' ||
                $('#CostCode').val() == null || $('#CostCode').val() == '') {
                $("#filterGet").click();
            }
            else {
                localLoadDataTable();
            }
        });

        function localLoadDataTable() {
            var table = $('#tbGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                },
                destroy: true,
                pageLength: 25,
                lengthMenu: [25,50],
                processing: true,
                serverSide: true,
                stateSave: false,
                info: false,
                filter: false,
                layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
              @if ((bool)@Context.Items["isMobile"] == false)
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                            data: null,
                            render: function (data, type, row) {
                             
                                return '<a class="btn btn-outline-primary btn-sm border-none" href="#" data-jqueryselector="openmodal" data-modalcontainer="modalcontainer" data-modalpopupwidth="rightw40" data-url="@Url.Action("UpdateOvertimeUpdate", "Transactions", new { Area = "RapReporting"})" data-statichtmlsourcedivid="" data-modaltitle="Edit" data-modalheader="Edit" data-costcode="'+ data.costcode + '" data-yymm="'+ data.yymm + '" data-ot="'+ data.ot + '" ><i class="far fa-edit"></i></a>';
                            },
                            className: "td-icon",
                        },

                            { data: "yymm" },
                            { data: "ot", 'className': "text-right"  },
                            {
                            data: null,
                            render: function (data, type, row) {                             
                                return ' <a class="btn btn-outline-danger btn-sm border-none"  ' +
                                    ' onclick="showDeleteConfirmationPopup(event,this);" ' +
                                    ' data-url="@Url.Action("OvertimeUpdateDelete", "Transactions", new { Area = "RapReporting"})" ' +
                                    ' data-postDeleteReLoadDataTables="OK" ' +                                    
                                    ' data-costcode="' + data.costcode + '" ' +
                                    ' data-yymm="' + data.yymm + '" ' +
                                    ' data-hours="' + data.ot + '" ' +
                                    ' data-modaltitle="Please Confirm!" ' +
                                    ' data-confirmationtext="Delete overtime ' + data.costcode + '-' + data.yymm + '-' + data.ot + ' ?" ' +
                                    ' data-confirmationtype="warning" data-confirmbuttontext="Delete"> ' +
                                    ' <i class="fa fa-trash" aria-hidden="true"></i> ' +
                                    ' </a> ';
                            },
                            className: "td-icon",
                            },                        
                        ],
                    </text>
                }
                else
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';

                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ],
                    </text>
                }
                ajax: {
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    url: '@Url.Action("GetListsOvertimeUpdate", "Transactions", new {Area = "RapReporting"})',                
                    type: 'GET',
                    cache: true,
                    dataType: "json",
                    data: function (d) {
                        d.columns = null;
                        d.order = null;
                        d.search = null;
                        d.genericSearch = null; // $('#FilterDataModel_GenericSearch').val();
                        d.businessEntityId = null; // $('#FilterDataModel_BusinessEntityId').val();
                        d.startDateTime = null; // $('#FilterDataModel_StartDateTime').val();
                        d.endDateTime = null; // $('#FilterDataModel_EndDateTime').val();
                        d.statusTypeId = null; // $('#FilterDataModel_StatusTypeId').val();
                        d.costcode = $('#CostCode').val();
                        },
                        error: function (request, status, error) {
                            notify('error', request.responseText, 'danger');
                        }
                    }
            });        
        }       

        function PostSaveReLoadDataTable(data) {
            if (data.success) {
                localLoadDataTable();
                hideLoader();
                notify('success', data.response, 'Success');
            }
        }

        function PostCreateSaveReLoadDataTable(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                localLoadDataTable();
                hideLoader();
                notify('success', data.response, 'Success');
            }
        }

        function PostDeleteReLoadDataTables(data) {
            if (data.success) {
                localLoadDataTable();
                hideLoader();
                notify('success', data.response, 'Success');
            }
        }

        function initImportOvertimeUpdateControls() {

            if ($("#formOvertimeUpdateEditXLUpload").length != 0) {
                initDropZone(".xlsx");
            }
            $('#btnOvertimeUpdateXLTemplate').on('click').on('click', function () {               
                event.preventDefault();
                event.stopPropagation();
                downloadOvertimeUpdateXLTemplate();
            });

            $('#btnOvertimeUpdateXL').on('click').on('click', function () {
                event.preventDefault();
                event.stopPropagation();
                submitOvertimeUpdateXL();
            });
        } 

        function initDropZone(fileTypeExtension) {
            $("#dropZoneWrapper").show();
            let formId = "#" + $("div#iddropzone2").closest("form").attr("id");
            $('div#iddropzone2').each(function () {
                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    return;
                }
            });

            $("div#iddropzone2").dropzone({
                url: '@Url.Action("TrainingFileUpload", "EmployeeTraining", new {Area = "SWPVaccine"})',
                autoProcessQueue: false,
                uploadMultiple: false,
                parallelUploads: 1,
                maxFiles: 1,
                maxFilesize: 1,
                addRemoveLinks: true,
                createImageThumbnails: false,
                acceptedFiles: fileTypeExtension,
                init: function () {
                    var myDropzone = this;

                    // First change the button to actually tell Dropzone to process the queue.
                    //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                    //    // Make sure that the form isn't actually being sent.
                    //    e.preventDefault();
                    //    e.stopPropagation();
                    //    myDropzone.processQueue();
                    //});

                    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    // of the sending event because uploadMultiple is set to true.
                    this.on("processing", function (file) {
                        //console.log($(formId).attr("action"));
                        this.options.url = $(formId).attr("action");
                    });
                    this.on("sending", function (file, xhr, formData) {

                        formData.append("file", file);
                        var data = $(formId).serializeArray();

                        $.each(data, function (key, el) {
                            formData.append(el.name, el.value);
                        });
                        showModalLoader();

                    });
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                    });
                    this.on("successmultiple", function (files, data) {                        
                        if (data.success) {
                            PostSaveReLoadDataTable(data)
                        }
                        else
                        {
                            notify("error", data.response, "File upload failed.");
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("success", function (files, data) {                        
                        if (data.success) {
                            PostSaveReLoadDataTable(data)
                        }
                        else
                        {
                            notify("error", data.response, "File upload failed.");
                            if (data.fileContent != null) {
                                var blob = b64toBlob(data.fileContent.fileContents, data.fileContent.contentType);
                                var link = document.createElement('a');
                                link.href = window.URL.createObjectURL(blob);
                                link.download = data.fileContent.fileDownloadName;
                                link.click();
                            }
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("errormultiple", function (files, data) {
                        notify("error", "File not uploaded + " + data.response, "Error");
                        this.removeAllFiles(true);
                        hideModalLoader();

                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                    });
                }

            });

            const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
                const byteCharacters = atob(b64Data);
                const byteArrays = [];

                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                    const slice = byteCharacters.slice(offset, offset + sliceSize);

                    const byteNumbers = new Array(slice.length);
                    for (let i = 0; i < slice.length; i++) {
                        byteNumbers[i] = slice.charCodeAt(i);
                    }

                    const byteArray = new Uint8Array(byteNumbers);
                    byteArrays.push(byteArray);
                }

                const blob = new Blob(byteArrays, { type: contentType });
                return blob;
            };
        }

        function downloadOvertimeUpdateXLTemplate() {   
            $.ajax({
                headers: { "RequestVerificationToken": $('#formOvertimeUpdateEditXLUpload input[name="__RequestVerificationToken"]').val() },
                url: "@Url.Action("OvertimeUpdateXLTemplate", "Transactions", new { Area = "RapReporting"})",
                type: "GET",
                data: {
                    costcode: $('#CostcodeImport').val()
                },
                cache: false,
                xhr: function () {
                    var xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 2) {
                            if (xhr.status == 200) {
                                xhr.responseType = "blob";
                            }
                        }
                    };
                    return xhr;
                },
                beforeSend: function () {
                    showLoader();
                },

                success: function (blob, status, xhr) {

                    var filename = "";
                    var disposition = xhr.getResponseHeader('Content-Disposition');
                    if (disposition && disposition.indexOf('attachment') !== -1) {
                        var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                        var matches = filenameRegex.exec(disposition);
                        if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                    }
                    var link = document.createElement('a');
                    var url = window.URL.createObjectURL(blob);

                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;
                    link.click();
                    link.remove();
                    window.URL.revokeObjectURL(url);
                    hideLoader();
                    toastr.success("File downloaded successfully.");
                },
                error: function (xhr) {
                    showError(xhr);
                    hideLoader();
                }
            });
        }

        function submitOvertimeUpdateXL(){
            var formOvertimeUpdateEditXLUpload = "#formOvertimeUpdateEditXLUpload";
            if ($(formOvertimeUpdateEditXLUpload).length == 0) {
                console.log("Form not found");
                return;
            }

            oDropZone2 = Dropzone.forElement("div#iddropzone2");
            if (oDropZone2.files.length == 0) {
                notify("error", "No files selected.", "Error");
                return;
            }
            oDropZone2.processQueue();
        }

    </script>
}