@model TCMPLApp.WebApp.Areas.RapReporting.MovemastViewModel
@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@{
    ViewData["Title"] = "Update movements";
    string costcode = @ViewBag.Costcode;
}

@Html.AntiForgeryToken()


@section BreadCrumbs
{
<ol class="breadcrumb">
    <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="RapReporting">Rap Reporting</a></li>
    <li class="breadcrumb-item "><a asp-action="TransactionsIndex" asp-controller="Transactions" asp-area="RapReporting">Transactions</a></li>
    <li class="breadcrumb-item active" aria-current="page">Update movements</li>
</ol>
}

<input type="hidden" id="selCostcodeVal" value="@ViewBag.Costcode" />
<input type="hidden" id="maxYYMM" value="" />

@section Styles {
<link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
    <link href="~/lib/dropzone/dropzone.css" rel="stylesheet" asp-append-version="true" />
}

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Update movements</p>
    </div>
    <div class="card-block">
        <div class="form-group">
            <div class="row">
                <div class="col-md-8"></div>

            </div>
        </div>
    </div>
    <div class=" row pt-1 pl-1 pr-1">
        <div class="col-md-4">
            <select id="selCostcode" class="form-control chosen-select" data-placeholder=" Please select costcode..." asp-items="ViewBag.Costcodes" required>
                <option selected></option>
            </select>
        </div>
        <div class="col-md-4">
            <a title="New movement" id="movecreate" class="btn btn-outline-primary btn-sm border border-white hidden" href="#"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("MovementCreate", "Transactions", new { Area = "RAPReporting" })'
               data-statichtmlsourcedivid=""
               data-modaltitle="New movement"
               data-modalheader="New movement">
                <i class="fas fa-plus"></i> Create
            </a>
            <a title="Import movemast" id="importMovemast" class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto hidden" href="#"
                data-jqueryselector="openmodal"
                data-modalcontainer="modalcontainer"
                data-modalpopupwidth="rightw40"
                data-url='@Url.Action("ImportExportMovemast", "Transactions", new { Area = "RapReporting" })'
                data-modaltitle="Import movemast"
                data-modalheader="Import movemast"
                data-costcode="@ViewBag.Costcode">
                &nbsp;&nbsp;<i class="fas fa-file-excel green-color"></i> Import
            </a>
        </div>
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>
        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>
                    <th></th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.Yymm)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.Movetotcm)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.Movetosite)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.Movetoothers)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.ExtSubcontract)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.FutRecruit)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.IntDept)</th>
                    <th class="text-center">@Html.DisplayNameFor(model => model.HrsSubcont)</th>
                    <th></th>
                </tr>
            </thead>
        </table>

        <div id="result">
        </div>
    </div>

</div>
@section Scripts{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script src="~/lib/dropzone/dropzone.js" asp-append-version="true"></script>

    <script>
    var dataTable;
    $(document).ready(function () {
        localScript();
    });

    function localScript() {
        initSelect2();
        initImportMovemastControls();
    };

         function loadDataTable() {

    dataTable = $('#tbGrid').DataTable({
        drawCallback: function (settings) {
            loadScript();
        },
        destroy: true,
        pageLength: 25,
        responsive: true,
        autoWidth: false,
        lengthMenu: [25,50],
        processing: true,
        serverSide: true,
        stateSave: true,
        info: false,
        filter: false,
        layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
        @if ((bool)@Context.Items["isMobile"] == false)
        {
            <text>
                ordering: false,
                columns: [
                 {
                     'data': null,
                     render: function (data, type, row) {
                         if (data.canEdit === 1)
                         {
                            return '<button class="btn btn-outline-primary btn-sm border-none" ' +
                                 ' data-jqueryselector="openmodal" ' +
                                 ' data-modalcontainer="modalcontainer" ' +
                                 ' data-url="@Url.Action("MovementUpdate", "Transactions", new { Area = "RAPReporting" })"' +
                                 ' data-modalpopupwidth="rightw35" ' +
                                 ' data-id="' + $('#selCostcode').val() + ';' + data.yymm + '"' +
                                 ' data-modaltitle="Edit movement" ' +
                                 ' data-modalheader="Edit movement" >' +
                                 ' <i class="fas fa-edit" aria-hidden="true"></i> ' +
                                 ' </button>';
                             } else {
                             return '&nbsp;';
                         }
                     },
                     'className': "td-icon",
                 },
                 { 'data': "yymm", 'className': "text-center"},
                 { 'data': "movetotcm", 'className': "text-right" },
                 { 'data': "movetosite", 'className': "text-right" },
                 { 'data': "movetoothers", 'className': "text-right" },
                 { 'data': "extSubcontract", 'className': "text-right" },
                 { 'data': "futRecruit", 'className': "text-right" },
                 { 'data': "intDept", 'className': "text-right" },
                 { 'data': "hrsSubcont", 'className': "text-right" },
                 {
                     'data': null,
                     render: function (data, type, row) {
                         if (data.canDelete === 1)
                         {
                             return '<button class="btn btn-outline-danger btn-sm border-none " ' +
                                 ' onclick = "showDeleteConfirmationPopup(event,this);" ' +
                                 ' data-jqueryselector = "showconfirmationmodal" ' +
                                 ' data-url="@Url.Action("MovementDelete", "Transactions", new { Area = "RAPReporting" })"' +
                                 ' data-redirecturl="javascript:postSaveReLoadDataTable(true)"' +
                                 ' data-id="' + $('#selCostcode').val() + ';' + data.yymm + '"' +
                                 ' data-modaltitle="Please Confirm!" ' +
                                 ' data-confirmationtext=\'Do you want to delete movement for "' + data.yymm  + '" ?\' ' +
                                 ' data-confirmationtype="warning" ' +
                                 ' data-confirmbuttontext="Delete movement" > ' +
                                 ' <i class="fas fa-trash" aria-hidden="true"></i> ' +
                             ' </button>';
                         } else {
                             return '&nbsp;';
                         }
                     },
                     'className': "text-center",
                 }
                ]
            </text>
        }
        else
        {
            <text>
                ordering: false,
                columns: [
                    {
                        data: null,
                        render: function (data, type, row) {
                            var item = '<div class="card">';
                            item += '<div class="card-mobiledatatable">';

                            item += '</div></div>';
                            return item
                        },
                        sortable: false,
                        searchable: false,
                        className: "datatable-td-mobile"
                    }
                ]
            </text>
        },
        ajax: {
            headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
            url: '@Url.Action("GetMovementLists", "Transactions")',
            type: 'GET',
            cache: true,
            dataType: "json",
            data: function (d) {
                d.columns = null;
                d.order = null;
                d.search = null;
                d.genericSearch = $('#GenericSearch').val();
                d.assign = $('#selCostcode').val();
                return { "paramJson": JSON.stringify(d) };
            },
            error: function (request, status, error) {
                notify('error', request.responseText, 'danger');
            }
        }
    });
}


    function loadDataTableNotInUseThisIsForBackUpOnly() {
        dataTable = $('#tbGrid').DataTable({
             drawCallback: function (settings) {
                loadScript();
            },
            'destroy': true,
            'pageLength': 25,
            'lengthMenu': [25, 50],
            'aaSorting': [[1, 'asc']],
            'ordering': false,
            'responsive': true,
            'autoWidth': false,
            'processing': true,
            'serverSide': true,
            'stateSave': true,
            'info': false,
            'filter': false,
            layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
            'columnDefs': [
                { orderable: false, targets: 0 }
            ],
            'ajax': {
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                 url: '@Url.Action("GetMovementLists", "Transactions")',
                type: 'GET',
                cache: true,
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                data: function (d) {
                    d.assign = $('#selCostcode').val();
                    d.genericSearch = $('#GenericSearch').val();
                    return { "paramJson": JSON.stringify(d) };
                },
                error: function (request, status, error) {
                    toastr.error('error', request.responseText, 'danger');
                }
            },
            'columns': [
                 {
                    'data': null,
                    render: function (data, type, row) {
                        if (data.canEdit === 1)
                        {
                           return '<button class="btn btn-outline-primary btn-sm border-none" ' +
                                ' data-jqueryselector="openmodal" ' +
                                ' data-modalcontainer="modalcontainer" ' +
                                ' data-url="@Url.Action("MovementUpdate", "Transactions", new { Area = "RAPReporting" })"' +
                                ' data-modalpopupwidth="rightw35" ' +
                                ' data-id="' + $('#selCostcode').val() + ';' + data.yymm + '"' +
                                ' data-modaltitle="Edit movement" ' +
                                ' data-modalheader="Edit movement" >' +
                                ' <i class="fas fa-edit" aria-hidden="true"></i> ' +
                                ' </button>';
                            } else {
                            return '&nbsp;';
                        }
                    },
                    'className': "td-icon",
                },
                { 'data': "yymm", 'className': "text-center"},
                //{ 'data': "movement", 'className': "text-right" },
                { 'data': "movetotcm", 'className': "text-right" },
                { 'data': "movetosite", 'className': "text-right" },
                { 'data': "movetoothers", 'className': "text-right" },
                { 'data': "extsubcontract", 'className': "text-right" },
                { 'data': "futrecruit", 'className': "text-right" },
                { 'data': "intdept", 'className': "text-right" },
                { 'data': "hrssubcont", 'className': "text-right" },
                {
                    'data': null,
                    render: function (data, type, row) {
                        if (data.canDelete === 1)
                        {
                            return '<button class="btn btn-outline-danger btn-sm border-none " ' +
                                ' onclick = "showDeleteConfirmationPopup(event,this);" ' +
                                ' data-jqueryselector = "showconfirmationmodal" ' +
                                ' data-url="@Url.Action("MovementDelete", "Transactions", new { Area = "RAPReporting" })"' +
                                ' data-redirecturl="javascript:postSaveReLoadDataTable(true)"' +
                                ' data-id="' + $('#selCostcode').val() + ';' + data.yymm + '"' +
                                ' data-modaltitle="Please Confirm!" ' +
                                ' data-confirmationtext=\'Do you want to delete movement for "' + data.yymm  + '" ?\' ' +
                                ' data-confirmationtype="warning" ' +
                                ' data-confirmbuttontext="Delete movement" > ' +
                                ' <i class="fas fa-trash" aria-hidden="true"></i> ' +
                            ' </button>';
                        } else {
                            return '&nbsp;';
                        }
                    },
                    'className': "text-center",
                }
             ],
             'initComplete': function (settings, data) {
            }
        });
    };



    $('#selCostcode').on('select2:clear', function (e) {
        $('#selCostcode').val('');
        var url = "@Url.Action("MovementCreate", "Transactions", new {Area = "RapReporting"})";
        $('#movecreate').attr('data-url', url);
        $("#GenericSearch").val('');
        loadDataTable();
    });

    $('#selCostcode').on("select2:select", function(e) {
         $('#selCostcode').trigger('change');
    });

    $("#selCostcode").change(function (e) {
        var cc = $('#selCostcode').val();
        $('#selCostcodeVal').val(cc);
        if(cc != "") {
            var url = "@Url.Action("MovementCreate", "Transactions", new {Area = "RapReporting",
                                                                        id = "!!abc!!"})";
            $('#movecreate').attr('data-url', url.replace("!!abc!!", cc));

            url = "@Url.Action("ImportExportMovemast", "Transactions", new {Area = "RapReporting",
                        costcode = "!!abc!!"})";
            $('#importMovemast').attr('data-url', url.replace("!!abc!!", cc));

            if ($("#movecreate").hasClass("hidden")){
                $("#movecreate").removeClass("hidden");
                $("#GenericSearch").val('');
            }
            if ($("#importMovemast").hasClass("hidden")) {
                    $("#importMovemast").removeClass("hidden");
            }
        } else {
            var url = "@Url.Action("MovementCreate", "Transactions", new {Area = "RapReporting"})";
            $('#movecreate').attr('data-url', url);
            $("#movecreate").addClass("hidden");
            $("#importMovemast").addClass("hidden");
        }
        loadDataTable();
    });

    $("#GenericSearch").keypress(function(event) {
        if (event.keyCode === 13) {
            if ($("#GenericSearch").length) {
                dataTable
                    .search($('#GenericSearch').val())
                    .draw();
            } else {
                dataTable
                    .search($('#genericSearch').val())
                    .draw();
            }
        }
     });

    $('#buttonSearch').on('click', function () {

        if ($("#GenericSearch").length) {
            dataTable
                .search($('#GenericSearch').val())
                .draw();
        } else {
            dataTable
                .search($('#genericSearch').val())
                .draw();
        }
    });

    function postSaveReLoadDataTable(success) {
        //if (data.success) {
        if (success) {
            var cc = $("#selCostcodeVal").val();
            $("#modalcontainer").modal('hide');
            $("#selCostcode").val(cc);
            $("#selCostcode").trigger('change');
            $("#selCostcodeVal").val(cc)
            loadDataTable();
            hideLoader();
            //notify('success', data.response, 'Success');
            notify('success','', 'Success');
        }
    }

    function monthHandler(e){
        $("#Yymm").val(e.target.value.replace("-",""));
    }

    function initImportMovemastControls() {

        if ($("#formMovemastXLUpload").length != 0) {
            initDropZone(".xlsx");
        }

        $('#btnMovemastXLTemplate').on('click').on('click', function () {
            event.preventDefault();
            event.stopPropagation();
            downloadMovemastXLTemplate();
        });

        $('#btnMovemastUploadXL').on('click').on('click', function () {
            event.preventDefault();
            event.stopPropagation();
            submitMovemastXL();
        });
    }

    function initDropZone(fileTypeExtension) {
        $("#dropZoneWrapper").show();
        let formId = "#" + $("div#iddropzone2").closest("form").attr("id");
        $('div#iddropzone2').each(function () {
            let dropzoneControl = $(this)[0].dropzone;
            if (dropzoneControl) {
                return;
            }
        });

            $("div#iddropzone2").dropzone({
                url: '@Url.Action("MovemastXLTemplateUpload", "Transactions", new {Area = "RapReporting"})',
                autoProcessQueue: false,
                uploadMultiple: false,
                parallelUploads: 1,
                maxFiles: 1,
                maxFilesize: 1,
                addRemoveLinks: true,
                createImageThumbnails: false,
                acceptedFiles: fileTypeExtension,
                init: function () {
                    var myDropzone = this;

                    this.on("processing", function (file) {
                        //console.log($(formId).attr("action"));
                        this.options.url = $(formId).attr("action");
                    });
                    this.on("sending", function (file, xhr, formData) {

                        formData.append("costcode", $("#MovemastImport").val());

                        formData.append("file", file);
                        var data = $(formId).serializeArray();

                        $.each(data, function (key, el) {
                            formData.append(el.name, el.value);
                        });
                        showModalLoader();
                        onBegin($('#btnMovemastUploadXL'));
                    });
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                    });
                    this.on("successmultiple", function (files, data) {
                        if (data.success) {
                            postSaveReLoadDataTable(data)
                        }
                        else {
                            notify("error", data.response, "File upload failed.");
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("success", function (files, data) {
                        if (data.success) {
                            postSaveReLoadDataTable(data)
                        }
                        else {
                            notify("error", data.response, "File upload failed.");
                            if (data.fileContent != null) {
                                var blob = b64toBlob(data.fileContent.fileContents, data.fileContent.contentType);
                                var link = document.createElement('a');
                                link.href = window.URL.createObjectURL(blob);
                                link.download = data.fileContent.fileDownloadName;
                                link.click();
                            }
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("errormultiple", function (files, data) {
                        notify("error", "File not uploaded + " + data.response, "Error");
                        this.removeAllFiles(true);
                        hideModalLoader();

                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                    });
                    this.on("complete", function (files, data) {
                        onComplete($('#btnMovemastUploadXL'));
                        this.removeAllFiles(true);
                        hideModalLoader();
                    });

                },
                error: function (request, status, error) {
                    notify('error', status, 'danger');
                    this.removeAllFiles(true);
                }
            });

        const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
            const byteCharacters = atob(b64Data);
            const byteArrays = [];

            for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                const slice = byteCharacters.slice(offset, offset + sliceSize);

                const byteNumbers = new Array(slice.length);
                for (let i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                const byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }

            const blob = new Blob(byteArrays, { type: contentType });
            return blob;
        };
    }

    function downloadMovemastXLTemplate() {
        $.ajax({
            headers: { "RequestVerificationToken": $('#formMovemastXLUpload input[name="__RequestVerificationToken"]').val() },
                url: "@Url.Action("MovemastXLTemplateDownload", "Transactions", new { Area = "RapReporting"})",
            type: "GET",
            data: {
                    costcode: $('#selCostcodeVal').val()
            },
            cache: false,
            xhr: function () {
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 2) {
                        if (xhr.status == 200) {
                            xhr.responseType = "blob";
                        }
                    }
                };
                return xhr;
            },
            beforeSend: function () {
                showLoader();
            },

            success: function (blob, status, xhr) {

                var filename = "";
                var disposition = xhr.getResponseHeader('Content-Disposition');
                if (disposition && disposition.indexOf('attachment') !== -1) {
                    var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                    var matches = filenameRegex.exec(disposition);
                    if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                }
                var link = document.createElement('a');
                var url = window.URL.createObjectURL(blob);

                link.href = window.URL.createObjectURL(blob);
                link.download = filename;
                link.click();
                link.remove();
                window.URL.revokeObjectURL(url);
                hideLoader();
                toastr.success("File downloaded successfully.");
            },
            error: function (xhr) {
                showError(xhr);
                hideLoader();
            }
        });
    }

    function submitMovemastXL() {
            var formMovemastXLUpload = "#formMovemastXLUpload";
        if ($(formMovemastXLUpload).length == 0) {
            console.log("Form not found");
            return;
        }

        oDropZone2 = Dropzone.forElement("div#iddropzone2");
        if (oDropZone2.files.length == 0) {
            notify("error", "No files selected.", "Error");
            return;
        }
        oDropZone2.processQueue();
    }

    </script>
}