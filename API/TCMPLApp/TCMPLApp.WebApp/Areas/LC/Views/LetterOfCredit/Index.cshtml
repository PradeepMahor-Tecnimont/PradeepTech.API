@model TCMPLApp.WebApp.Models.LcViewModel
@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@Html.AntiForgeryToken()

@{
    //const intBankCreateEditDeleteId = 175;

    UserIdentity currentUserIdentity = CurrentUserIdentity;
}

@section styles
{

<link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}

@{
    ViewData["Title"] = "Bank";

}

@section BreadCrumbs
{
<ol class="breadcrumb">
    <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="LC">Letter of credit home</a></li>
    <li class="breadcrumb-item "><a asp-action="Index" asp-controller="LetterOfCredit" asp-area="LC">Letter of credit</a></li>
    <li class="breadcrumb-item active"></li>
</ol>
}

<div style="display:none">
    <input type="hidden" asp-for="@Model.FilterDataModel.CompanyCode" />
    <input type="hidden" asp-for="@Model.FilterDataModel.Vendor" />
    <input type="hidden" asp-for="@Model.FilterDataModel.Currency" />
    <input type="hidden" asp-for="@Model.FilterDataModel.Projno" />
</div>

<div class="container-fluid bg-white border card rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Letter of credit</p>
    </div>
    <div class="card-toolbar">
        <div role="toolbar">


            @if (CurrentUserIdentity.ProfileActions.Any(p => p.ActionId == TCMPLApp.Domain.Models.LC.LCHelper.ActionCreateLc))
            {
                <a class="btn btn-outline-primary btn-sm border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw50"
               data-url='@Url.Action("LetterOfCreditMainCreate", "LetterOfCredit", new { Area = "LC" })'
               data-modaltitle="Bank"
               data-modalheader="Bank">
                    <i class="fas fa-plus"></i>&nbsp;@localizer["New letter of credit"]
                </a>

            }

            <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("LcFilterGet", "LetterOfCredit", new { Area = "LC" })'
               data-modaltitle="Filters - letter of credit"
               data-modalheader="Filters - letter of credit">
                <i class="fas fa-filter"></i>&nbsp;Filters
            </a>
            <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5"
               data-actionid="LetterOfCreditIndex"
               data-url='@Url.Action("ResetFilter", "LetterOfCredit", new { Area = "LC" })'
               href="#"
               onclick="resetFilter(event, this);"
               style="display: none;">
                <i class="fas fa-filter"></i> Reset
            </a>
            <a style="float:right" class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto"
               href="#"
               data-jqueryselector="binarydownload"
               data-url="@(Url.Action("ExcelDownload", "LetterOfCredit", new { Area = "LC" }))">
                <i class="fas fa-file-excel green-color"></i>&nbsp;Export
            </a>
        </div>
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">

        <table id="tbGrid" class="table table-striped table-bordered table-responsive ">
            <thead class="bg-info text-white">
                <tr role="row">
                    <th></th>
                    <th>@Html.DisplayNameFor(model => model.LcSerialNo)</th>
                    <th>@Html.DisplayNameFor(model => model.CompanyCode)</th>
                    <th>@Html.DisplayNameFor(model => model.Projno)</th>
                    <th>@Html.DisplayNameFor(model => model.Vendor)</th>
                    <th>@Html.DisplayNameFor(model => model.CurrencyCode)</th>
                    <th>@Html.DisplayNameFor(model => model.CurrencyDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.PaymentYyyymm)</th>
                    <th>@Html.DisplayNameFor(model => model.PaymentYyyymmHalf)</th>
                    <th>@Html.DisplayNameFor(model => model.ModifiedBy)</th>
                    <th>@Html.DisplayNameFor(model => model.ModifiedOn)</th>


                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}

<script type="text/javascript">
    function localScript() {

        initSelect2();

    }


    $(document).ready(function () {
        localLoadDataTable();
    });
    function localLoadDataTable() {

        var table = $('#tbGrid').DataTable({
            drawCallback: function (settings) {
                loadScript();
            },
            destroy: true,
            pageLength: 25,
            lengthMenu: [25,50],
            processing: true,
            serverSide: true,
            stateSave: true,
            info: false,
            filter: false,
            dom: 'rt<"row"<"col-1"l><"col"p>><"clear">',
          @if ((bool)@Context.Items["isMobile"] == false)
            {
                <text>
                    ordering: false,
                    columns: [
                        {
                        data: null,
                        render: function (data, type, row) {
                             
                            return '<a class="btn btn-outline-info btn-sm border-none" href="LetterOfCredit/Detail?ApplicationId=' + data.applicationId + '" title="Detail"><i class="far fa-eye"></i></a>';
                        },
                        className: "td-icon",
                    },

                        { data: "lcSerialNo" },
                        { data: "companyCode" },
                        { data: "projno" },
                        { data: "vendor" },
                        { data: "currencyCode" },
                        { data: "currencyDesc" },
                        { data: "paymentYyyymm" },
                        { data: "paymentYyyymmHalf" },
                        { data: "modifiedBy" },
                        { data: "modifiedOn" }
                    ],
                </text>
            }
            else
            {
                <text>
                    ordering: false,
                    columns: [
                        {
                            data: null,
                            render: function (data, type, row) {
                                var item = '<div class="card">';
                                item += '<div class="card-mobiledatatable">';

                                item += '</div></div>';
                                return item
                            },
                            sortable: false,
                            searchable: false,
                            className: "datatable-td-mobile"
                        }
                    ],
                </text>
            }
            ajax: {
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                url: '@Url.Action("GetListsLetterOfCredit", "LetterOfCredit")',
                type: 'GET',
                cache: true,
                dataType: "json",
                data: function (d) {
                    d.columns = null;
                    d.order = null;
                    d.search = null;
                    d.genericSearch = null; // $('#FilterDataModel_GenericSearch').val();
                    d.businessEntityId = null; // $('#FilterDataModel_BusinessEntityId').val();
                    d.startDateTime = null; // $('#FilterDataModel_StartDateTime').val();
                    d.endDateTime = null; // $('#FilterDataModel_EndDateTime').val();
                    d.statusTypeId = null; // $('#FilterDataModel_StatusTypeId').val();
                    d.companyCode =  $('#FilterDataModel_CompanyCode').val();
                    d.vendor =  $('#FilterDataModel_Vendor').val();
                    d.currency =  $('#FilterDataModel_Currency').val();
                    d.projno =  $('#FilterDataModel_Projno').val();
                    //d.isActive = $('#FilterDataModel_IsActive').val();
                    //d.endDate = $('#FilterDataModel_EndDate').val();
                    },
                    error: function (request, status, error) {
                        notify('error', request.responseText, 'danger');
                    }
                }
        });

        //dataTableSearch();
    }

    function PostFilterReLoadDataTable(data) {
        $("#modalcontainer").modal('hide');

        $("#FilterDataModel_Vendor").val(data.vendor);
        $("#FilterDataModel_Currency").val(data.currency);
        $("#FilterDataModel_CompanyCode").val(data.companyCode);
        $("#FilterDataModel_Projno").val(data.projno);

        localLoadDataTable();

        hideLoader();
    }

    function PostSaveReLoadDataTable(data) {
        if (data.success) {
            $("#modalcontainer").modal('hide');
            localLoadDataTable();
            hideLoader();
            notify('success', data.response, 'Success');
        }
    }
</script>
}  