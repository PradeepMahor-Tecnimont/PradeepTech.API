@model TCMPLApp.WebApp.Models.OffBoardingExitsApproveViewModel
@{
    ViewData["Title"] = "Off-Boarding approval";

}

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="OffBoarding">Off-Boarding</a></li>
        <li class="breadcrumb-item "><a asp-action="CheckerExitsPending" asp-controller="Exits" asp-area="OffBoarding">Exits List</a></li>
        <li class="breadcrumb-item active" aria-current="page">Checker Approval</li>
    </ol>
}

@section Styles
{
    <link href="~/lib/dropzone/dropzone.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/lib/dropzone/basic.css" rel="stylesheet" asp-append-version="true" />
}

@Html.AntiForgeryToken()
<form asp-action="CheckerExitsApprove"
      asp-controller="Exits"
      asp-area="OffBoarding"
      id="second-approval"
      method="post"
      accept-charset="UTF-8">

    <div class="container-fluid bg-gray-active border rounded shadow m-auto py-2 col-xl-9">
        <div class="app-h4 app-card-header mb-2">
            <p>Off-Boarding - Exits approval by @ViewBag.ActionAttributes.ActionDesc</p>
        </div>
        <div class="  bg-gray-active border rounded ">
            <div class="childcontent-div" id="div-exitdetails">
                <div id="pv-exitdetails">

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6">
                <div class="form-group">
                    @Html.HiddenFor(m => m.Empno)
                    @Html.HiddenFor(m => m.ApprovalType)
                    @Html.DisplayNameFor(m => m.Remarks)
                    @if (@ViewBag.DescendantApprovalStatus != "Approved")
                    {
                        @Html.TextBoxFor(m => m.Remarks, new { @readonly = "readonly", @class = "form-control readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Remarks, new { @class = "form-control" })
                    }
                    @*<input class="form-control" asp-for="Remarks" />*@
                    <span asp-validation-for="Remarks" class="text-danger"></span>

                </div>
            </div>
            <div class="col-xl-6 align-items-center d-flex">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 ">
                <div class="childcontent-div" id="div-filesuploaded">
                    <div id="pv-filesuploaded">

                    </div>
                </div>
            </div>
            <div class="col-xl-6">
                @if (@ViewBag.ActionAttributes.GroupName == "TIME_MGMT")
                {
                    <button type="button" name="ShowFileUpload" id="idShowFileUpload" title="Show file upload dialog" class="btn btn-outline-primary mx-3"
                            data-jqueryselector="openmodal"
                            data-modalcontainer="modalcontainer"
                            data-modalpopupwidth="rightw35"
                            data-url='@Url.Action("FileUpload", "Exits", new { Area = "OffBoarding" })'
                            data-empno="@Model.Empno"
                            data-statichtmlsourcedivid=""
                            data-modaltitle="Off-Boarding"
                            data-modalheader="Upload file">
                        <i class="fas fa-plus "></i>
                        File upload
                    </button>
                }
                @if (@ViewBag.DescendantApprovalStatus != "Approved")
                {
                    <label class="text-danger">First level approvals pending.</label>
                }
                else
                {
                    <button type="button" onclick="SubmitHold();" class="btn btn-warning mx-3">
                        <i class="fas fa-save fa-1x"></i>
                        Hold
                    </button>
                    <button type="button" onclick="SubmitApproval();" class="btn btn-primary mx-3">
                        <i class="fas fa-save fa-1x"></i>
                        Approve
                    </button>
                }
            </div>
        </div>
    </div>
</form>

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/dropzone/dropzone.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            loadEmployeeDetails();
            loadFilesUploaded();

        });
        function localScript() {
            initDropZone();
            loadFilesUploaded();
        }

        function loadEmployeeDetails() {
            var divid = $("#pv-exitdetails");

            var empno = $("#Empno").val();


            if (empno == '') {
                divid.empty();
                $("#div-exitdetails").removeClass("active");
                return;
            }
            else
                $("#div-exitdetails").addClass("active");

            $.ajax({
                url: '@Url.Action("GetEmpExitDetails", "Exits",new {Area = "OffBoarding"})',
                data: {
                        'empno': empno
                },
                type: 'GET',
                beforeSend: function () {
                        showLoader();
                    },
                success: function (data) {
                        divid.html(data);
                        hideLoader();
                    },
                error: function (result) {
                        hideLoader();
                        errorText = result.responseText.indexOf("divErrorMessage") == -1 ? result.responseText : ($(result.responseText).find("div[id*=divErrorMessage]").text()).replace("text-danger", "text-white");
                        notify("error", errorText, 'Error');
                    }
                });
        }

        function SubmitHold() {

            $("#ApprovalType").val("HOLD");
            $("#second-approval").submit();
        }

        function SubmitApproval() {

            $("#ApprovalType").val("APPROVE");
            $("#second-approval").submit();
        }

        function loadFilesUploaded() {

            var currUserGroupName = '@ViewBag.ActionAttributes.GroupName';
            if (!(currUserGroupName == "TIME_MGMT"))
                return;
            var divid = $("#pv-filesuploaded");

            var empno = $("#Empno").val();


            if (empno == '') {
                divid.empty();
                $("#div-filesuploaded").removeClass("active");
                return;
            }
            else
                $("#div-filesuploaded").addClass("active");

            $.ajax({
                url: '@Url.Action("GetFilesUploadedList", "Exits",new {Area = "OffBoarding"})',
                data: {
                    'empno': empno,
                    'groupname': currUserGroupName
                },
                type: 'GET',
                beforeSend: function () {
                    showLoader();
                },
                success: function (data) {
                    divid.html(data);
                    hideLoader();
                },
                error: function (result) {
                    hideLoader();
                    errorText = result.responseText.indexOf("divErrorMessage") == -1 ? result.responseText : ($(result.responseText).find("div[id*=divErrorMessage]").text()).replace("text-danger", "text-white");
                    notify("error", errorText, 'Error');
                }
            });
        }

    //Dropzone.autoDiscover = false;

        function initDropZone() {
            $("div#iddropzone2").each(function () {
                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    dropzoneControl.destroy();
                }
            });
            $("div#iddropzone2").dropzone({
                url: '@Url.Action("FileUpload", "Exits",new {Area = "OffBoarding"})',
                autoProcessQueue: false,
                uploadMultiple: true,
                parallelUploads: 5,
                maxFiles: 5,
                addRemoveLinks: true,
                createImageThumbnails: false,
                acceptedFiles:"application/pdf",
                init: function () {
                    var myDropzone = this;

                    // First change the button to actually tell Dropzone to process the queue.
                    //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                    //    // Make sure that the form isn't actually being sent.
                    //    e.preventDefault();
                    //    e.stopPropagation();
                    //    myDropzone.processQueue();
                    //});

                    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    // of the sending event because uploadMultiple is set to true.
                    this.on("sending", function (files, xhr, formData) {

                        formData.append("OfbEmpno", $("#OfbEmpno").val());
                        formData.append("UploadByEmpno", $("#UploadByEmpno").val());
                        formData.append("UploadByGroup", $("#UploadByGroup").val());

                        formData.append("UploadByActionId", $("#UploadByActionId").val());
                        formData.append("Files", files);

                    });
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                    });
                    this.on("successmultiple", function (files, response) {
                        if (response.success)
                            notify("success", "Files uploaded successfully", "File upload");
                        else
                            notify("error", response.message , "File upload failed.");

                        this.removeAllFiles(true);
                        loadFilesUploaded();
                        // Gets triggered when the files have successfully been sent.
                        // Redirect user or notify of success.
                    });
                    this.on("errormultiple", function (files, response) {
                        notify("error", "File not uploaded", "Error uploading");
                        this.removeAllFiles(true);

                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                    });
                }

            });
        }

        function UploadFiles() {
             oDropZone2 = Dropzone.forElement("div#iddropzone2");
            if (oDropZone2.files.length == 0) {
                notify("error", "No files selected.", "Error")
                return;
            }
            oDropZone2.processQueue();
        }

    </script>
}