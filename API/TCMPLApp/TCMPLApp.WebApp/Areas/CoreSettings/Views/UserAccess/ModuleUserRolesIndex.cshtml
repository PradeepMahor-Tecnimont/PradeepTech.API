@model TCMPLApp.WebApp.Models.ModuleUserRolesViewModel

@{
    ViewData["Title"] = "Module User Roles";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="CoreSettings">Core Settings</a></li>
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="UserAccess" asp-area="CoreSettings">User Access</a></li>
        <li class="breadcrumb-item active" aria-current="page">Module User Roles</li>
    </ol>
}
@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}

@Html.HiddenFor(m => m.FilterDataModel.IsActive)
<input readonly type="hidden" asp-for="@Model.FilterDataModel.ModuleId" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.RoleId" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.Empno" />

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Module User Roles</p>
    </div>
    <div class="d-flex flex-row">
        @if (CurrentUserIdentity.ProfileActions.Any(p => p.ActionId == TCMPLApp.Domain.Models.CoreSettings.CoreSettingsHelper.ActionEditUserAccess))
        {
            <a title="New Module User Role" class="btn btn-outline-primary btn-sm border border-white" href="#"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("ModuleUserRolesCreate", "UserAccess", new { Area = "CoreSettings" })'
               data-statichtmlsourcedivid=""
               data-modaltitle="New Module User Role"
               data-modalheader="New Module User Role">
                <i class="fas fa-plus"></i> Create
            </a>
            <a class="btn btn-outline-primary btn-sm border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("ModuleUserRolesBulkCreate", "UserAccess", new { Area = "CoreSettings" })'
               data-modaltitle="Bulk Create"
               data-modalheader="Bulk Create">
                <i class="fa fa-upload"></i>&nbsp;Bulk Create
            </a>
        }
        <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
           data-jqueryselector="openmodal"
           data-modalcontainer="modalcontainer"
           data-modalpopupwidth="rightw35"
           data-url='@Url.Action("ModuleUserRoleFilterGet", "UserAccess", new { Area = "CoreSettings" })'
           data-modaltitle="Filters"
           data-modalheader="Filters">
            <i class="fas fa-filter"></i>&nbsp;Filters
        </a>
        <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5" id="resetbtn"
           data-actionid="UserAccesssModuleRolesUsersIndex"
           data-url='@Url.Action("ResetFilter", "UserAccess", new { Area = "CoreSettings" })'
           href="#"
           onclick="resetFilter(event, this);"
           style="display: none;">
            <i class="fas fa-filter"></i> Reset
        </a>

        <a class="btn btn-outline-primary btn-sm border-white  "
           href='@Url.Action("ModuleUserRoleLogsIndex", "UserAccess", new { Area = "CoreSettings" })'>
            <i class="fas fa-list"></i>&nbsp;Goto - module user role logs
        </a>
        <a style="float:right;" class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto"
           href="#"
           data-jqueryselector="binarydownload"
           data-url="@(Url.Action("ModuleUserRoleExcelDownload", "UserAccess", new { Area = "CoreSettings" }))"
           id="exportButton">
            <i class="fas fa-file-excel green-color"></i>&nbsp;Export
        </a>
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>

        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>

                    <th>Module</th>
                    <th>Role</th>
                    <th>Employee</th>
                    <th>Person Id</th>
                    <th>Module Role Key Id</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
        </table>

        <div id="result"></div>
    </div>
</div>

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        $(document).ready(function () {
            loadModuleUserRoleDataTable();
            toggleExportButton();
        });
        function localScript() {
            initSelect2();
            GetRolesList()
            GetActions();
            GetEmployees();
            toggleExportButton();

        };

        function toggleExportButton() {

            var resetButton = document.getElementById("resetbtn");
            var exportButton = document.getElementById("exportButton");

            if (resetButton.style.display !== "none") {
                $("#exportButton").show();
            } else {
                $("#exportButton").hide();
            }
        }

        let vModuleUserRoleList = "@Url.Action("GetListsModuleUserRoles", "UserAccess")";
        let canEdit = @(CurrentUserIdentity.ProfileActions.Any(pa => pa.ActionId == TCMPLApp.Domain.Models.CoreSettings.CoreSettingsHelper.ActionEditUserAccess) ? "true" : "false");

        function loadModuleUserRoleDataTable() {
            genericLoadDataTable({
                pDataTableId: "#tbGrid",
                pColumns: datatableColumns,
                pUrl: vModuleUserRoleList,
                pUrlParams: {
                    genericSearch: $('#GenericSearch').val() ? $('#GenericSearch').val() : null,
                    moduleId: $('#FilterDataModel_ModuleId').val() ? $('#FilterDataModel_ModuleId').val() : null,
                    roleId: $('#FilterDataModel_RoleId').val() ? $('#FilterDataModel_RoleId').val() : null,
                    empno: $('#FilterDataModel_Empno').val() ? $('#FilterDataModel_Empno').val() : null,
                },
                pRequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                PStateSave: false

            });
        };

        @if ((bool)@Context.Items["isMobile"] == false)
        {

            <text>

                let datatableColumns = [
                    { 'data': "module" },
                    { 'data': "role" },
                    { 'data': "employee" },
                    { 'data': "personId" },
                    { 'data': "moduleRoleKeyId" },
                    {
                        'data': null,
                        render: function (data, type, row) {
                            if (canEdit == true) {
                                //if (data.deleteAllowed == 0) {
                                return '<button title="Delete" class="btn btn-outline-danger btn-sm border-none " ' +
                                    ' onclick = "showDeleteConfirmationPopup(event,this);" ' +
                                    ' data-jqueryselector = "showconfirmationmodal" ' +
                                    ' data-url="@Url.Action("ModuleUserRolesDelete", "UserAccess", new { Area = "CoreSettings" })"' +
                                    ' data-moduleid="' + data.moduleId + '"' +
                                    ' data-roleid="' + data.roleId + '"' +
                                    ' data-empno="' + data.empno + '"' +
                                    ' data-PostDeleteReLoadDataTables="OK" ' +
                                    ' data-modaltitle="Please Confirm!" ' +
                                    ' data-confirmationtext="Do you want to delete Module User Role (' + data.module + ' - ' + data.role + ' - ' + data.employee + ') ?" ' +
                                    ' data-confirmationtype="warning" ' +
                                    ' title="Delete Module User Role" ' +
                                    ' data-confirmbuttontext="Delete Module User Role" > ' +
                                    ' <i class="fas fa-trash" aria-hidden="true"></i> ' +
                                    ' </button>';
                                //} else {
                                //    return '';
                                //}
                            } else {
                                return '';
                            }
                        },
                        'className': "td-icon text-center  align-middle",
                    }

                ];
            </text>
        };

        $("#GenericSearch").keypress(function (event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                    loadModuleUserRoleDataTable();
                }
            }
        });

        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                loadModuleUserRoleDataTable();
            }
        });

        function PostSave(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                hideLoader();
                loadModuleUserRoleDataTable();
                notify('success', data.response, 'Success');
            }
        };
        function PostDataSave(data) {

            if (data.messageType == "KO") {
                var blob = convertToBlob(data.messageFileContent.fileContents, data.messageFileContent.contentType);
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = data.messageFileContent.fileDownloadName;
                link.click();
                loadModuleUserRoleDataTable();
                notify("error", data.messageText, 'Error');
            }
            else {
                $("#modalcontainer").modal('hide');
                hideLoader();
                loadModuleUserRoleDataTable();
                notify('success', data.response, 'Success');
            }
        };
        function PostDeleteReLoadDataTables(data) {
            if (data.success) {
                loadModuleUserRoleDataTable();
                hideLoader();
                notify('success', data.message, 'Success');
            }
        };
        function PostFilterReLoadDataTable(data) {

            $("#modalcontainer").modal('hide');

            $("#FilterDataModel_ModuleId").val(data.moduleId);
            $("#FilterDataModel_RoleId").val(data.roleId);
            $("#FilterDataModel_Empno").val(data.empno);

            loadModuleUserRoleDataTable();
            hideLoader();
        }

        function GetRolesList() {
            $('#ModuleId').on('change', function (e) {
                var vModule = $('#ModuleId').val();

                var vRole = $('#RoleId').val();

                $.ajax({
                    url: "@Url.Action("GetRolesList", "UserAccess", new { Area = "CoreSettings" })",
                    type: 'GET',
                    data: {
                        module: vModule,
                        role: vRole
                    },
                    beforeSend: function () {
                        showModalLoader();
                        $("#RoleId").prop("disabled", true);
                    },
                    success: function (data) {
                        let dropdown = $('#RoleId');
                        dropdown.empty();
                        var options = '';
                        var flag = false;
                        var phase = null;
                        $(data).each(function () {

                            options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';

                        });
                        dropdown.html(options);
                        if (flag == false) {
                            phase = null;
                        }

                        dropdown.val(phase);
                        hideModalLoader()
                        $("#RoleId").prop("disabled", false);
                    },
                    error: function (result) {
                        hideModalLoader();
                        $("#RoleId").prop("disabled", false);
                        notify($.i18n('Error'), result.responseText, 'danger');
                    }
                });

            });
        };

        function GetActions() {
            $('#RoleId').on('change', function (e) {
                var vModule = $('#ModuleId').val();
                var vRole = $('#RoleId').val();

                $.ajax({
                    url: "@Url.Action("GetActionsList", "UserAccess", new { Area = "CoreSettings" })",
                    type: 'GET',
                    data: {
                        module: vModule,
                        role: vRole
                    },
                    beforeSend: function () {
                        showModalLoader();
                        $("#ActionId").prop("disabled", true);
                    },
                    success: function (data) {
                        let dropdown = $('#ActionId');
                        dropdown.empty();
                        var options = '';
                        var flag = false;
                        var phase = null;
                        $(data).each(function () {

                            options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';

                        });
                        dropdown.html(options);
                        if (flag == false) {
                            phase = null;
                        }

                        dropdown.val(phase);
                        hideModalLoader()
                        $("#ActionId").prop("disabled", false);
                    },
                    error: function (result) {
                        hideModalLoader();
                        $("#ActionId").prop("disabled", false);
                        notify($.i18n('Error'), result.responseText, 'danger');
                    }
                });

            });
        };

        function GetEmployees() {

            let vRoleId = $("#formModuleUserRoleFilterSet select[id=RoleId]");

            vRoleId.on('change', function (e) {
                var vModule = $('#ModuleId').val();
                var vRole = vRoleId.val();


                $.ajax({
                    url: "@Url.Action("GetEmployeesList", "UserAccess", new { Area = "CoreSettings" })",
                    type: 'GET',
                    data: {
                        module: vModule,
                        role: vRole
                    },
                    beforeSend: function () {
                        showModalLoader();
                        $("#Empno").prop("disabled", true);
                    },
                    success: function (data) {
                        let dropdown = $('#Empno');
                        dropdown.empty();
                        var options = '';
                        var flag = false;
                        var phase = null;
                        $(data).each(function () {

                            options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';

                        });
                        dropdown.html(options);
                        if (flag == false) {
                            phase = null;
                        }

                        dropdown.val(phase);
                        hideModalLoader()
                        $("#Empno").prop("disabled", false);
                    },
                    error: function (result) {
                        hideModalLoader();
                        $("#Empno").prop("disabled", false);
                        notify($.i18n('Error'), result.responseText, 'danger');
                    }
                });

            });
        };
    </script>
}