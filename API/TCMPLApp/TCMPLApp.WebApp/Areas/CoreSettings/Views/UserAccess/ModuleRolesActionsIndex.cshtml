@model TCMPLApp.WebApp.Models.ModuleRolesActionsViewModel

@{
    ViewData["Title"] = "Module Roles Actions";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
    {
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="CoreSettings">Core Settings</a></li>
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="UserAccess" asp-area="CoreSettings">User Access</a></li>
        <li class="breadcrumb-item active" aria-current="page">Module Roles Actions</li>
    </ol>
}
@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}

@Html.HiddenFor(m => m.FilterDataModel.IsActive)
<input readonly type="hidden" asp-for="@Model.FilterDataModel.ModuleId" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.RoleId" />
<input readonly type="hidden" asp-for="@Model.FilterDataModel.ActionId" />

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Module Roles Actions</p>
    </div>
    <div class="d-flex flex-row">
        @if (CurrentUserIdentity.ProfileActions.Any(p => p.ActionId == TCMPLApp.Domain.Models.CoreSettings.CoreSettingsHelper.ActionEditUserAccess))
        {
            <a title="New Module Role Action" class="btn btn-outline-primary btn-sm border border-white" href="#"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("ModuleRolesActionsCreate", "UserAccess", new { Area = "CoreSettings" })'
               data-statichtmlsourcedivid=""
               data-modaltitle="New Module Role Action"
               data-modalheader="New Module Role Action">
                <i class="fas fa-plus"></i> Create
            </a>
        }
        <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
           data-jqueryselector="openmodal"
           data-modalcontainer="modalcontainer"
           data-modalpopupwidth="rightw35"
           data-url='@Url.Action("ModuleRoleActionsFilterGet", "UserAccess", new { Area = "CoreSettings" })'
           data-modaltitle="Filters"
           data-modalheader="Filters">
            <i class="fas fa-filter"></i>&nbsp;Filters
        </a>
        <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5"
           data-actionid="UserAccesssModuleRolesActionsIndex"
           data-url='@Url.Action("ResetFilter", "UserAccess", new { Area = "CoreSettings" })'
           href="#"
           onclick="resetFilter(event, this);"
           style="display: none;">
            <i class="fas fa-filter"></i> Reset
        </a>
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>

        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>

                    <th>Module </th>
                    <th>Role </th>
                    <th>Action </th>
                    <th>Module Role Action Key Id</th>
                    <th>Module Role Key Id</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
        </table>

        <div id="result"></div>
    </div>
</div>

@section Scripts{

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        $(document).ready(function () {
            loadModuleRoleActionDataTable();
        });

        function localScript() {
            initSelect2();
            GetRolesList();
            GetActions();
        };

        let vUrlModuleRolesActionList = "@Url.Action("GetListsModuleRolesActions", "UserAccess")";
        let canEdit = @(CurrentUserIdentity.ProfileActions.Any(pa => pa.ActionId == TCMPLApp.Domain.Models.CoreSettings.CoreSettingsHelper.ActionEditUserAccess) ? "true" : "false");

        function loadModuleRoleActionDataTable() {
            genericLoadDataTable({
                pDataTableId: "#tbGrid",
                pColumns: datatableColumns,
                pUrl: vUrlModuleRolesActionList,
                pUrlParams: {
                    genericSearch: $('#GenericSearch').val() ? $('#GenericSearch').val() : null,
                    moduleId: $('#FilterDataModel_ModuleId').val() ? $('#FilterDataModel_ModuleId').val() : null,
                    roleId: $('#FilterDataModel_RoleId').val() ? $('#FilterDataModel_RoleId').val() : null,
                    actionId: $('#FilterDataModel_ActionId').val() ? $('#FilterDataModel_ActionId').val() : null,
                },
                pRequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()

            });
        };

        @if ((bool)@Context.Items["isMobile"] == false)
        {

            <text>

                let datatableColumns = [
                    { 'data': "module" },
                    { 'data': "role" },
                    { 'data': "action" },
                    { 'data': "moduleRoleActionKeyId" },
                    { 'data': "moduleRoleKeyId" },
                    {
                        'data': null,
                        render: function (data, type, row) {
                            if (canEdit == true) {
                            if (data.deleteAllowed == 0) {

                                return '<button title="Delete" class="btn btn-outline-danger btn-sm border-none " ' +
                            ' onclick = "showDeleteConfirmationPopup(event,this);" ' +
                            ' data-jqueryselector = "showconfirmationmodal" ' +
                            ' data-url="@Url.Action("ModuleRolesActionsDelete", "UserAccess", new { Area = "CoreSettings" })"' +
                            ' data-moduleroleactionkeyid="' + data.moduleRoleActionKeyId + '"' +
                            ' data-modulerolekeyid="' + data.moduleRoleKeyId + '"' +
                            ' data-PostDeleteReLoadDataTables="OK" ' +
                            ' data-modaltitle="Please Confirm!" ' +
                            ' data-confirmationtext="Do you want to delete Module Role Action (' + data.module + ' - ' + data.role + ' - ' + data.action + ') ?" ' +
                            ' data-confirmationtype="warning" ' +
                            ' title="Delete Module Role Action" ' +
                            ' data-confirmbuttontext="Delete Module Role Action" > ' +
                                    ' <i class="fas fa-trash" aria-hidden="true"></i> ' +
                                    ' </button>';
                            } else {
                                return '';
                            }
                            } else {
                                return '';
                            }
                        },
                        'className': "td-icon text-center  align-middle",
                    }

                ];
            </text>
        };

        $("#GenericSearch").keypress(function (event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                    loadModuleRoleActionDataTable();
                }
            }
        });

        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                loadModuleRoleActionDataTable();
            }
        });

        function PostSave(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                hideLoader();
                loadModuleRoleActionDataTable();
                notify('success', data.response, 'Success');
            }
        };

        function PostDeleteReLoadDataTables(data) {
            if (data.success) {
                loadModuleRoleActionDataTable();
                hideLoader();
                notify('success', data.message, 'Success');
            }
        };
        function PostFilterReLoadDataTable(data) {

            $("#modalcontainer").modal('hide');

            $("#FilterDataModel_ModuleId").val(data.moduleId);
            $("#FilterDataModel_RoleId").val(data.roleId);
            $("#FilterDataModel_ActionId").val(data.actionId);

            loadModuleRoleActionDataTable();
            hideLoader();
        };

    function GetRolesList() {
            $('#ModuleId').on('change', function (e) {
            var vModule = $('#ModuleId').val();
            var vRole = $('#RoleId').val();

                let vRoleId = $("#formModuleRoleActionsFilterSet select[id=RoleId]");
               $.ajax({
                   url: "@Url.Action("GetRolesList", "UserAccess", new { Area = "CoreSettings" })",
                   type: 'GET',
                   data: {
                       module: vModule,
                       role: vRole
                   },
                   beforeSend: function () {
                       showModalLoader();
                       vRoleId.prop("disabled", true);
                   },
                   success: function (data) {
                       let dropdown = vRoleId;
                       dropdown.empty();
                       var options = '';
                       var flag = false;
                       var phase = null;
                       $(data).each(function () {

                           options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';

                       });
                       dropdown.html(options);
                       if (flag == false) {
                           phase = null;
                       }

                       dropdown.val(phase);
                       hideModalLoader()
                       vRoleId.prop("disabled", false);
                   },
                   error: function (result) {
                       hideModalLoader();
                       vRoleId.prop("disabled", false);
                       notify($.i18n('Error'), result.responseText, 'danger');
                   }
               });

       });
    };

      function GetActions() {
          $('#RoleId').on('change', function (e) {
                 var vModule = $('#ModuleId').val();
                 var vRole = $('#RoleId').val();
              let vActionId = $("#formModuleRoleActionsFilterSet select[id=ActionId]")
                    $.ajax({
                        url: "@Url.Action("GetActionsList", "UserAccess", new { Area = "CoreSettings" })",
                        type: 'GET',
                        data: {
                            module: vModule,
                            role: vRole
                        },
                        beforeSend: function () {
                            showModalLoader();
                            vActionId.prop("disabled", true);
                        },
                        success: function (data) {
                            let dropdown = vActionId;
                            dropdown.empty();
                            var options = '';
                            var flag = false;
                            var phase = null;
                            $(data).each(function () {

                                options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';

                            });
                            dropdown.html(options);
                            if (flag == false) {
                                phase = null;
                            }

                            dropdown.val(phase);
                            hideModalLoader()
                            vActionId.prop("disabled", false);
                        },
                        error: function (result) {
                            hideModalLoader();
                            vActionId.prop("disabled", false);
                            notify($.i18n('Error'), result.responseText, 'danger');
                        }
                    });

            });
    };
    </script>
}