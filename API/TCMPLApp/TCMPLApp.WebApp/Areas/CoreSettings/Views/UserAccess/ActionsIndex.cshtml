@model TCMPLApp.WebApp.Models.ActionsViewModel

@{
    ViewData["Title"] = "Actions";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
    {
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home" asp-area="CoreSettings">Core Settings</a></li>
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="UserAccess" asp-area="CoreSettings">User Access</a></li>
        <li class="breadcrumb-item active" aria-current="page">Actions</li>
    </ol>
}

@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}
@Html.HiddenFor(m => m.FilterDataModel.IsActive)

<input readonly type="hidden" asp-for="@Model.FilterDataModel.ActionId" />
<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Actions</p>
    </div>
    <div class="d-flex flex-row">
        @if (CurrentUserIdentity.ProfileActions.Any(p => p.ActionId == TCMPLApp.Domain.Models.CoreSettings.CoreSettingsHelper.ActionEditUserAccess))
        {

            <a title="New Action" class="btn btn-outline-primary btn-sm border border-white" href="#"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("ActionsCreate", "UserAccess", new { Area = "CoreSettings" })'
               data-statichtmlsourcedivid=""
               data-modaltitle="New Action"
               data-modalheader="New Action">
                <i class="fas fa-plus"></i> Create
            </a>
        }


    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>

        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.ActionId)</th>
                    <th>@Html.DisplayNameFor(model => model.ActionName)</th>
                    <th>@Html.DisplayNameFor(model => model.ActionDesc)</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
        </table>

        <div id="result"></div>
    </div>
</div>
@section Scripts{

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function () {
            loadActionDataTable();
        });

        function localScript() {
            initSelect2();
            GetActions();
        };

       let vUrlActionList = "@Url.Action("GetListsAction", "UserAccess")";
       let canEdit = @(CurrentUserIdentity.ProfileActions.Any(pa => pa.ActionId == TCMPLApp.Domain.Models.CoreSettings.CoreSettingsHelper.ActionEditUserAccess) ? "true" : "false");
        function loadActionDataTable() {
            genericLoadDataTable({
                pDataTableId: "#tbGrid",
                pColumns: datatableColumns,
                pUrl: vUrlActionList,
                pUrlParams: {
                    genericSearch: $('#GenericSearch').val() ? $('#GenericSearch').val() : null,
                    moduleId: $('#FilterDataModel_ModuleId').val() ? $('#FilterDataModel_ModuleId').val() : null,
                    actionId: $('#FilterDataModel_ActionId').val() ? $('#FilterDataModel_ActionId').val() : null,
                },
                pRequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()

            });
        };

    @if ((bool)@Context.Items["isMobile"] == false)
    {
        <text>

            let datatableColumns = [
                            { 'data': "actionId" },
                            { 'data': "actionName" },
                            { 'data': "actionDesc" },
                            {
                                'data': null,
                                render: function (data, type, row) {
                                if(canEdit == true) {
                                    if (data.deleteAllowed == 0) {
                                        return '<button title="Delete" class="btn btn-outline-danger btn-sm border-none " ' +
                                            ' onclick = "showDeleteConfirmationPopup(event,this);" ' +
                                            ' data-jqueryselector = "showconfirmationmodal" ' +
                                            ' data-url="@Url.Action("ActionsDelete", "UserAccess", new { Area = "CoreSettings" })"' +
                                            ' data-actionid="' + data.actionId + '"' +
                                            ' data-PostDeleteReLoadDataTables="OK" ' +
                                            ' data-modaltitle="Please Confirm!" ' +
                                            ' data-confirmationtext="Do you want to delete Action (' + data.actionName + ' - ' + data.actionDesc + ') ?" ' +
                                            ' data-confirmationtype="warning" ' +
                                            ' title="Delete Action" ' +
                                            ' data-confirmbuttontext="Delete Action" > ' +
                                            ' <i class="fas fa-trash" aria-hidden="true"></i> ' +
                                            ' </button>';
                                    } else
                                    {
                                        return '';
                                    }
                                }else
                                    {
                                        return '';
                                    }
                             },
                                'className': "td-icon text-center  align-middle",
                         }

            ];
        </text>
    };

        $("#GenericSearch").keypress(function(event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                        loadActionDataTable();
                }
            }
         });

         $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
               loadActionDataTable();
            }
        });

        function PostSave(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                hideLoader();
                loadActionDataTable();
                notify('success', data.response, 'Success');
            }
        };

		function PostDeleteReLoadDataTables(data) {
            if (data.success) {
                loadActionDataTable();
                hideLoader();
               notify('success', data.message, 'Success');
            }
        };

        function PostFilterReLoadDataTable(data) {
            $("#modalcontainer").modal('hide');
            $("#FilterDataModel_ActionId").val(data.actionId);
            loadActionDataTable();
            hideLoader();
    };


    </script>
}