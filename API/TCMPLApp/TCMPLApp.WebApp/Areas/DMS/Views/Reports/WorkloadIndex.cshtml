@model TCMPLApp.WebApp.Models.DeskManagementWorkloadIndexViewModel

@inject TCMPLApp.WebApp.Services.SharedViewLocalizer localizer

@{
    UserIdentity currentUserIdentity = CurrentUserIdentity;
    ViewData["Title"] = "Desk management workload";
}

@Html.AntiForgeryToken()

@section BreadCrumbs {
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="DMS">Desk management</a></li>
        <li class="breadcrumb-item active" aria-current="page">Workload</li>
    </ol>
}

@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}

<div style="display:none">
    @Html.TextBoxFor(model => model.FilterDataModel.StartDate, "{0:dd-MMM-yyyy}", htmlAttributes: new { @type = "hidden" })
    @Html.TextBoxFor(model => model.FilterDataModel.EndDate, "{0:dd-MMM-yyyy}", htmlAttributes: new { @type = "hidden" })
</div>

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Desk management workload</p>
    </div>
    <div class="card-toolbar">
        <div role="toolbar d-flex flex-row">
            <a class="btn btn-outline-primary btn-sm filteredmarker-border border-white"
               data-jqueryselector="openmodal"
               data-modalcontainer="modalcontainer"
               data-modalpopupwidth="rightw35"
               data-url='@Url.Action("WorkloadFilterGet", "Reports", new { Area = "DMS" })'
               data-modaltitle="Filters - Desk management workload"
               data-modalheader="Filters - Desk management workload">
                <i class="fas fa-filter"></i>&nbsp;Filters
            </a>
            <a class="btn btn-outline-danger btn-sm border-white filteredmarker-visibility m-l-5"
               data-actionid="WorkloadIndex"
               data-url='@Url.Action("WorkloadResetFilter", "Reports", new { Area = "DMS" })'
               href="#"
               onclick="resetFilter(event, this);"
               style="display: none;">
                <i class="fas fa-filter"></i> Reset
            </a>
           @* <a class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto"
               style="float:right"
               href='@Url.Action("StatusIndexDownload", "Reports", new { Area = "DMS" })'>
                <i class="fas fa-file-excel green-color"></i>&nbsp;Export
            </a>*@
        </div>
    </div>   
    <div class="m-1 p-1"></div>
    <div class="bg-gray-active rounded">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>
        <table id="tbDataGrid" class="table table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr role="row">                    
                    <th>@Html.DisplayNameFor(model => model.Particulars)</th>
                    <th>@Html.DisplayNameFor(model => model.Cnt)</th>
                </tr>                
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">

        var dataTable;   
        
        $(document).ready(function () {
            localLoadDataTable();
        });
        
        function localScript() {
            initSelect2();
            initFilter();
            initDatePicker();
        }

        function initDatePicker() {
            $('.datepicker').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false,
                useCurrent: false,
                nowButton: true,
                clearButton: true
            });

            $("#endDate").on("change", function (event, date) {
                $("#EndDate").val($(this).val());
            });

            $("#startDate").on("change", function (event, date) {
                if (!date) {
                    $("#StartDate").val('');
                    $("#endDate").val('');
                    $("#endDate").trigger('change');
                    return;
                }
                else
                    $("#StartDate").val(date.format("DD-MMM-YYYY"));
                if ($("#endDate").val()) {
                    //let startDate = moment($(this).val(), "DD-MMM-YYYY");
                    let endDate = moment($("#endDate").val(), "DD-MMM-YYYY");
                    if (endDate < date) {
                        $("#endDate").val('');
                        //$('#endDate').val(moment(startDate).format("DD-MMM-YYYY"));
                        $("#endDate").trigger('change');
                    }
                }
                else {
                    $("#endDate").val($(this).val());
                }

                $("#endDate").bootstrapMaterialDatePicker('setDate', $(this).val());
                $("#endDate").trigger('change');
            });

            $('#startDate').val($('#StartDate').val());
            $('#endDate').val($('#EndDate').val());
        }

        function initFilter() {

            var currYear = moment().year();
            var curYearLastDate = new Date(currYear, 11, 31);
            var curYearMinDate = new Date((currYear - 1), 0, 1);
            /*
            $('.datepickerFilter').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                minDate: curYearMinDate,
                maxDate: curYearLastDate,
                time: false,
                useCurrent: false
            });
            */
            $('#startDateFilter').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                minDate: curYearMinDate,
                maxDate: curYearLastDate,
                time: false
            }).on('change', function (e, date) {
                $('#endDateFilter').bootstrapMaterialDatePicker('setMinDate', date);
                $('#endDateFilter').bootstrapMaterialDatePicker('setMaxDate', curYearLastDate);

                $("#StartDate").val(date.format('DD-MMM-YYYY'));

            });

            $('#endDateFilter').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                minDate: curYearMinDate,
                maxDate: curYearLastDate,
                time: false
            }).on('change', function (e, date) {
                $("#EndDate").val(date.format('DD-MMM-YYYY'));
            });

            if ($('#StartDate').val()) {
                $('#startDateFilter').bootstrapMaterialDatePicker('setDate', new Date($("#StartDate").val()));
            }
            if ($('#EndDate').val())
                $('#endDateFilter').bootstrapMaterialDatePicker('setDate', new Date($("#EndDate").val()));

        }

        function localLoadDataTable() {
            dataTable = $('#tbDataGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                    $(".dataTables_scrollHeadInner").width($(".dataTables_scrollBody").width());                    
                    $(".table").css({ "width": "100%" });
                    $('.table').wrap("<div style='overflow:auto;width:100%'></div>");
                },
                destroy: true,
                pageLength: 25,
                responsive: true,
                autoWidth: false,
                lengthMenu: [10, 25, 50],
                processing: true,
                serverSide: true,
                stateSave: false,
                info: false,
                filter: false,
                layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},                
                @if ((bool)@Context.Items["isMobile"] == false)
                {
                    <text>
                        ordering: false,
                        columns: [
                            { data: "particulars" },
                            { data: "cnt" }                      
                        ],
                    </text>
                }
                else
                {
                    <text>
                            ordering: false,
                            columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';
                                    item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.Particulars)' + '</dt><dd class="col-lg-8">' + data.particulars + '</dd></dl>';
                                    item += '<dl class="row margin-bottom-0"><dt class="col-lg-4">' + '@Html.DisplayNameFor(model => model.Cnt)' + '</dt><dd class="col-lg-8">' + data.cnt + '</dd></dl>';
                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ],
                    </text>
                }
                ajax: {
                        headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                        url: '@Url.Action("GetDeskManagementWorkloadLists", "Reports")',
                        type: 'GET',
                        cache: true,
                        dataType: "json",
                        data: function (d) {
                            d.columns = null;
                            d.order = null;
                            d.search = null;
                            d.genericSearch = $('#GenericSearch').val();
                            d.startDate = ($('#FilterDataModel_StartDate').val());
                            d.endDate = ($('#FilterDataModel_EndDate').val());
                },
                        error: function (request, status, error) {
                            notify('error', request.responseText, 'danger');
                        }
                    }
                });
        }

        function PostFilterReLoadDataTable(data) {
            $("#modalcontainer").modal('hide');

            $("#FilterDataModel_StartDate").val(data.startDate);
            $("#FilterDataModel_EndDate").val(data.endDate);
            $("#FilterDataModel_StartDate").val();
            $("#FilterDataModel_EndDate").val();

            localLoadDataTable();

            hideLoader();
        }
            
        $("#GenericSearch").keypress(function(event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                    dataTable
                        .search($('#GenericSearch').val())
                        .draw();
                } else {
                    dataTable
                        .search($('#genericSearch').val())
                        .draw();
                }
            }
        });

        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                dataTable
                    .search($('#GenericSearch').val())
                    .draw();
            } else {
                dataTable
                    .search($('#genericSearch').val())
                    .draw();
            }
        });

       
        
    </script>
}

