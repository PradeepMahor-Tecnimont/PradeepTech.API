@model TCMPLApp.WebApp.Models.AssetOnHoldViewModel

@{
    ViewData["Title"] = "AssetOnHold";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="DMS">Desk management</a></li>
         <li class="breadcrumb-item active" aria-current="page">Asset on hold list</li>
    </ol>
}

@section Styles {

    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
    <link href="@Url.Content("~/css/site.css")" rel="stylesheet" type="text/css" asp-append-version="true" />

}

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Asset on hold transaction list</p>
    </div>
    <div class="d-flex flex-row">
        <a title="New transaction" class="btn btn-outline-primary btn-sm border border-white" href="#"
            data-jqueryselector="openmodal"
            data-modalcontainer="modalcontainer"
            data-modalpopupwidth="rightw35"
            data-url='@Url.Action("AssetOnHoldAssetAddCreate", "AssetOnHold", new { Area = "DMS" })'
            data-id=""
            data-modaltitle="New transaction"
            data-modalheader="New transaction">
            <i class="fas fa-plus"></i> Create
        </a>
        <a name="CurrentStatus" id="CurrentStatus" class="btn btn-outline-primary btn-sm border-white  "
                 href='@Url.Action("AssetOnHoldTransLogIndex", "AssetOnHold", new { Area = "DMS" })'>
                <i class="fas fa-list"></i>&nbsp;Goto Log - asset on hold
         </a>

         <a style="float:right" class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto"
                   data-jqueryselector="openmodal"
                   data-modalcontainer="modalcontainer"
                   data-modalpopupwidth="rightw35"
                   data-url='@Url.Action("XLDownloadAssetOnHoldFilterGet", "AssetOnHold", new { Area = "DMS" })'
                   data-modaltitle="Filters - Assign work space"
                   data-modalheader="Filters - Assign work space">
                    <i class="fas fa-file-excel green-color"></i>&nbsp;Export
         </a>

    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>
        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Deskid)</th>
                    <th>@Html.DisplayNameFor(model => model.Assetid)</th>
                    <th>@Html.DisplayNameFor(model => model.AssetDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.ActionTypeText)</th>
                    <th>@Html.DisplayNameFor(model => model.EmpName)</th>
                    <th>@Html.DisplayNameFor(model => model.Assign)</th>
                      <th>&nbsp;</th>
                </tr>
            </thead>
        </table>
        <div id="result"></div>
    </div>
</div>

@section Scripts{

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function () {
            loadDataTable();
        });

        function initDatePicker() {

            $('.datepicker').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false,
                useCurrent: false,
                nowButton: true
            });
        }

        function localScript() {
            initSelect2();

            AssetCategoryChange();

            $('#btnexportplanning').off('click').on('click', function () {
              event.preventDefault();
              event.stopPropagation();
              exportAssetOnHold();
          });
        }

        function AssetCategoryChange(){
             $("#AssetCategory").change(function (e) {
                var selected = $('#AssetCategory').find(':selected');
                var assetCategory = selected[0].value;
                var assetId = $('#AssetId').val();

                $.ajax({
                     url: '@Url.Action("GetAssetList", "AssetOnHold")',
                     data: {
                        'assetCategory': assetCategory
                    },
                    type: 'GET',
                    beforeSend: function () {
                        showLoader();
                        $("#btnconfirm").hide();
                    },
                    success: function (data) {
                        let dropdown = $('#AssetId');
                        dropdown.empty();
                        var flag = false;
                        var jsondata = JSON.parse(data);

                        $(jsondata).each(function () {

                            $('<option value="' + this.DataValueField + '">' + this.DataTextField + '</option>').appendTo(dropdown);
                        });

                        if (flag == false) {
                            assetId = null;
                        }

                        dropdown.val(assetId);
                        dropdown.trigger("change");
                        hideLoader();
                    },
                    error: function (result) {
                        hideLoader();
                        notify('Error', result.responseText, 'danger');
                    }

                });

            });
        }

        function loadDataTable() {
            dataTable = $('#tbGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                },
                destroy: true,
                pageLength: 25,
                 responsive: true,
                autoWidth: false,
                lengthMenu: [25,50],
                processing: true,
                serverSide: true,
                stateSave: true,
                info: false,
                filter: false,
                layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
                @if ((bool)@Context.Items["isMobile"] == false)
                {
                    <text>
                        ordering: false,
                        columns: [

                            { 'data': "deskid" },
                            { 'data': "assetid" },
                            {
                                data: null,
                                render: function (data, type, row) {
                                    if(data.assetDesc != null){
                                        return '<lable data-toggle="tooltip" data-placement="top" aria-hidden="true"  ' +
 									            ' title="' + data.remarks + '" > ' +
 									            '  ' + data.assetDesc  + '' +
                                                ' </lable>';
                                    }else{
                                        return '';
                                    }

                                }
                            },
                            { 'data': "actionTypeText"},
                            {
                               'data': null,
                                render: function(data, type, row) {
                                    return data.empno +" : "+ data.empName ;
                                }
                            },
                            { 'data': "assign" },
                            {
                                data: null,
                                render: function (data, type, row) {
                                    return '<button title="Return" class="btn btn-outline-primary btn-sm border-none" ' +
                                    ' data-jqueryselector="openmodal" ' +
                                    ' data-modalcontainer="modalcontainer" '+
                                    ' data-url="@Url.Action("RemoveAssetOnHold", "AssetOnHold", new { Area = "DMS" })"' +
                                    ' data-modalpopupwidth="rightw35" ' +
                                    ' data-id="' + data.unqid + '"' +
                                    ' data-modaltitle="Remove asset on hold" ' +
                                    ' data-modalheader="Remove asset on hold" >' +
                                    ' <i class="fas fa-exchange-alt" aria-hidden="true"></i> ' +
                                    ' </button>';
                                },
                                className: "td-icon",
                            }
                        ]
                    </text>
                }
                else
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';

                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ]
                    </text>
                },
                ajax: {
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    url: '@Url.Action("GetListsAssetOnHold", "AssetOnHold")',
                    type: 'GET',
                    cache: true,
                    dataType: "json",
                    data: function (d) {
                        d.columns = null;
                        d.order = null;
                        d.search = null;
                        d.genericSearch = $('#GenericSearch').val();
                    },
                    error: function (request, status, error) {
                        notify('error', request.responseText, 'danger');
                    }
                }
            });
        }


        function exportAssetOnHold() {
          let actionTypeCodes = $("#xLDownloadAssetOnHoldFilterGet select[id=ActionType]").val();
          let assetCategory = $("#xLDownloadAssetOnHoldFilterGet select[id=AssetCategory]").val();
          $.ajax({
              headers: { "RequestVerificationToken": $('#xLDownloadAssetOnHoldFilterGet input[name="__RequestVerificationToken"]').val() },
              url: '@Url.Action("XLDownloadAssetOnHold", "AssetOnHold", new {Area = "DMS" })',
              type: "POST",
              data: {
                  ActionType: actionTypeCodes,
                  AssetCategory: assetCategory
              },
              cache: false,
              xhr: function () {
                  var xhr = new XMLHttpRequest();
                  xhr.onreadystatechange = function () {
                      if (xhr.readyState == 2) {
                          if (xhr.status == 200) {
                              xhr.responseType = "blob";
                          }
                      }
                  };
                  return xhr;
              },
              beforeSend: function () {
                  showLoader();
              },

              success: function (blob, status, xhr) {

                  var filename = "";
                  var disposition = xhr.getResponseHeader('Content-Disposition');
                  if (disposition && disposition.indexOf('attachment') !== -1) {
                      var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                      var matches = filenameRegex.exec(disposition);
                      if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                  }
                  var link = document.createElement('a');
                  var url = window.URL.createObjectURL(blob);

                  link.href = window.URL.createObjectURL(blob);
                  link.download = filename;
                  link.click();
                  link.remove();
                  window.URL.revokeObjectURL(url);
                  hideLoader();
                  toastr.success("File downloaded successfully.");
                  $("#modalcontainer").modal('hide');
              },
              error: function (xhr) {
                  showError(xhr);
                  hideLoader();
              }
          });
      }

        $("#GenericSearch").keypress(function(event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                    dataTable
                        .search($('#GenericSearch').val())
                        .draw();
                } else {
                    dataTable
                        .search($('#genericSearch').val())
                        .draw();
                }
            }
         });

        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                dataTable
                    .search($('#GenericSearch').val())
                    .draw();
            } else {
                dataTable
                    .search($('#genericSearch').val())
                    .draw();
            }
        });

        function PostSave(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                hideLoader();
                loadDataTable();
                notify('success', data.response, 'Success');
            }
        }

        function ItemTypeCodeChange() {
            $('#ItemTypeCode').on('change', function (e) {
            var itemTypeCode = $('#ItemTypeCode').val();
            var itemId = $('#ItemId').val();

            if (itemTypeCode != null && itemTypeCode != '') {
                $.ajax({
                    url: "@Url.Action("GetItem", "AssetOnHold", new {Area = "DMS"})",
                    data: {
                        'id': itemTypeCode
                    },
                    type: 'GET',
                    beforeSend: function () {
                        showLoader();
                    },
                    success: function (data) {
                        let dropdown = $('#ItemId');
                        dropdown.empty();
                        var flag = false;
                        var options = '';

                        $(data).each(function () {
                            if (this.dataValueField == itemId) {
                                flag = true;
                                options += '<option selected="selected" value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                            }
                            else {
                                options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                            }
                        });
                        dropdown.html(options);

                        if (flag == false) {
                            phase = null;
                        }

                        dropdown.val(phase);
                        hideLoader();
                    },
                    error: function (result) {
                        hideLoader();
                        notify($.i18n('Error'), result.responseText, 'danger');
                    }
                });
            }
        });
        }

        function EmpnoChange() {
            $('#Empno').on('change', function (e) {
            var empno = $('#Empno').val();
            var itemId = $('#ItemId').val();

            if (empno != null && empno != '') {
                $.ajax({
                    url: "@Url.Action("GetReturnItem", "AssetOnHold", new {Area = "DMS"})",
                    data: {
                        'id': empno
                    },
                    type: 'GET',
                    beforeSend: function () {
                        showLoader();
                    },
                    success: function (data) {
                        let dropdown = $('#ItemId');
                        dropdown.empty();
                        var flag = false;
                        var options = '';

                        $(data).each(function () {
                            if (this.dataValueField == itemId) {
                                flag = true;
                                options += '<option selected="selected" value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                            }
                            else {
                                options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                            }
                        });
                        dropdown.html(options);

                        if (flag == false) {
                            phase = null;
                        }

                        dropdown.val(phase);
                        hideLoader();
                    },
                    error: function (result) {
                        hideLoader();
                        notify($.i18n('Error'), result.responseText, 'danger');
                    }
                });
            }
        });
        }

    </script>
}
