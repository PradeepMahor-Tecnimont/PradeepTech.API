@model TCMPLApp.WebApp.Models.InvConsumablesViewModel

@{
    ViewData["Title"] = "Consumables";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="DMS">Desk management</a></li>
            <li class="breadcrumb-item "><a asp-action="Index" asp-controller="INV" asp-area="DMS">Inventory</a></li>
        <li class="breadcrumb-item active" aria-current="page">Consumables list</li>
    </ol>
}

@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
    <link href="~/lib/dropzone/dropzone.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/lib/dropzone/basic.css" rel="stylesheet" asp-append-version="true" />
}

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Consumables list</p>
    </div>
    <div class="d-flex flex-row">
        <a title="New Consumables" class="btn btn-outline-primary btn-sm border border-white" href="#"
            data-jqueryselector="openmodal"
            data-modalcontainer="modalcontainer"
            data-modalpopupwidth="rightw35"
            data-url='@Url.Action("ConsumablesXLUpload", "INV", new { Area = "DMS" })'
            data-id=""
            data-modaltitle="New Consumables"
            data-modalheader="New Consumables">
            <i class="fas fa-plus"></i> Consumables upload
        </a>           
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>
        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>                    
                    <th>&nbsp;</th>
                    @* <th>@Html.DisplayNameFor(model => model.ConsumableId)</th>
                    <th>@Html.DisplayNameFor(model => model.ConsumableDate)</th> *@
                    <th>@Html.DisplayNameFor(model => model.ConsumableDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.Quantity)</th>
                    <th>@Html.DisplayNameFor(model => model.PoNumber)</th>
                    <th>@Html.DisplayNameFor(model => model.Vendor)</th>
                    <th>@Html.DisplayNameFor(model => model.WarrantyEndDate)</th>
                </tr>
            </thead>
        </table>
        <div id="result"></div>
    </div>
</div>

@section Scripts{

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
        <script src="~/lib/dropzone/dropzone.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            loadDataTable();
        });

        function initDatePicker() {

            $('.datepicker').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false,
                useCurrent: false,
                nowButton: true
            });

            $("#transDate").on("change", function (event, date) {
                $("#TransDate").val(date.format("DD-MMM-YYYY"));
            });

            if ($('#TransDate').val()) {
                $('#transDate').bootstrapMaterialDatePicker('setDate', new Date($("PoDate").val()));
            }

            if ($("#TransDate").val()) {
                $('#transDate').val(moment($("#TransDate").val(),"DD-MMM-YYYY").format('DD-MMM-YYYY'));
            }

            $('#pODate').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false
            }).on('change', function (e, date) {
                $("#PODate").val(date.format('DD-MMM-YYYY'));
            });
            
            $('#invoiceDate').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false
            }).on('change', function (e, date) {
                $("#InvoiceDate").val(date.format('DD-MMM-YYYY'));
            });

            $('#warrantyEndDate').bootstrapMaterialDatePicker({
                format: 'DD-MMM-YYYY',
                weekStart: 0,
                time: false
            }).on('change', function (e, date) {
                $("#WarrantyEndDate").val(date.format('DD-MMM-YYYY'));
            });
        }

        function localScript() {
            initSelect2();
            initDatePicker();
                        $("#dropZoneWrapper").hide();

            initUploadConsumablesControls();
        }

        function loadDataTable() {
            dataTable = $('#tbGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                },
                destroy: true,
                pageLength: 25,
                 responsive: true,
                autoWidth: false,
                lengthMenu: [25,50],
                processing: true,
                serverSide: true,
                stateSave: true,
                info: false,
                filter: false,
                layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
                @if ((bool)@Context.Items["isMobile"] == false)
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                                'data': null,
                                render: function (data, type, row) {
                                    return '<a class="btn btn-sm-icon"  href="InvConsumablesDetailIndex/' + data.consumableId + '" title="Detail"><i class="far fa-eye"></i></a>';
                                },
                                'className': "td-icon",
                            },
                            // { 'data': "consumableId" },
                            // {
                            //     data: "consumableDate",
                            //     width: '10.0rem',
                            //     render: function(data, type, row) {
                            //         return moment(data).format("DD-MMM-YYYY");
                            //     }
                            // },
                            { 'data': "consumableDesc" },
                            { 'data': "quantity" },
                            { 'data': "poNumber" },
                            { 'data': "vendor" },
                            {
                                data: null,
                                width: '10.0rem',
                                render: function(data, type, row) {
                                    if (data.warrantyEndDate) {
                                        return moment(data).format("DD-MMM-YYYY");
                                    }
                                    else
                                    { 
                                        return null;
                                    }
                                    
                                }
                            },
                        ]
                    </text>
                }
                else
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';

                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ]
                    </text>
                },
                ajax: {
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    url: '@Url.Action("GetListsConsumables", "INV")',
                    type: 'GET',
                    cache: true,
                    dataType: "json",
                    data: function (d) {
                        d.columns = null;
                        d.order = null;
                        d.search = null;
                        d.genericSearch = $('#GenericSearch').val();
                    },
                    error: function (request, status, error) {
                        notify('error', request.responseText, 'danger');
                    }
                }
            });
        }

        $("#GenericSearch").keypress(function(event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                    dataTable
                        .search($('#GenericSearch').val())
                        .draw();
                } else {
                    dataTable
                        .search($('#genericSearch').val())
                        .draw();
                }
            }
         });
        
        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                dataTable
                    .search($('#GenericSearch').val())
                    .draw();
            } else {
                dataTable
                    .search($('#genericSearch').val())
                    .draw();
            }
        });

        function initUploadConsumablesControls() {
            if ($("#formConsumablesXLUpload").length != 0) {
                initDropZone(".xlsx");
            }


            $('#btnUploadConsumablesXL').off('click').on('click', function () {
                event.preventDefault();
                event.stopPropagation();
                submitConsumablesXL();
            });

            $('#btnConsumablesXLTemplate').off('click').on('click', function () {
                event.preventDefault();
                event.stopPropagation();
                downloadConsumablesXLTemplate();
            });

            $('#ConsumableType').on('change', function (e) {
                event.preventDefault();
                event.stopPropagation();
                ConsumableTypeCodeChange();
            });

        }

        function downloadConsumablesXLTemplate() {
            console.log("downloadTemplate");
            $.ajax({
                headers: { "RequestVerificationToken": $('#formConsumablesUpload input[name="__RequestVerificationToken"]').val() },
                url: "@Url.Action("ConsumablesXLTemplate", "INV", new { Area = "DMS" })",
                type: "GET",
                cache: false,
                xhr: function () {
                    var xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 2) {
                            if (xhr.status == 200) {
                                xhr.responseType = "blob";
                            }
                        }
                    };
                    return xhr;
                },
                beforeSend: function () {
                    showLoader();
                },

                success: function (blob, status, xhr) {

                    var filename = "";
                    var disposition = xhr.getResponseHeader('Content-Disposition');
                    if (disposition && disposition.indexOf('attachment') !== -1) {
                        var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                        var matches = filenameRegex.exec(disposition);
                        if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                    }
                    var link = document.createElement('a');
                    var url = window.URL.createObjectURL(blob);

                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;
                    link.click();
                    link.remove();
                    window.URL.revokeObjectURL(url);
                    hideLoader();
                    toastr.success("File downloaded successfully.");
                },
                error: function (xhr) {
                    showError(xhr);
                    hideLoader();
                }
            });
        }


        Dropzone.autoDiscover = false;

        function initDropZone(fileTypeExtension) {
            
            $("#dropZoneWrapper").show();
            let formId = "#" + $("div#iddropzone2").closest("form").attr("id");
            $('div#iddropzone2').each(function () {

                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    return;
                }
            });

            $("div#iddropzone2").dropzone({
                url: '@Url.Action("TrainingFileUpload", "EmployeeTraining", new {Area = "SWPVaccine"})',
                autoProcessQueue: false,
                uploadMultiple: false,
                parallelUploads: 1,
                maxFiles: 1,
                maxFilesize: 1,
                addRemoveLinks: true,
                createImageThumbnails: false,
                acceptedFiles: fileTypeExtension,
                init: function () {
                    var myDropzone = this;

                    // First change the button to actually tell Dropzone to process the queue.
                    //this.element.querySelector("button[type=submit]").addEventListener("click", function (e) {
                    //    // Make sure that the form isn't actually being sent.
                    //    e.preventDefault();
                    //    e.stopPropagation();
                    //    myDropzone.processQueue();
                    //});

                    // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                    // of the sending event because uploadMultiple is set to true.
                    this.on("processing", function (file) {
                        
                        this.options.url = $(formId).attr("action");
                    });
                    this.on("sending", function (file, xhr, formData) {

                        formData.append("file", file);
                        var data = $(formId).serializeArray();

                        $.each(data, function (key, el) {
                            formData.append(el.name, el.value);
                        });
                        showModalLoader();

                    });
                    this.on("sendingmultiple", function () {
                        // Gets triggered when the form is actually being sent.
                        // Hide the success button or the complete form.
                    });
                    this.on("successmultiple", function (files, data) {
                        
                        if (data.success) {
                            PostSaveReLoadDataTable(data)
                        }
                        else {
                            notify("error", data.response, "File upload failed.");
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("success", function (files, data) {
                        
                        if (data.success) {
                            PostSaveReLoadDataTable(data)
                        }
                        else {
                            notify("error", data.response, "File upload failed.");
                            if (data.fileContent != null) {
                                var blob = b64toBlob(data.fileContent.fileContents, data.fileContent.contentType);
                                var link = document.createElement('a');
                                link.href = window.URL.createObjectURL(blob);
                                link.download = data.fileContent.fileDownloadName;
                                link.click();
                            }
                        }
                        hideModalLoader();

                        this.removeAllFiles(true);
                    });
                    this.on("errormultiple", function (files, data) {
                        notify("error", "File not uploaded + " + data.response, "Error");
                        this.removeAllFiles(true);
                        hideModalLoader();

                        // Gets triggered when there was an error sending the files.
                        // Maybe show form again, and notify user of error
                    });
                }

            });

            const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {
                const byteCharacters = atob(b64Data);
                const byteArrays = [];

                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                    const slice = byteCharacters.slice(offset, offset + sliceSize);

                    const byteNumbers = new Array(slice.length);
                    for (let i = 0; i < slice.length; i++) {
                        byteNumbers[i] = slice.charCodeAt(i);
                    }

                    const byteArray = new Uint8Array(byteNumbers);
                    byteArrays.push(byteArray);
                }

                const blob = new Blob(byteArrays, { type: contentType });
                return blob;
            };

        }

        function detachDropZone() {

            $("#dropZoneWrapper").hide();
            $('div#iddropzone2').each(function () {
                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    dropzoneControl.destroy();
                }
            });
        }


        function submitConsumablesXL() {

            var formConsumablesXLUpload = "#formConsumablesXLUpload";
            if ($(formConsumablesXLUpload).length == 0) {
                console.log("Form not found");
                return;
            }


            oDropZone2 = Dropzone.forElement("div#iddropzone2");
            if (oDropZone2.files.length != 0) {
                oDropZone2.processQueue();
                //notify("error", "No files selected.", "Error");
                //return;
            }
            else{
                $(formConsumablesXLUpload).submit();
            }
        }

        function PostSaveReLoadDataTable(data) {
            console.log(data);
            if (data.success) {
                $("#modalcontainer").modal('hide');
                loadDataTable();
                hideLoader();
                notify('success', data.response, 'Success');
            }
        }

        
        function ConsumableTypeCodeChange() {
            var selectedConsumableType = $('#ConsumableType').val();
            console.log(selectedConsumableType );
            $.ajax({
                url: "@Url.Action("GetRAMSelectList", "INV", new {Area = "DMS"})",
                data: {
                    'id': selectedConsumableType 
                },
                type: 'GET',
                beforeSend: function () {
                    showLoader();
                },
                success: function (data) {
                    let dropdown = $('#RAMCapacity');
                                  console.log(data.length );
  hideLoader();

                    if(data.length == 0)
                    {

                        //hide dropdown
                        $("#divRAMSelectList").removeClass("display");
                        $("#divRAMSelectList").addClass("hidden");
                        //**** */

                        return;
                    }
                    //Show dropdown                    
                    $("#divRAMSelectList").removeClass("hidden");
                    $("#divRAMSelectList").addClass("display");
                    /******** */
                    
                    var flag = false;
                    var options = '';

                        $(data).each(function () {
                            if (this.dataValueField == selectedConsumableType) {
                                flag = true;
                                options += '<option selected="selected" value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                            }
                            else {
                                options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                            }
                        });
                        dropdown.html(options);
                    
                    hideLoader();
                },
                error: function (result) {
                    hideLoader();
                    showError(result);
                }
            });

        }


    </script>
}
