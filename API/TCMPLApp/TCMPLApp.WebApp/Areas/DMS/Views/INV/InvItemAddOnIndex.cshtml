@model TCMPLApp.WebApp.Models.InvItemAddOnViewModel

@{
    ViewData["Title"] = "Transactions - item addons";
}

@Html.AntiForgeryToken()

@section BreadCrumbs
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item "><a asp-action="Index" asp-controller="Home" asp-area="DMS">Desk management</a></li>
            <li class="breadcrumb-item "><a asp-action="Index" asp-controller="INV" asp-area="DMS">Inventory</a></li>
        <li class="breadcrumb-item active" aria-current="page">Transactions - item addons</li>
    </ol>
}

@section Styles {
    <link href="@Url.Content("~/css/drome-style.css")" rel="stylesheet" type="text/css" asp-append-version="true" />
}

<div class="container-fluid bg-white border rounded shadow m-auto col-xl-11 p-2 ">
    <div class="app-h4 app-card-header mb-2">
        <p>Transactions - item addons</p>
    </div>
    <div class="d-flex flex-row">
        <a title="New item issue" class="btn btn-outline-primary btn-sm border border-white" href="#"
            data-jqueryselector="openmodal"
            data-modalcontainer="modalcontainer"
            data-modalpopupwidth="rightw35"
            data-url='@Url.Action("InvItemAddOnCreate", "INV", new { Area = "DMS" })'
            data-id=""
            data-modaltitle="New item issue"
            data-modalheader="New item issue">
            <i class="fas fa-plus"></i> Create
        </a>           
        <a name="CurrentStatus" id="CurrentStatus" class="btn btn-outline-primary btn-sm border-white  " 
        href='@Url.Action("InvItemAddOnDetailIndex", "INV", new { Area = "DMS" })'>
        <i class="fas fa-list"></i>&nbsp;Goto Log - Item addon
            </a>
@*        <a title="New item issue" class="btn btn-outline-primary btn-sm border border-white" href="#"
            data-jqueryselector="openmodal"
            data-modalcontainer="modalcontainer"
            data-modalpopupwidth="rightw35"
            data-url='@Url.Action("InvItemAddOnReturn", "INV", new { Area = "DMS" })'
            data-id=""
            data-modaltitle="New item issue"
            data-modalheader="New item issue">
            <i class="fas fa-plus"></i> Create return 
        </a>       

*@        <a style="float:right" class="btn btn-outline-success btn-sm border border-white mx-2 ml-auto"
            href="#"
            data-jqueryselector="binarydownload"
            data-url="@(Url.Action("InvItemAddOnExcelDownload", "INV", new { Area = "DMS" }))"
            >

            <i class="fas fa-file-excel green-color"></i>&nbsp;Export
        </a>
    </div>
    <div class="m-1"></div>
    <div class="bg-gray-active rounded ">
        <div class="input-group pt-1 pl-1 pr-1 ">
            <input type="text" class="form-control form-control-sm border" id="GenericSearch" name="GenericSearch" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-sm btn-outline-info" type="button" id="buttonSearch"><i class="fa fa-search"></i></button>
            </div>
        </div>
        <table id="tbGrid" class="table table-striped table-bordered table-responsive-lg ">
            <thead class="bg-info text-white">
                <tr>                    
                    <th>@Html.DisplayNameFor(model => model.TransDate)</th>
                    <th>@Html.DisplayNameFor(model => model.TransTypeDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.ContainerItemId)</th>
                    <th>@Html.DisplayNameFor(model => model.ContainerItemDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.AddonItemId)</th>
                    <th>@Html.DisplayNameFor(model => model.MfgId)</th>
                    <th>@Html.DisplayNameFor(model => model.AddonItemDesc)</th>
                    <th>@Html.DisplayNameFor(model => model.Remarks)</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
        </table>
        <div id="result"></div>
    </div>
</div>

@section Scripts{

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function () {
            loadDataTable();
        });

        function localScript() {
            initSelect2();
            ItemAddOnTypeChange();
            ItemContainerTypeChange();
        }

        function loadDataTable() {
            dataTable = $('#tbGrid').DataTable({
                drawCallback: function (settings) {
                    loadScript();
                },
                destroy: true,
                pageLength: 25,
                 responsive: true,
                autoWidth: false,
                lengthMenu: [25,50],
                processing: true,
                serverSide: true,
                stateSave: true,
                info: false,
                filter: false,
                layout: {topStart: null,bottomStart: 'pageLength',bottomEnd: 'paging'},
                @if ((bool)@Context.Items["isMobile"] == false)
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                                data: "transDate",
                                width: '10.0rem',
                                render: function(data, type, row) {
                                    return moment(data).format("DD-MMM-YYYY");
                                }
                            },
                            { 'data': "transTypeDesc" },
                            { 'data': "containerItemId" },
                            { 'data': "containerItemDesc" },
                            { 'data': "addonItemId" },
                            { 'data': "mfgId" },
                            { 'data': "addonItemDesc" },
                            { 'data': "remarks" },
                            {
                                data: null,
                                render: function (data, type, row) {
                                    return '<button title="Return" class="btn btn-outline-primary btn-sm border-none" ' +
                                    ' data-jqueryselector="openmodal" ' +
                                    ' data-modalcontainer="modalcontainer" '+
                                    ' data-url="@Url.Action("InvItemAddOnReturnAdd", "INV", new { Area = "DMS" })"' +
                                    ' data-modalpopupwidth="rightw35" ' +
                                    ' data-transid="' + data.transId + '"' +
                                    ' data-modaltitle="Item Addon reversal" ' +
                                    ' data-modalheader="Item Addon reversal" >' +
                                    ' <i class="fas fa-exchange-alt" aria-hidden="true"></i> ' +
                                        ' </button>';
                                },
                                className: "td-icon",
                            }

                        ]
                    </text>
                }
                else
                {
                    <text>
                        ordering: false,
                        columns: [
                            {
                                data: null,
                                render: function (data, type, row) {
                                    var item = '<div class="card">';
                                    item += '<div class="card-mobiledatatable">';

                                    item += '</div></div>';
                                    return item
                                },
                                sortable: false,
                                searchable: false,
                                className: "datatable-td-mobile"
                            }
                        ]
                    </text>
                },
                ajax: {
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    url: '@Url.Action("GetListsItemAddOn", "INV")',
                    type: 'GET',
                    cache: true,
                    dataType: "json",
                    data: function (d) {
                        d.columns = null;
                        d.order = null;
                        d.search = null;
                        d.genericSearch = $('#GenericSearch').val();
                    },
                    error: function (request, status, error) {
                        showError(request);
                    }
                }
            });
        }

        $("#GenericSearch").keypress(function(event) {
            if (event.keyCode === 13) {
                if ($("#GenericSearch").length) {
                    dataTable
                        .search($('#GenericSearch').val())
                        .draw();
                } else {
                    dataTable
                        .search($('#genericSearch').val())
                        .draw();
                }
            }
         });
        
        $('#buttonSearch').on('click', function () {

            if ($("#GenericSearch").length) {
                dataTable
                    .search($('#GenericSearch').val())
                    .draw();
            } else {
                dataTable
                    .search($('#genericSearch').val())
                    .draw();
            }
        });

        function PostSave(data) {
            if (data.success) {
                $("#modalcontainer").modal('hide');
                hideLoader();
                loadDataTable();
                notify('success', data.response, 'Success');
            }
        }
        
        function ItemAddOnTypeChange() {
            $('#AddonItemType').on('change', function (e) {

            let addonItemTypeId = $('#AddonItemType').val();

            let ddlAddonItemType = $(this);
            let ddlContainerItemTypes = $('#ContainerItemType')
            let ddlContainerItems = $('#ContainerItemId')
            let ddlAddOnItems = $('#AddonItemId')

            ddlContainerItemTypes.empty();
            ddlContainerItems.empty();
            ddlAddOnItems.empty();

            if (addonItemTypeId != null && addonItemTypeId != '') {
                //Get AddOn Items list
                $.ajax({
                    url: "@Url.Action("GetItemAddOnItemsSelectList", "INV", new {Area = "DMS"})",
                    data: {
                        'AddOnItemTypeId': addonItemTypeId
                    },
                    type: 'GET',
                    beforeSend: function () {
                        showLoader();
                    },
                    success: function (data) {
                        PopulateDDLOptions(ddlAddOnItems, data, '')
                        hideLoader();
                    },
                    error: function (result) {
                        hideLoader();
                        showError(result);
                    }
                });

                //Get Item Container Types
                $.ajax({
                    url: "@Url.Action("GetItemAddOnContainerTypesSelectList", "INV", new {Area = "DMS"})",
                    data: {
                        'addonItemTypeId': addonItemTypeId
                    },
                    type: 'GET',
                    beforeSend: function () {
                        showLoader();
                    },
                    success: function (data) {
                        PopulateDDLOptions(ddlContainerItemTypes, data, '')
                        hideLoader();
                    },
                    error: function (result) {
                        hideLoader();
                        showError(result);
                    }
                });

            }
        });
        }


        function ItemContainerTypeChange(){
            $('#ContainerItemType').on('change', function (e) {

                let containerItemTypeId = $('#ContainerItemType').val();

                let ddlContainerItemTypes = $('#ContainerItemType')
                let ddlContainerItems = $('#ContainerItemId')

                ddlContainerItems.empty();

                if (containerItemTypeId != null && containerItemTypeId != '') {
                    //Get AddOn Items list
                    $.ajax({
                        url: "@Url.Action("GetItemAddOnItemsSelectList", "INV", new {Area = "DMS"})",
                        data: {
                            'AddOnItemTypeId': containerItemTypeId
                        },
                        type: 'GET',
                        beforeSend: function () {
                            showLoader();
                        },
                        success: function (data) {
                            PopulateDDLOptions(ddlContainerItems, data, '')
                            hideLoader();
                        },
                        error: function (result) {
                            hideLoader();
                            showError(result);
                        }
                    });
                }
            });
        }

        function PopulateDDLOptions(dropdown,data, selectedVal) {
            var options = '';
            options = '<option value=""><option>'
            $(data).each(function () {
                if (this.dataValueField == selectedVal) {
                    options += '<option selected="selected" value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                }
                else {
                    options += '<option value="' + this.dataValueField + '">' + this.dataTextField + '</option>';
                }
            });
            dropdown.html(options);
        }
        
    </script>
}
