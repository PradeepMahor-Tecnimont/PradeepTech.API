--------------------------------------------------------
--  File created - Wednesday-May-04-2022   
--------------------------------------------------------
---------------------------
--New TABLE
--SWP_FLAGS
---------------------------
  CREATE TABLE "SELFSERVICE"."SWP_FLAGS" 
   (	"FLAG_ID" VARCHAR2(4) NOT NULL ENABLE,
	"FLAG_CODE" VARCHAR2(100),
	"FLAG_DESC" VARCHAR2(1000),
	"FLAG_VALUE" VARCHAR2(2),
	"FLAG_VALUE_DATE" DATE,
	"FLAG_VALUE_NUMBER" NUMBER,
	CONSTRAINT "SWP_FLAGS_PK" PRIMARY KEY ("FLAG_ID") ENABLE,
	CONSTRAINT "SWP_FLAGS_UK1" UNIQUE ("FLAG_CODE") ENABLE
   );
  COMMENT ON COLUMN "SELFSERVICE"."SWP_FLAGS"."FLAG_VALUE" IS 'OK/KO';
---------------------------
--New TABLE
--SWP_EXCLUDE_EMP
---------------------------
  CREATE TABLE "SELFSERVICE"."SWP_EXCLUDE_EMP" 
   (	"KEY_ID" VARCHAR2(10) NOT NULL ENABLE,
	"EMPNO" CHAR(5) NOT NULL ENABLE,
	"START_DATE" DATE NOT NULL ENABLE,
	"END_DATE" DATE NOT NULL ENABLE,
	"REASON" VARCHAR2(400) NOT NULL ENABLE,
	"MODIFIED_ON" DATE NOT NULL ENABLE,
	"MODIFIED_BY" VARCHAR2(5) NOT NULL ENABLE,
	"IS_ACTIVE" NUMBER NOT NULL ENABLE,
	CONSTRAINT "SWP_EXCLUDE_EMP_PK" PRIMARY KEY ("KEY_ID") ENABLE,
	CONSTRAINT "SWP_EXCLUDE_EMP_UK" UNIQUE ("EMPNO","START_DATE") ENABLE
   );
---------------------------
--Changed TABLE
--SWP_VACCINE_DATES
---------------------------
ALTER TABLE "SELFSERVICE"."SWP_VACCINE_DATES" ADD ("BOOSTER_JAB_DATE" DATE);

---------------------------
--New TABLE
--SWP_DEPUTATION_DEPARTMENTS
---------------------------
  CREATE TABLE "SELFSERVICE"."SWP_DEPUTATION_DEPARTMENTS" 
   (	"ASSIGN" CHAR(4)
   );
---------------------------
--New TABLE
--SWP_SMART_ATTENDANCE_PLAN_BKP
---------------------------
  CREATE TABLE "SELFSERVICE"."SWP_SMART_ATTENDANCE_PLAN_BKP" 
   (	"KEY_ID" CHAR(10) NOT NULL ENABLE,
	"WS_KEY_ID" CHAR(10) NOT NULL ENABLE,
	"EMPNO" CHAR(5) NOT NULL ENABLE,
	"ATTENDANCE_DATE" DATE NOT NULL ENABLE,
	"MODIFIED_ON" DATE NOT NULL ENABLE,
	"MODIFIED_BY" VARCHAR2(5) NOT NULL ENABLE,
	"DESKID" VARCHAR2(10) NOT NULL ENABLE,
	"WEEK_KEY_ID" VARCHAR2(8)
   );
---------------------------
--New TABLE
--SWP_EXCLUDE_EMP_TO_DEL
---------------------------
  CREATE TABLE "SELFSERVICE"."SWP_EXCLUDE_EMP_TO_DEL" 
   (	"EMPNO" CHAR(5) NOT NULL ENABLE,
	"START_DATE" DATE NOT NULL ENABLE,
	"END_DATE" DATE NOT NULL ENABLE,
	"REASON" VARCHAR2(200) NOT NULL ENABLE,
	"MODIFIED_ON" DATE,
	"MODIFIED_BY" VARCHAR2(5)
   );
---------------------------
--Changed TABLE
--SS_DELEGATE
---------------------------
ALTER TABLE "SELFSERVICE"."SS_DELEGATE" MODIFY ("MNGR" NOT NULL ENABLE);
ALTER TABLE "SELFSERVICE"."SS_DELEGATE" DROP CONSTRAINT "SS_DELEGATE_PK";
ALTER TABLE "SELFSERVICE"."SS_DELEGATE" ADD CONSTRAINT "SS_DELEGATE_PK" PRIMARY KEY ("EMPNO","MNGR") ENABLE;

---------------------------
--Changed TABLE
--SWP_EMP_PROJ_MAPPING
---------------------------
ALTER TABLE "SELFSERVICE"."SWP_EMP_PROJ_MAPPING" ADD ("KEY_ID" VARCHAR2(10) NOT NULL ENABLE);
ALTER TABLE "SELFSERVICE"."SWP_EMP_PROJ_MAPPING" DROP ("KYE_ID");
ALTER TABLE "SELFSERVICE"."SWP_EMP_PROJ_MAPPING" DROP CONSTRAINT "SWP_EMP_PROJ_MAPPING_PK";
ALTER TABLE "SELFSERVICE"."SWP_EMP_PROJ_MAPPING" ADD CONSTRAINT "SWP_EMP_PROJ_MAPPING_PK" PRIMARY KEY ("KEY_ID") ENABLE;

---------------------------
--Changed TABLE
--SWP_CONFIG_WEEKS
---------------------------
ALTER TABLE "SELFSERVICE"."SWP_CONFIG_WEEKS" ADD ("OWS_OPEN" NUMBER(1,0));
ALTER TABLE "SELFSERVICE"."SWP_CONFIG_WEEKS" ADD ("PWS_OPEN" NUMBER(1,0));
ALTER TABLE "SELFSERVICE"."SWP_CONFIG_WEEKS" ADD ("SWS_OPEN" NUMBER(1,0));
ALTER TABLE "SELFSERVICE"."SWP_CONFIG_WEEKS" ADD ("TO_DEL_PLANNING_OPEN" NUMBER(1,0));
ALTER TABLE "SELFSERVICE"."SWP_CONFIG_WEEKS" DROP ("PLANNING_OPEN");
COMMENT ON COLUMN "SELFSERVICE"."SWP_CONFIG_WEEKS"."PLANNING_OPEN" IS '';
COMMENT ON COLUMN "SELFSERVICE"."SWP_CONFIG_WEEKS"."OWS_OPEN" IS '1 - Open / 0 - Close';
COMMENT ON COLUMN "SELFSERVICE"."SWP_CONFIG_WEEKS"."PWS_OPEN" IS '1 - Open / 0 - Close';
COMMENT ON COLUMN "SELFSERVICE"."SWP_CONFIG_WEEKS"."SWS_OPEN" IS '1 - Open / 0 - Close';
COMMENT ON COLUMN "SELFSERVICE"."SWP_CONFIG_WEEKS"."TO_DEL_PLANNING_OPEN" IS '1 - Yes / 0 - No';

---------------------------
--New TABLE
--SS_REPORT_WORKED_HRS
---------------------------
  CREATE TABLE "SELFSERVICE"."SS_REPORT_WORKED_HRS" 
   (	"EMPNO" CHAR(5),
	"PDATE" DATE,
	"WORKED_HOURS" NUMBER,
	"DELTA_HOURS" NUMBER,
	"IS_HOLIDAY" NUMBER(1,0),
	"SHIFT_CODE" VARCHAR2(2)
   );
---------------------------
--New VIEW
--SS_DEPU_EDTICB
---------------------------
CREATE OR REPLACE FORCE VIEW "SELFSERVICE"."SS_DEPU_EDTICB" 
 ( ""
  )  AS 
  SELECT *
  FROM SelfService_EDTicb.SS_Depu
WITH READ ONLY;
---------------------------
--Changed VIEW
--DM_VU_DESKS
---------------------------
CREATE OR REPLACE FORCE VIEW "SELFSERVICE"."DM_VU_DESKS" 
 ( "DESKID", "OFFICE", "FLOOR", "SEATNO", "WING", "ASSETCODE", "NOEXIST", "CABIN", "REMARKS", "DESKID_OLD", "WORK_AREA", "BAY", "AREA_DESC", "AREA_CATG_CODE", "CATG_DESC"
  )  AS 
  Select
    dl."DESKID",dl."OFFICE",dl."FLOOR",dl."SEATNO",dl."WING",dl."ASSETCODE",dl."NOEXIST",dl."CABIN",dl."REMARKS",dl."DESKID_OLD",dl."WORK_AREA",dl."BAY", da.area_desc, da.area_catg_code, dac.description As catg_desc
From
    dm_vu_desk_list                                   dl
    Inner Join selfservice.dm_vu_desk_areas           da
    On dl.work_area = da.area_key_id
    Inner Join selfservice.dm_vu_desk_area_categories dac
    On da.area_catg_code = dac.area_catg_code;
---------------------------
--Changed VIEW
--SWP_VU_EMP_VACCINE_DATE
---------------------------
CREATE OR REPLACE FORCE VIEW "SELFSERVICE"."SWP_VU_EMP_VACCINE_DATE" 
 ( "EMPNO", "NAME", "PARENT", "GRADE", "VACCINE_TYPE", "JAB1_DATE", "FIRST_JAB_SPONSOR", "JAB2_DATE", "SECOND_JAB_SPONSOR", "BOOSTER_JAB_DATE", "CAN_EDIT", "MODIFIED_ON"
  )  AS 
  Select
        d.empno,
        e.name,
        e.parent,
        e.grade,
        d.vaccine_type,
        d.jab1_date,
        Case nvl(d.is_jab1_by_office, 'KO')
            When 'OK' Then
                'Office'
            When 'KO' Then
                'Self'
        End first_jab_sponsor,
        d.jab2_date,
        Case d.is_jab2_by_office
            When 'OK' Then
                'Office'
            When 'KO' Then
                'Self'
            Else
                ''
        End second_jab_sponsor,
        d.booster_jab_date,
        Case
            When d.booster_jab_date Is Null Then
                'OK'
            Else
                'KO'
        End can_edit,
        d.modified_on
    From
        swp_vaccine_dates d,
        ss_emplmast       e
    Where
        d.empno      = e.empno
        And e.status = 1;
---------------------------
--New INDEX
--SS_ABSENT_MASTER_INDEX2
---------------------------
  CREATE INDEX "SELFSERVICE"."SS_ABSENT_MASTER_INDEX2" ON "SELFSERVICE"."SS_ABSENT_MASTER" ("ABSENT_YYYYMM","PAYSLIP_YYYYMM");
---------------------------
--New INDEX
--SWP_EXCLUDE_EMP_UK
---------------------------
  CREATE UNIQUE INDEX "SELFSERVICE"."SWP_EXCLUDE_EMP_UK" ON "SELFSERVICE"."SWP_EXCLUDE_EMP" ("EMPNO","START_DATE");
---------------------------
--New INDEX
--SWP_EXCLUDE_EMP_PK
---------------------------
  CREATE UNIQUE INDEX "SELFSERVICE"."SWP_EXCLUDE_EMP_PK" ON "SELFSERVICE"."SWP_EXCLUDE_EMP" ("KEY_ID");
---------------------------
--New INDEX
--SS_REPORT_WORKED_HRS_INDEX1
---------------------------
  CREATE INDEX "SELFSERVICE"."SS_REPORT_WORKED_HRS_INDEX1" ON "SELFSERVICE"."SS_REPORT_WORKED_HRS" ("EMPNO","PDATE");
---------------------------
--Changed INDEX
--SWP_EMP_PROJ_MAPPING_PK
---------------------------
DROP INDEX "SELFSERVICE"."SWP_EMP_PROJ_MAPPING_PK";
  CREATE UNIQUE INDEX "SELFSERVICE"."SWP_EMP_PROJ_MAPPING_PK" ON "SELFSERVICE"."SWP_EMP_PROJ_MAPPING" ("KEY_ID");
---------------------------
--New INDEX
--SWP_FLAGS_UK1
---------------------------
  CREATE UNIQUE INDEX "SELFSERVICE"."SWP_FLAGS_UK1" ON "SELFSERVICE"."SWP_FLAGS" ("FLAG_CODE");
---------------------------
--New INDEX
--SWP_FLAGS_PK
---------------------------
  CREATE UNIQUE INDEX "SELFSERVICE"."SWP_FLAGS_PK" ON "SELFSERVICE"."SWP_FLAGS" ("FLAG_ID");
---------------------------
--New INDEX
--SS_ABSENT_TS_DETAIL_INDEX2
---------------------------
  CREATE INDEX "SELFSERVICE"."SS_ABSENT_TS_DETAIL_INDEX2" ON "SELFSERVICE"."SS_ABSENT_TS_DETAIL" ("KEY_ID","ABSENT_YYYYMM","PAYSLIP_YYYYMM","EMPNO");
---------------------------
--New INDEX
--SS_REPORT_WORKED_HRS_INDEX2
---------------------------
  CREATE INDEX "SELFSERVICE"."SS_REPORT_WORKED_HRS_INDEX2" ON "SELFSERVICE"."SS_REPORT_WORKED_HRS" ("PDATE");
---------------------------
--Changed INDEX
--SWP_WFH_WEEKATND_PK
---------------------------
DROP INDEX "SELFSERVICE"."SWP_WFH_WEEKATND_PK";
  CREATE UNIQUE INDEX "SELFSERVICE"."SWP_WFH_WEEKATND_PK" ON "SELFSERVICE"."SWP_SMART_ATTENDANCE_PLAN" ("KEY_ID");
---------------------------
--New INDEX
--SS_DELEGATE_PK1
---------------------------
  CREATE UNIQUE INDEX "SELFSERVICE"."SS_DELEGATE_PK1" ON "SELFSERVICE"."SS_DELEGATE" ("EMPNO","MNGR");
---------------------------
--New INDEX
--SS_ABSENT_DETAIL_INDEX1
---------------------------
  CREATE INDEX "SELFSERVICE"."SS_ABSENT_DETAIL_INDEX1" ON "SELFSERVICE"."SS_ABSENT_DETAIL" ("KEY_ID","ABSENT_YYYYMM","PAYSLIP_YYYYMM","EMPNO");
---------------------------
--Changed TRIGGER
--SS_TRIG_DEPU_DELETED
---------------------------
  CREATE OR REPLACE TRIGGER "SELFSERVICE"."SS_TRIG_DEPU_DELETED"
  BEFORE DELETE ON "SELFSERVICE"."SS_DEPU"
  REFERENCING FOR EACH ROW
  Begin
    If (nvl(:old.hod_apprl, 0) != ss.disapproved And nvl(:old.hrd_apprl, 0) != ss.disapproved And nvl(:old.lead_apprl, 0) !=
            ss.disapproved)
    Then

        Insert Into ss_depu_deleted (
            empno,
            app_no,
            bdate,
            edate,
            description,
            type,
            hod_apprl,
            hod_apprl_dt,
            hod_code,
            hrd_apprl,
            hrd_apprl_dt,
            hrd_code,
            app_date,
            reason,
            user_tcp_ip,
            hod_tcp_ip,
            hrd_tcp_ip,
            hodreason,
            hrdreason,
            chg_no,
            chg_date,
            lead_apprl,
            lead_apprl_dt,
            lead_code,
            lead_tcp_ip,
            lead_reason,
            lead_apprl_empno,
            chg_by,
            site_code,
            deleted_on
        )
        Values(
            :old.empno,
            :old.app_no,
            :old.bdate,
            :old.edate,
            :old.description,
            :old.type,
            :old.hod_apprl,
            :old.hod_apprl_dt,
            :old.hod_code,
            :old.hrd_apprl,
            :old.hrd_apprl_dt,
            :old.hrd_code,
            :old.app_date,
            :old.reason,
            :old.user_tcp_ip,
            :old.hod_tcp_ip,
            :old.hrd_tcp_ip,
            :old.hodreason,
            :old.hrdreason,
            :old.chg_no,
            :old.chg_date,
            :old.lead_apprl,
            :old.lead_apprl_dt,
            :old.lead_code,
            :old.lead_tcp_ip,
            :old.lead_reason,
            :old.lead_apprl_empno,
            :old.chg_by,
            :old.site_code,
            sysdate);
    End If;
End;
/
---------------------------
--Changed PROCEDURE
--CHANGE_PASSWORD
---------------------------
CREATE OR REPLACE PROCEDURE "SELFSERVICE"."CHANGE_PASSWORD" (
    param_empno      In    Varchar2,
    param_cur_pwd    In    Varchar2,
    param_new_pwd1   In    Varchar2,
    param_new_pwd2   In    Varchar2,
    param_success    Out   Varchar2,
    param_message    Out   Varchar2
) As
    v_count   Number;
    v_empno   Varchar2(5);
Begin
    v_empno         := upper(lpad(trim(param_empno), 5,'0'));
    
    Select
        Count(*)
    Into v_count
    From
        ss_emplmast
    Where
        empno = v_empno And status=1;

    If v_count = 0 Then
        param_success   := 'KO';
        param_message   := 'Error :- Incorrect Empno . Password not changed.';
        return;
    End If;
    
    If length(param_new_pwd1) Not Between 1 And 10 Then
        param_success   := 'KO';
        param_message   := 'Error :- Password length should be greater than "7" and less then "10"';
        return;
    End If;

    If length(param_new_pwd1) Not Between 1 And 10 Then
        param_success   := 'KO';
        param_message   := 'Error :- Password length should be greater than "0" and less then "10"';
        return;
    End If;

    If param_new_pwd1 <> param_new_pwd2 Then
        param_success   := 'KO';
        param_message   := 'Error :- New Password and Confirm Password do not match.';
        return;
    End If;

    Update ss_emplmast
    Set
        password = Trim(param_new_pwd1),
        Pwd_Chgd = 1
    Where
        empno = v_empno;

    Commit;
    param_success   := 'OK';
    param_message   := 'Password changed successfully.';
Exception
    When Others Then
        param_success   := 'KO';
        param_message   := 'Error :- ' || sqlcode || ' - ' || sqlerrm;
End change_password;
/
---------------------------
--New PACKAGE
--TASK_SCHEDULER
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."TASK_SCHEDULER" As

    Procedure sp_daily_swp_add_nu_joinees;

    Procedure sp_daily_swp_config_week;

    Procedure sp_daily_swp_sendmail;

End task_scheduler;
/
---------------------------
--Changed PACKAGE
--SWP_VACCINEDATE
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."SWP_VACCINEDATE" As

    Procedure add_new(
        param_win_uid      Varchar2,
        param_vaccine_type Varchar2,
        param_first_jab    Date,
        param_second_jab   Date,
        param_success Out  Varchar2,
        param_message Out  Varchar2
    );

    Procedure add_emp_vaccine_dates(
        param_win_uid         Varchar2,
        param_vaccine_type    Varchar2,
        param_for_empno       Varchar2,
        param_first_jab_date  Date,
        param_second_jab_date Date Default Null,
        param_booster_jab_date Date Default Null,
        param_success Out     Varchar2,
        param_message Out     Varchar2
    );

    Procedure update_second_jab(
        param_win_uid     Varchar2,
        param_second_jab  Date,
        param_success Out Varchar2,
        param_message Out Varchar2
    );

    Procedure delete_emp_vaccine_dates(
        param_empno       Varchar2,
        param_hr_win_uid  Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    );

    Procedure update_vaccine_type(
        param_win_uid      Varchar2,
        param_vaccine_type Varchar2,
        param_second_jab   Date,
        param_success Out  Varchar2,
        param_message Out  Varchar2
    );

    Procedure update_emp_second_jab(
        param_win_uid         Varchar2,
        param_for_empno       Varchar2,
        param_second_jab_date Date,
        param_success Out     Varchar2,
        param_message Out     Varchar2
    );
    Procedure update_emp_jab(
        param_win_uid          Varchar2,
        param_for_empno        Varchar2,
        param_second_jab_date  Date,
        param_booster_jab_date Date,
        param_success Out      Varchar2,
        param_message Out      Varchar2
    );

    Procedure update_self_jab(
        param_win_uid          Varchar2,

        param_second_jab_date  Date,
        param_booster_jab_date Date,
        param_success Out      Varchar2,
        param_message Out      Varchar2
    );
End swp_vaccinedate;
/
---------------------------
--Changed PACKAGE
--SS_MAIL
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."SS_MAIL" As
    c_smtp_mail_server Constant Varchar2(60) := 'ticbexhcn1.ticb.comp';
    c_sender_mail_id Constant Varchar2(60) := 'selfservice@tecnimont.in';
    c_web_server Constant Varchar2(60) := 'http://tplapps02.ticb.comp:80';
    c_empno Constant Varchar2(10) := '&EmpNo&';
    c_app_no Constant Varchar2(10) := '&App_No&';
    c_emp_name Constant Varchar2(10) := '&Emp_Name&';
    c_leave_period Constant Varchar2(20) := '&Leave_Period&';
    c_approval_url Constant Varchar2(20) := '!@ApprovalUrl@!';
    c_msg_type_new_leave_app Constant Number := 1;

    --c_leave_app_msg constant varchar2(2000) := ' Test ';

    c_leave_app_msg Constant Varchar2(2000) := 'There is a Leave application of  ' || c_empno || '  -  ' || c_emp_name ||
        '  for ' || c_leave_period || ' Days.' || chr(13) || chr(10) ||
        'For necessary action, please navigate to ' || chr(13) || chr(10) || c_approval_url || ' .'
        || chr(13) || chr(10) ||
        chr(13) || chr(10) || chr(13) || chr(10) ||
        'Note : This is a system generated message.'
        || chr(13) || chr(10)
        || 'Please do not reply to this message';

    c_leave_app_subject Constant Varchar2(1000) := 'Leave application of ' || c_empno || ' - ' || c_emp_name;

    pkg_var_msg Varchar2(1000);
    pkg_var_sub Varchar2(200);

    Procedure send_mail_2_user_nu(
        param_to_mail_id In Varchar2,
        param_subject    In Varchar2,
        param_body       In Varchar2
    );
    Procedure send_mail(
        param_to_mail_id  Varchar2,
        param_subject     Varchar2,
        param_body        Varchar2,
        param_success Out Number,
        param_message Out Varchar2
    );

    Procedure send_msg_new_leave_app(
        param_app_no      Varchar2,
        param_success Out Number,
        param_message Out Varchar2
    );

    Procedure send_test_email_2_user(
        param_to_mail_id In Varchar2
    );

    Procedure send_html_mail(
        param_to_mail_id  Varchar2,
        param_subject     Varchar2,
        param_body        Varchar2,
        param_success Out Number,
        param_message Out Varchar2
    );
    Procedure send_email_2_user_async(
        param_to_mail_id In Varchar2
    );

    c_leave_rejected_body Varchar2(4000) := '
            <p>Your leave application has been rejected.</p>
            <p>Following are the details</p>
            <table style="border-collapse: collapse;" border="1">
            <tbody>
            <tr>
            <td>Application Id</td>
            <td><strong>@app_id</strong></td>
            <td><strong>_____</strong></td>
            <td>Date</td>
            <td><strong>@app_date</strong></td>
            </tr>
            <tr>
            <td>Leave Start Date</td>
            <td><strong>@start_date</strong></td>
            <td></td>
            <td>Leave end date</td>
            <td><strong>@end_date</strong></td>
            </tr>
            <tr>
            <td>Leave period</td>
            <td><strong>@leave_period</strong></td>
            <td></td>
            <td>Leave type</td>
            <td><strong>@leave_type</strong></td>
            </tr>
            <tr>
            <td>Lead approval</td>
            <td><strong>@lead_approval</strong></td>
            <td></td>
            <td>Lead remarks</td>
            <td><strong>@lead_remarks</strong></td>
            </tr>
            <tr>
            <td>HoD approval</td>
            <td><strong>@hod_approval</strong></td>
            <td></td>
            <td>HoD remarks</td>
            <td><strong>@hod_remarks</strong></td>
            </tr>
            <tr>
            <td>HR approval</td>
            <td><strong>@hrd_approval</strong></td>
            <td></td>
            <td>HR remarks</td>
            <td><strong>@hrd_remarks</strong></td>
            </tr>
            </tbody>
            </table>
            <p>Note - This is a system generated message.</p>
            <p>Please do not reply to this message</p>    
    ';
    Procedure send_mail_leave_rejected(
        p_app_id Varchar2
    );

    Procedure send_mail_leave_reject_async(
        p_app_id In Varchar2
    );

End ss_mail;
/
---------------------------
--New PACKAGE
--PKG_SYSTEMGRANTS
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."PKG_SYSTEMGRANTS" As

    Procedure sp_health_systemgrants(
        param_msg_type Out Varchar2,
        param_msgtext  Out Varchar2
    );

    Procedure sp_system_grants_selfservice;
End pkg_systemgrants;
/
---------------------------
--Changed PACKAGE
--PKG_ABSENT_TS
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."PKG_ABSENT_TS" As
    Procedure generate_nu_list_4_all_emp (
        param_absent_yyyymm    Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );

    Procedure pop_timesheet_leave_data (
        param_yyyymm    Varchar2,
        param_success   Out             Varchar2,
        param_message   Out             Varchar2
    );

    Procedure update_no_mail_list (
        param_absent_yyyymm        Varchar2,
        param_payslip_yyyymm       Varchar2,
        param_emp_list_4_no_mail   Varchar2,
        param_requester            Varchar2,
        param_success              Out                        Varchar2,
        param_message              Out                        Varchar2
    );

    Function get_lop (
        param_empno Varchar2,
        param_pdate Date
    ) Return Number;

    Procedure regenerate_list_4_one_emp (
        param_absent_yyyymm    Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_empno            Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );

    Procedure set_lop_4_emp (
        param_empno            Varchar2,
        param_absent_yyyymm    Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_lop_val          Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );

    Procedure reset_emp_lop (
        param_absent_yyyymm    Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_empno            Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );

    Procedure delete_user_lop (
        param_empno            Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_absent_yyyymm    Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );

    Function is_emp_absent (
        param_empno   In            Varchar2,
        param_date    In            Date
    ) Return Number;

    Procedure refresh_absent_list (
        param_absent_yyyymm    Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );

    Procedure reverse_lop_4_emp (
        param_empno            Varchar2,
        param_payslip_yyyymm   Varchar2,
        param_lop_val          Varchar2,
        param_requester        Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    );


    Procedure send_absent_email(
        p_payslip_yyyymm Varchar2,
        p_absent_yyyymm  Varchar2,
        p_success Out    Varchar2,
        p_message Out    Varchar2
    ) ;

    c_absent_mail_sub Varchar2(100) := 'SELFSERVICE : Leave Applications / on duty applications are pending for the month of !@MONTH@!';

    c_absent_mail_body varchar2(2000) := '<div>
<p>Please check your TimeSheet for the month of <strong><span style=''background-color: #ffff00;''>!@MONTH@!</span> </strong>and submit your <span style=''background-color: #ffff00;''><strong>Leave / On duty /on Deputation application/s </strong></span>which have not yet been submitted.</p>
<p>You are requested to do the needful at the earliest.</p>
<p>This mail has been generated based upon your LEAVE HOURS booked in TimeSheet for the month of <strong><span style=''background-color: #ffff00;''>!@MONTH@!</span> </strong></p>
<p><strong>For any queries please email at <a href=''mailto:A.Kotian@tecnimont.in''>A.Kotian@tecnimont.in</a></strong></p>
<p><strong>Or call on Teams</strong></p>
<div>
<p>Regards,</p>
<p> </p>
<p><strong>A. B. Kotian</strong></p>
<p><strong>HR Dept</strong></p>
<p>Tecnimont Private Limited</p>
<p>(Formerly Tecnimont ICB Pvt Ltd)</p>
<p>Tecnimont House, Chincholi Bunder, 504, Link Road, Malad (W),</p>
<p>Mumbai 400064 - India</p>
<p>P +91 22 6694 5631 - F +91 22 6694 5599</p>
<p><a href=''mailto:a.kotian@tecnimont.in''>a.kotian@tecnimont.in</a></p>
</div>
</div>';

End pkg_absent_ts;
/
---------------------------
--Changed PACKAGE
--PKG_ABSENT
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."PKG_ABSENT" As

    --TYPE RECORD for pending applications
    Type typ_rec_pending_app Is Record(empno Varchar2(5),
            emp_name                         Varchar2(100),
            parent                           Varchar2(4),
            app_no                           Varchar2(30),
            bdate                            Date,
            edate                            Date,
            app_type                         Varchar2(2),
            hrd_apprl_txt                    Varchar2(10),
            hod_apprl_txt                    Varchar2(10),
            lead_apprl_txt                   Varchar2(10));

    --TYPE TABLE for pending applications
    Type typ_tab_pending_app Is
        Table Of typ_rec_pending_app;

    --FUNCTION to return all pending applications    
    Function get_pending_app_4_month(
        param_yyyymm Varchar2
    ) Return typ_tab_pending_app
        Pipelined;

    /* TODO enter package declarations (types, exceptions, methods etc) here */

    Procedure generate_nu_list_4_all_emp(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );

    Procedure regenerate_list_4_one_emp(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );

    Procedure reset_emp_lop(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );

    Function is_emp_absent(
        param_empno      In Varchar2,
        param_date       In Date,
        param_shift_code In Varchar2,
        param_doj        In Date
    ) Return Varchar2;

    Procedure set_lop_4_emp(
        param_empno          Varchar2,
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_lop_val        Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );

    Function get_lop(
        param_empno Varchar2,
        param_pdate Date
    ) Return Number;

    Function get_payslip_month Return Varchar2;

    Procedure update_no_mail_list(
        param_absent_yyyymm       Varchar2,
        param_payslip_yyyymm      Varchar2,
        param_emp_list_4_no_mail  Varchar2,
        param_emp_list_4_yes_mail Varchar2,
        param_requester           Varchar2,
        param_success Out         Varchar2,
        param_message Out         Varchar2
    );

    Procedure edit_payslip_period(
        param_period      Varchar2,
        param_open        Varchar2,
        param_by_win_uid  Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    );

    Procedure add_payslip_period(
        param_period      Varchar2,
        param_open        Varchar2,
        param_by_win_uid  Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    );

    Procedure refresh_absent_list(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );

    Procedure reverse_lop_4_emp(
        param_empno          Varchar2,
        param_payslip_yyyymm Varchar2,
        param_lop_val        Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );

    Procedure delete_user_lop(
        param_empno          Varchar2,
        param_payslip_yyyymm Varchar2,
        param_absent_yyyymm  Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    );
    Function get_emp_absent_update_date(
        param_empno                Varchar2,
        param_period_keyid         Varchar2,
        param_absent_list_gen_date Date
    ) Return Date;

    Procedure send_absent_email(
        p_payslip_yyyymm Varchar2,
        p_absent_yyyymm  Varchar2,
        p_success Out    Varchar2,
        p_message Out    Varchar2
    );

    Procedure send_hod_approval_pending_mail(
        p_success Out    Varchar2,
        p_message Out    Varchar2
    );

    Procedure send_leadapproval_pending_mail(
        p_success Out    Varchar2,
        p_message Out    Varchar2
    );

    c_absent_mail_body Varchar2(2000) := '
<p>Please check your attendance in SelfService for the month of   <span style=''background-color: #ffff00;''><strong>!@MONTH@!</strong></span>and submit your <span style=''background-color: #ffff00;''><strong>Leave / On duty /on Deputation application/s </strong></span>which have not yet been submitted.</p>
<p>You are requested to do the needful at the earliest.</p>
<p> </p>
<p>This mail has been generated based upon your absentism for the month of <span style=''background-color: #ffff00;''><strong>!@MONTH@!</strong></span></p>
<p><strong>For any queries please email at <a href=''mailto:A.Kotian@tecnimont.in''>A.Kotian@tecnimont.in</a></strong></p>
<p><strong>Or call on Teams</strong></p>
<p> </p>
<p>Regards,</p>
<p><span style=''color: #000000;''><strong>A. B. Kotian</strong></span></p>
<p><strong>HR Dept</strong></p>
<p>Tecnimont Private Limited</p>
<p>(Formerly Tecnimont ICB Pvt Ltd)</p>';

    c_absent_mail_sub Varchar2(100) := 'SELFSERVICE : Leave Applications / on duty applications are pending for the month of !@MONTH@!';

    c_pending_approval_sub Varchar2(100) := 'Applications pending for your approval in Self-Service.';

    c_pending_approval_body Varchar2(1000) := '<div>
<p>Please approve any of the following applications pending for your approval in Self-Service</p>
<ul type=''disc''>
<li>Leave application</li>
<li>On duty Application</li>
<li>Extra Hrs / Compensatory offs Claim</li>
</ul>
<p>This mail has been generated based upon applications pending for your approval in SelfService</p>
<p>Regards,</p>
<p><strong>A. B. Kotian</strong></p>
<p><strong>HR Dept</strong></p>
<p>Tecnimont Private Limited</p>
<p>(Formerly Tecnimont ICB Pvt Ltd)</p>
<p>Tecnimont House, Chincholi Bunder, 504, Link Road, Malad (W),</p>
<p>Mumbai 400064 - India</p>
<p>P +91 22 6694 5631 - F +91 22 6694 5599</p>
<p><a href=''mailto:a.kotian@tecnimont.in''>a.kotian@tecnimont.in</a></p>
</div>';

End pkg_absent;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_SMART_WORKSPACE_QRY
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_SMART_WORKSPACE_QRY" As

    c_qry_attendance_planning Varchar2(6000) := ' 
With
    params As (
        Select
            :p_person_id   As p_person_id,
            :p_meta_id     As p_meta_id,
            :p_row_number  As p_row_number,
            :p_page_length As p_page_length,
            
            :p_start_date  As p_start_date,
            :p_end_date    As p_end_date,
            :p_assign_code    As p_assign_code,
            :p_assign_csv     As p_assign_csv,
            :p_emptype_csv    As p_emptype_csv,
            :p_grades_csv     As p_grades_csv,
            :p_generic_search As p_generic_search,
            :p_desk_assignment_status as p_desk_assignment_status
        From
            dual
    ),
    attend_plan As (
        Select
            empno, attendance_date,deskid
        From
            swp_smart_attendance_plan
        Where
            attendance_date In (
                Select
                    d_date
                From
                    ss_days_details, params
                Where
                    d_date Between params.p_start_date And params.p_end_date
            )
            And empno In (
                Select
                    empno
                From
                    ss_emplmast                  ce, 
					params 
                Where
                    status = 1
                    !CE_ASSIGN!
            )
    )
Select
    full_data.*
From
    (
        Select
            data.*,
            Row_Number() Over(Order By empno) As row_number,
            Count(*) Over()                   As total_row
        From (
        select * from (

                    Select
                        e.empno                          As empno,
                        e.empno || '' - '' || e.name       As employee_name,
                        e.parent                         As parent,
                        e.grade                          As emp_grade,
                        iot_swp_common.get_emp_work_area(params.p_person_id,params.p_meta_id,e.empno) As work_area,
                        e.emptype                        As emptype,
                        e.assign                         As assign,
                        iot_swp_common.fn_get_dept_group(e.assign)             As assign_dept_group,
                        !PIVOT_COL!
                        to_char(a.attendance_date, ''yyyymmdd'') As d_days
                    From
                        ss_emplmast  e,
                        attend_plan  a,
                        
                        params
                    Where
                        e.empno In (
                            select empno from (
                                Select
                                    *
                                From
                                    swp_primary_workspace m
                                Where
                                    start_date =
                                    (
                                        Select
                                            Max(start_date)
                                        From
                                            swp_primary_workspace c,params
                                        Where
                                            c.empno = m.empno
                                            And start_date <= params.p_end_date
                                    )) where primary_workspace=2
                        )
                        !E_ASSIGN!
                        And e.status = 1
                        And e.empno  = a.empno(+)                
                            !DESK_ASSIGNMENT_STATUS!
                            !GENERIC_SEARCH!            
                            And e.emptype In (
                            !EMPTYPE_SUBQUERY!
                    )
                            !GRADES_SUBQUERY!

                    ) 
                    
                    
                    Pivot
                    (
                    !PIVOT_FOR!
                    For d_days In (!MON! As mon, !TUE! As tue, !WED! As wed, !THU! As thu,
                    !FRI! As fri)
                    )

            ) data
    ) full_data, params
Where
    row_number Between (nvl(params.p_row_number, 0) + 1) And (nvl(params.p_row_number, 0) + params.p_page_length)';

    where_clause_generic_search Varchar2(200) := ' and (e.name like params.p_generic_search or e.empno like params.p_generic_search ) ';
    where_clause_e_assign_code Varchar2(100) := ' And e.assign = params.p_assign_code ';
    where_clause_ce_assign_code Varchar2(100) := ' And ce.assign = params.p_assign_code ';

    sub_qry_ce_assign_csv Varchar2(400) := ' And ce.assign in (
                    Select
                        regexp_substr(params.p_assign_csv, ''[^,]+'', 1, level) assign
                    From
                        dual
                    Connect By
                        level <=
                        length(params.p_assign_csv) - length(replace(params.p_assign_csv, '','')) + 1
                )';

    sub_qry_e_assign_csv Varchar2(400) := ' And e.assign in (
                    Select
                        regexp_substr(params.p_assign_csv, ''[^,]+'', 1, level) assign
                    From
                        dual
                    Connect By
                        level <=
                        length(params.p_assign_csv) - length(replace(params.p_assign_csv, '','')) + 1
                )';

    sub_qry_emptype_default Varchar2(200) := ' 
Select
    emptype
From
    swp_include_emptype
';

    sub_qry_emptype_csv Varchar2(400) := ' 
Select
    regexp_substr(params.p_emptype_csv, ''[^,]+'', 1, level) emptype
From
    dual
Connect By
    level <=
    length(params.p_emptype_csv) - length(replace(params.p_emptype_csv, '','')) + 1
';

    sub_qry_grades_csv Varchar2(400) := ' and e.grade in (
Select
    regexp_substr(params.p_grades_csv, ''[^,]+'', 1, level) grade
From
    dual
Connect By
    level <=
    length(params.p_grades_csv) - length(replace(params.p_grades_csv, '','')) + 1 )
';

    sub_desk_pivot Varchar2(100) := ' max(deskid)  ';
    sub_days_pivot Varchar2(100) := ' Count(*) ';
    pivot_desk varchar2(100) := ' a.deskid as deskid, ';
    pivot_plan varchar2(100) := ' case when a.empno is null then 0 else 1 end planned, ';


    Cursor cur_general_area_list(p_office      Varchar2,
                                 p_floor       Varchar2,
                                 p_wing        Varchar2,
                                 p_row_number  Number,
                                 p_page_length Number) Is

        Select
            *
        From
            (
                Select
                Distinct a.office,
                    a.floor,
                    a.wing,
                    a.work_area,
                    a.area_desc,
                    a.area_catg_code,
                    a.total,
                    a.occupied,
                    a.available,
                    Row_Number() Over (Order By office Desc) As row_number,
                    Count(*) Over ()                         As total_row
                From
                    swp_vu_area_list a
                Where
                    a.area_catg_code = 'A002'
                Order By a.area_desc, a.office, a.floor
            )
        Where
            row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

    Cursor cur_restricted_area_list(p_date        Date,
                                    p_office      Varchar2,
                                    p_floor       Varchar2,
                                    p_wing        Varchar2,
                                    p_row_number  Number,
                                    p_page_length Number) Is

        Select
            *
        From
            (
                Select
                Distinct a.office,
                    a.floor,
                    a.wing,
                    a.work_area,
                    a.area_desc,
                    a.area_catg_code,
                    a.total,
                    a.occupied,
                    a.available,
                    Row_Number() Over (Order By office Desc) As row_number,
                    Count(*) Over ()                         As total_row
                From
                    swp_vu_area_list a
                Where
                    a.area_catg_code = 'A003'
                Order By a.area_desc, a.office, a.floor

            )
        Where
            row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

    Type typ_area_list Is Table Of cur_general_area_list%rowtype;

    Function fn_reserved_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;

    Function fn_general_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2 Default Null,
        p_date        Date     Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;
    Function fn_general_area_restrictedlist(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2 Default Null,
        p_date        Date     Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;

    Function fn_work_area_desk(
        p_person_id     Varchar2,
        p_meta_id       Varchar2,

        p_date          Date,
        p_work_area     Varchar2,
        p_area_category Varchar2 Default Null,
        p_office        Varchar2 Default Null,
        p_floor         Varchar2 Default Null,
        p_wing          Varchar2 Default Null,

        p_row_number    Number,
        p_page_length   Number
    ) Return Sys_Refcursor;

    Function fn_restricted_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return typ_area_list
        Pipelined;

    Function fn_emp_week_attend_planning(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2,
        p_date      Date
    ) Return Sys_Refcursor;

    Function fn_week_attend_planning(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,
        p_date                   Date     Default sysdate,

        p_assign_code            Varchar2 Default Null,

        p_emptype_csv            Varchar2 Default Null,
        p_grade_csv              Varchar2 Default Null,
        p_generic_search         Varchar2 Default Null,
        p_desk_assignment_status Varchar2 Default Null,
        p_desk_pivot             Number   Default 0,

        p_row_number             Number,
        p_page_length            Number
    ) Return Sys_Refcursor;

    Function fn_current_planning_xl(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_assign_code Varchar2 Default Null
    ) Return Sys_Refcursor;

    Function fn_future_planning_xl(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_assign_code Varchar2 Default Null
    ) Return Sys_Refcursor;

    Function fn_week_attend_planning_all(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,
        p_date                   Date     Default sysdate,

        p_assign_csv             Varchar2 Default Null,

        p_emptype_csv            Varchar2 Default Null,
        p_grade_csv              Varchar2 Default Null,
        p_generic_search         Varchar2 Default Null,
        p_desk_assignment_status Varchar2 Default Null,
        p_desk_pivot             Number   Default 0,

        p_row_number             Number,
        p_page_length            Number
    ) Return Sys_Refcursor;

    Function fn_all_current_planning_xl(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_date      Date

    ) Return Sys_Refcursor;

End iot_swp_smart_workspace_qry;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_SMART_WORKSPACE
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_SMART_WORKSPACE" As
    Type typ_tab_string Is Table Of Varchar(4000) Index By Binary_Integer;
    c_office_workspace Constant Number := 1;
    c_smart_workspace Constant Number := 2;
    c_not_in_mum_office Constant Number := 3;

    Procedure sp_add_weekly_atnd(
        p_person_id         Varchar2,
        p_meta_id           Varchar2,

        p_weekly_attendance typ_tab_string,
        p_empno             Varchar2,
        p_message_type Out  Varchar2,
        p_message_text Out  Varchar2
    );

    Procedure sp_smart_ws_weekly_summary(
        p_person_id                     Varchar2,
        p_meta_id                       Varchar2,

        p_assign_code                   Varchar2,
        p_date                          Date,

        p_emp_count_smart_workspace Out Number,
        p_emp_count_mon             Out Number,
        p_emp_count_tue             Out Number,
        p_emp_count_wed             Out Number,
        p_emp_count_thu             Out Number,
        p_emp_count_fri             Out Number,
        p_costcode_desc             Out Varchar2,
        p_message_type              Out Varchar2,
        p_message_text              Out Varchar2
    );

    Procedure sp_sys_assign_sws_desk(
        p_empno            Varchar2,
        p_attendance_date  Date,
        p_deskid           Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    );
End iot_swp_smart_workspace;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_SELECT_LIST_QRY
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_SELECT_LIST_QRY" As

    Function fn_desk_list_for_smart(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_date      Date,
        p_empno     Varchar2
    ) Return Sys_Refcursor;

    Function fn_desk_list_for_office(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_date      Date Default Null,
        p_empno     Varchar2
    ) Return Sys_Refcursor;

    Function fn_employee_list_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_emp_list4plan_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_costcode_list_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_dept_list4plan_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_employee_type_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_grade_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_project_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_costcode_list_4_admin(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_emp_list4desk_plan(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_emp_list4wp_details(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

    Function fn_swp_type_list(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,
        p_exclude_sws_type Varchar2 Default Null
    ) Return Sys_Refcursor;

   Function fn_emp_list_4_admin(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor;

End iot_swp_select_list_qry;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_PRIMARY_WORKSPACE_QRY
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_PRIMARY_WORKSPACE_QRY" As

    Function fn_emp_primary_ws_list(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,

        p_assign_code           Varchar2 Default Null,
        p_start_date            Date     Default Null,

        p_empno                 Varchar2 Default Null,

        p_emptype_csv           Varchar2 Default Null,
        p_grade_csv             Varchar2 Default Null,
        p_primary_workspace_csv Varchar2 Default Null,
        p_laptop_user           Varchar2 Default Null,
        p_eligible_for_swp      Varchar2 Default Null,
        p_generic_search        Varchar2 Default Null,

        p_is_admin_call         Boolean  Default false,

        p_row_number            Number,
        p_page_length           Number
    ) Return Sys_Refcursor;

    --**--
    /*
    Function fn_emp_primary_ws_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_assign_code Varchar2 Default Null,
        p_start_date  Date     Default Null,

        p_empno       Varchar2 Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;
    */

    Function fn_emp_primary_ws_plan_list(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,

        p_assign_code           Varchar2 Default Null,

        p_empno                 Varchar2 Default Null,

        p_emptype_csv           Varchar2 Default Null,
        p_grade_csv             Varchar2 Default Null,
        p_primary_workspace_csv Varchar2 Default Null,
        p_laptop_user           Varchar2 Default Null,
        p_eligible_for_swp      Varchar2 Default Null,
        p_generic_search        Varchar2 Default Null,

        p_row_number            Number,
        p_page_length           Number
    ) Return Sys_Refcursor;

    Function fn_emp_pws_excel(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_assign_codes_csv Varchar2 Default Null,
        p_start_date       Date Default Null
    ) Return Sys_Refcursor;

    Function fn_emp_pws_plan_excel(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_assign_codes_csv Varchar2 Default Null
    ) Return Sys_Refcursor;

    Function fn_emp_pws_admin_list(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,

        p_assign_code           Varchar2 Default Null,
        p_start_date            Date     Default Null,

        p_empno                 Varchar2 Default Null,

        p_emptype_csv           Varchar2 Default Null,
        p_grade_csv             Varchar2 Default Null,
        p_primary_workspace_csv Varchar2 Default Null,
        p_laptop_user           Varchar2 Default Null,
        p_eligible_for_swp      Varchar2 Default Null,
        p_generic_search        Varchar2 Default Null,

        p_row_number            Number,
        p_page_length           Number
    ) Return Sys_Refcursor;


    query_pws Varchar2(4500) := '
With
    params As
    (
        Select
            :p_friday_date     As p_friday_date,
            :p_row_number      As p_row_number,
            :p_page_length     As p_page_length,
            :p_empno           As p_empno,
            :p_assign_code     As p_assign_code,
            :p_pws_csv         As p_pws_csv,
            :p_grades_csv      As p_grades_csv,
            :p_emptype_csv     As p_emptype_csv,
            :p_swp_eligibility As p_swp_eligibility,
            :p_laptop_user     As p_laptop_user,
            :p_generic_search  As p_generic_search
        From
            dual
    ),
    primary_work_space As(
        Select
            a.empno, a.primary_workspace, a.start_date
        From
            swp_primary_workspace a, params
        Where
            trunc(a.start_date) = (
                Select
                    Max(trunc(start_date))
                From
                    swp_primary_workspace b
                Where
                    b.empno = a.empno
                    And b.start_date <= params.p_friday_date
            )
    )
Select
   data.*
From
    (
        Select
            a.empno                                               As empno,
            a.name                                                As employee_name,
            a.assign,
            a.parent,
            iot_swp_common.fn_get_dept_group(a.assign)             As assign_dept_group,
            a.office,
            a.emptype,
            a.email                                               As email,

            iot_swp_common.get_desk_from_dms(a.empno)             As deskid,
            iot_swp_common.get_emp_work_area(Null, Null, a.empno) As work_area,
            iot_swp_common.is_emp_dualmonitor_user(a.empno)       As is_dual_monitor_user,
            iot_swp_common.is_emp_laptop_user(a.empno)            As is_laptop_user,
            Case iot_swp_common.is_emp_laptop_user(a.empno)
                When 1 Then
                    ''Yes''
                Else
                    ''No''
            End                                                   As is_laptop_user_text,
            a.grade                                               As emp_grade,
            nvl(b.primary_workspace, 0)                           As primary_workspace,
            iot_swp_common.fn_get_pws_text(b.primary_workspace) as primary_workspace_text,
            iot_swp_common.is_emp_eligible_for_swp(a.empno)       As is_swp_eligible,
            Case iot_swp_common.is_emp_eligible_for_swp(a.empno)
                When ''OK'' Then
                    ''Yes''
                Else
                    ''No''
            End                                                   As is_swp_eligible_desc,
            Row_Number() Over(Order By a.name)                    As row_number,
            Count(*) Over()                                       As total_row
        From
            ss_emplmast        a,
            primary_work_space b,
            swp_include_emptype c,
            params
        Where
            a.empno      = b.empno(+)
            !ASSIGN_WHERE_CLAUSE!
            And a.status = 1
            And a.empno  = nvl(params.p_empno, a.empno)
            And a.emptype = c.emptype

            And a.assign Not In (
                Select
                    assign
                From
                    swp_exclude_assign
            )
            !GENERIC_SEARCH!            
            And a.emptype In (
            !EMPTYPE_SUBQUERY!
            )
            !LAPTOP_USER_WHERE_CLAUSE!
            !SWP_ELIGIBLE_WHERE_CLAUSE!
            !GRADES_SUBQUERY!
            !PWS_TYPE_SUBQUERY!
        Order By a.assign, a.name
    ) data, params
Where
    row_number Between (nvl(params.p_row_number, 0) + 1) And (nvl(params.p_row_number, 0) + params.p_page_length)
 ';

    sub_qry_assign_where_clause Varchar2(70) := ' And a.assign = params.p_assign_code ';

    sub_qry_grades_csv Varchar2(400) := ' and a.grade in (
Select
    regexp_substr(params.p_grades_csv, ''[^,]+'', 1, level) grade
From
    dual
Connect By
    level <=
    length(params.p_grades_csv) - length(replace(params.p_grades_csv, '','')) + 1 )
';

    sub_qry_emptype_default Varchar2(200) := ' 
Select
    emptype
From
    swp_include_emptype
';

    sub_qry_emptype_csv Varchar2(400) := ' 
Select
    regexp_substr(params.p_emptype_csv, ''[^,]+'', 1, level) emptype
From
    dual
Connect By
    level <=
    length(params.p_emptype_csv) - length(replace(params.p_emptype_csv, '','')) + 1
';
    sub_qry_pws_csv Varchar2(500) := ' 
and
nvl(b.primary_workspace,0) in ( Select
    regexp_substr(params.p_pws_csv, ''[^,]+'', 1, level) emptype
From
    dual, params
Connect By
    level <=
    length(params.p_pws_csv) - length(replace(params.p_pws_csv, '','')) + 1)';

    where_clause_laptop_user Varchar2(200) := ' and iot_swp_common.is_emp_laptop_user(a.empno) = params.p_laptop_user ';

    where_clause_swp_eligible Varchar2(200) := ' and iot_swp_common.is_emp_eligible_for_swp(a.empno) = params.p_swp_eligibility ';

    where_clause_generic_search Varchar2(200) := ' and (a.name like params.p_generic_search or a.empno like params.p_generic_search ) ';

End iot_swp_primary_workspace_qry;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_PRIMARY_WORKSPACE
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_PRIMARY_WORKSPACE" As

    Type typ_tab_string Is Table Of Varchar(4000) Index By Binary_Integer;
    c_office_workspace constant number := 1;
    c_smart_workspace constant number := 2;
    c_not_in_mum_office constant number := 3;


    Procedure sp_add_office_ws_desk(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_deskid           Varchar2,
        p_empno            Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    );

    Procedure sp_hod_assign_work_space(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_emp_workspace_array typ_tab_string,
        p_message_type Out    Varchar2,
        p_message_text Out    Varchar2
    );

    Procedure sp_hr_assign_work_space(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_emp_workspace_array typ_tab_string,
        p_message_type Out    Varchar2,
        p_message_text Out    Varchar2
    );

    Procedure sp_workspace_summary(
        p_person_id                      Varchar2,
        p_meta_id                        Varchar2,

        p_assign_code                    Varchar2 Default Null,
        p_start_date                     Date     Default Null,

        p_total_emp_count            Out Number,
        p_emp_count_office_workspace Out Number,
        p_emp_count_smart_workspace  Out Number,
        p_emp_count_not_in_ho        Out Number,

        p_emp_perc_office_workspace        Out Number,
        p_emp_perc_smart_workspace        Out Number,

        p_message_type               Out Varchar2,
        p_message_text               Out Varchar2
    );

    Procedure sp_workspace_plan_summary(
        p_person_id                      Varchar2,
        p_meta_id                        Varchar2,

        p_assign_code                    Varchar2 default null,

        p_total_emp_count            Out Number,
        p_emp_count_office_workspace Out Number,
        p_emp_count_smart_workspace  Out Number,
        p_emp_count_not_in_ho        Out Number,

        p_emp_perc_office_workspace       Out Number,
        p_emp_perc_smart_workspace        Out Number,

        p_message_type               Out Varchar2,
        p_message_text               Out Varchar2
    );



End iot_swp_primary_workspace;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_OFFICE_WORKSPACE_QRY
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_OFFICE_WORKSPACE_QRY" As

    c_qry_office_planning Varchar2(4000) := ' 

With
    params As (
        Select
            :p_person_id      As p_person_id,
            :p_meta_id        As p_meta_id,
            :p_row_number     As p_row_number,
            :p_page_length    As p_page_length,

            :p_assign_code    As p_assign_code,
            :p_emptype_csv    As p_emptype_csv,
            :p_grades_csv     As p_grades_csv,
            :p_generic_search As p_generic_search,
            :p_desk_assignment_status as p_desk_assignment_status
        From
            dual
    ),
    last_status As(
        Select
            empno, Max(start_date) start_date
        From
            swp_primary_workspace
        Group By
            empno
    ),
    primary_ws As (
        Select
            pw.*
        From
            swp_primary_workspace pw, last_status
        Where
            pw.empno                 = last_status.empno
            And pw.start_date        = last_status.start_date
            And pw.primary_workspace = 1
    )
Select
    full_data.*
From
    (
        Select
            data.*,
            Row_Number() Over(Order By planned , employee_name) As row_number,
            Count(*) Over()                   As total_row
        From
            (
                Select
                    base_data.*,
                    case when base_data.deskid is null then 0 else 1 end planned
                From
                    (

                        Select
                            e.empno                                                                         As empno,
                            e.name                                                                          As employee_name,
                            e.parent                                                                        As parent,
                            e.grade                                                                         As emp_grade,
                            iot_swp_common.get_emp_work_area(params.p_person_id, params.p_meta_id, e.empno) As work_area,
                            e.emptype                                                                       As emptype,
                            e.assign                                                                        As assign,
                            iot_swp_common.get_swp_planned_desk(e.empno)                                    As deskid
                        From
                            ss_emplmast e,
                            primary_ws  pws,
                            params
                        Where
                            e.status     = 1
                            And e.empno  = pws.empno

                            And e.assign = params.p_assign_code
                            
                            !GENERIC_SEARCH!            
                            And e.emptype In (
                            !EMPTYPE_SUBQUERY!
                            )
                            !GRADES_SUBQUERY!

                    ) base_data, params
                    !DESK_ASSIGNMENT_STATUS!
            ) data
    ) full_data, params
Where
    row_number Between (nvl(params.p_row_number, 0) + 1) And (nvl(params.p_row_number, 0) + params.p_page_length) order by planned, employee_name';

    where_clause_generic_search Varchar2(200) := ' and (e.name like params.p_generic_search or e.empno like params.p_generic_search ) ';

    sub_qry_emptype_default Varchar2(200) := ' 
Select
    emptype
From
    swp_include_emptype
';

    sub_qry_emptype_csv Varchar2(400) := ' 
Select
    regexp_substr(params.p_emptype_csv, ''[^,]+'', 1, level) emptype
From
    dual
Connect By
    level <=
    length(params.p_emptype_csv) - length(replace(params.p_emptype_csv, '','')) + 1
';

    sub_qry_grades_csv Varchar2(400) := ' and e.grade in (
Select
    regexp_substr(params.p_grades_csv, ''[^,]+'', 1, level) grade
From
    dual
Connect By
    level <=
    length(params.p_grades_csv) - length(replace(params.p_grades_csv, '','')) + 1 )
';


    Cursor cur_general_area_list(p_office      Varchar2,
                                 p_floor       Varchar2,
                                 p_wing        Varchar2,
                                 p_row_number  Number,
                                 p_page_length Number) Is

        Select
            *
        From
            (
                Select
                Distinct a.office,
                    a.floor,
                    a.wing,
                    a.work_area,
                    a.area_desc,
                    a.area_catg_code,
                    a.total,
                    a.occupied,
                    a.available,
                    Row_Number() Over (Order By office Desc) As row_number,
                    Count(*) Over ()                         As total_row
                From
                    swp_vu_area_list a
                Where
                    a.area_catg_code = 'A002'
                Order By a.area_desc, a.office, a.floor                 
            /*
             From SWP_VU_AREA_LIST a
              Where a.AREA_CATG_CODE = 'KO'
                And Trim(a.office) = Trim(p_office)
                And Trim(a.floor) = Trim(p_floor)
              Order By a.area_desc, a.office, a.floor
            */
            )
        Where
            row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

    Type typ_area_list Is Table Of cur_general_area_list%rowtype;

    Function fn_office_planning(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,
        p_date                   Date,

        p_assign_code            Varchar2 Default Null,

        p_emptype_csv            Varchar2 Default Null,
        p_grade_csv              Varchar2 Default Null,
        p_generic_search         Varchar2 Default Null,
        p_desk_assignment_status Varchar2 Default Null,

        p_row_number             Number,
        p_page_length            Number
    ) Return Sys_Refcursor;

    Function fn_general_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2 Default Null,
        p_date        Date     Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;

    Function fn_work_area_desk(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_date        Date,
        p_work_area   Varchar2,
        p_office      Varchar2 Default Null,
        p_floor       Varchar2 Default Null,
        p_wing        Varchar2 Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;

End iot_swp_office_workspace_qry;
/
---------------------------
--New PACKAGE
--IOT_SWP_MAIL
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_MAIL" As
    Procedure sp_send_to_ows_absent_emp;

    v_mail_body_ows_absent Varchar2(4000) := '<p>Dear Colleague,</p>
<p> </p>
<p>Your Primary Workspace has been allocated as "Office Workspace" by your HOD.</p>
<p>This implies that you must work from office only.</p>
<p>However, you have not reported to office as the system has not received your ID card swipe yesterday.</p>
<p>You need to apply for leave for the day you do not attend office, or the system will deduct your leave / log an LOP (Loss of Pay), as applicable.</p>';
End;
/
---------------------------
--New PACKAGE
--IOT_SWP_FLAGS
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_FLAGS" As
    Procedure get_all_flags(
        p_person_id                        Varchar2,
        p_meta_id                          Varchar2,

        p_restricted_desks_in_sws_plan Out Varchar2,
        p_open_desks_in_sws_plan       Out Varchar2,

        p_message_type                 Out Varchar2,
        p_message_text                 Out Varchar2
    );

     procedure get_flag_details(
        p_person_id             varchar2,
        p_meta_id               varchar2,

        p_flag_id               varchar2,
        p_flag_code         out varchar2,
        p_flag_desc         out varchar2,
        p_flag_value        out varchar2,
        p_flag_value_number out number,
        p_flag_value_date   out date,

        p_message_type      out varchar2,
        p_message_text      out varchar2

    );

End iot_swp_flags;
/
---------------------------
--New PACKAGE
--IOT_SWP_EXCLUDE_EMP_QRY
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_EXCLUDE_EMP_QRY" as

   function fn_Swp_Exclude_Emp_list(
      p_person_id      varchar2,
      p_meta_id        varchar2,

      p_generic_search varchar2 default null,

      p_start_date     date     default null,
      p_end_date       date     default null,
      P_Is_Active      number   default null,
      p_row_number     number,
      p_page_length    number
   ) return sys_refcursor;

   procedure sp_Swp_Exclude_Emp_details(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_Application_Id   varchar2,

      p_Empno        out varchar2,
      p_Emp_name     out varchar2,
      p_start_date   out varchar2,
      p_end_date     out varchar2,
      p_Reason       out varchar2,
      P_Is_Active    out varchar2,

      p_modified_on  out varchar2,
      p_modified_by  out varchar2,

      p_message_type out varchar2,
      p_message_text out varchar2
   );

end IOT_SWP_EXCLUDE_EMP_QRY;
/
---------------------------
--New PACKAGE
--IOT_SWP_EXCLUDE_EMP
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_EXCLUDE_EMP" as

   procedure sp_add_swp_exclude_emp(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_empno            varchar2,
      p_start_date       date,
      p_end_date         date,
      p_reason           varchar2,

      p_message_type out varchar2,
      p_message_text out varchar2
   );

   procedure sp_update_swp_exclude_emp(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_Application_Id   varchar2,

      p_empno            varchar2,
      p_start_date       date,
      p_end_date         date,
      p_reason           varchar2,
      P_Is_Active        number,

      p_message_type out varchar2,
      p_message_text out varchar2
   );

   procedure sp_delete_swp_exclude_emp(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_application_id   varchar2,

      p_message_type out varchar2,
      p_message_text out varchar2
   );

end IOT_SWP_EXCLUDE_EMP;
/
---------------------------
--New PACKAGE
--IOT_SWP_DMS_REP_QRY
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_DMS_REP_QRY" As

    Function fn_non_sws_emp_athome_4hodsec(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;

    Function fn_non_sws_emp_athome_4admin(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor;

    Function fn_deskallocation_swp(
        p_person_id   Varchar2,
        p_meta_id     Varchar2
    ) Return Sys_Refcursor;

    c_query_non_sws_emp_home Varchar2(6000) := '
With
    params As
    (
        Select
            :p_hod_sec_empno     As p_hod_sec_empno,
            :p_row_number as p_row_number, 
            :p_page_length as p_page_length
        From
            dual
    )
Select
    *
From
    (
        Select
            a.empno                                   As empno,
            a.name                                    As employee_name,
            a.parent                                  As parent,
            a.assign                                  As assign,
            a.emptype                                 As emptype,
            a.grade                                   As emp_grade,
            a.is_swp_eligible                         As is_swp_eligible,
            a.is_laptop_user                          As is_laptop_user,
            a.email                                   As emp_email,
            iot_swp_common.get_desk_from_dms(a.empno) As deskid,
            iot_swp_common.fn_get_emp_pws_planning(a.empno) as primary_workspace,
            a.present_count                           As present_count,
            Row_Number() Over (Order By parent)       As row_number,
            Count(*) Over ()                          As total_row
        From
            (
                Select
                    *
                From
                    (
                        Select
                            empno,
                            name,
                            parent,
                            assign,
                            grade,
                            emptype,
                            is_swp_eligible,
                            is_laptop_user,
                            email,
                            Sum(is_present) present_count
                        From
                            (
                                With
                                    dates As (
                                        Select
                                            d_date
                                        From
                                            (
                                                Select
                                                    dd.*
                                                From
                                                    ss_days_details dd
                                                Where
                                                    dd.d_date Between sysdate - 14 And sysdate
                                                    And dd.d_date Not In (
                                                        Select
                                                            holiday
                                                        From
                                                            ss_holidays
                                                        Where
                                                            holiday Between sysdate - 14 And sysdate
                                                    )
                                                Order By d_date Desc
                                            )
                                        Where
                                            Rownum < 7
                                    )
                                Select
                                    a.*, iot_swp_common.fn_is_present_4_swp(empno, dates.d_date) is_present
                                From
                                    (
                                        Select
                                            *
                                        From
                                            (
                                                Select
                                                    e.empno,
                                                    e.name,
                                                    e.parent,
                                                    e.assign,
                                                    e.grade,
                                                    e.emptype,
                                                    iot_swp_common.is_emp_eligible_for_swp(e.empno) is_swp_eligible,
                                                    iot_swp_common.is_emp_laptop_user(e.empno)      is_laptop_user,
                                                    e.email
                                                From
                                                    ss_emplmast e
                                                Where
                                                    e.status = 1
                                                    !ASSIGN_SUB_QUERY!
                                                    and e.assign not in (Select assign from swp_exclude_assign)
                                            )
                                        Where
                                            (
                                                is_swp_eligible != ''OK''
                                                Or is_laptop_user = 0
                                                Or emptype In (''S'')
                                            )
                                            And emptype Not In (''O'',''A'')
                                    ) a, dates
                            )
                        Group By empno, name, parent,assign, grade, emptype, is_swp_eligible, is_laptop_user, email
                        Order By parent
                    )
                Where
                    present_count < 3
            ) a
    ), params
Where
    row_number Between (nvl(params.p_row_number, 0) + 1) And (nvl(params.p_row_number, 0) + params.p_page_length)';

    c_assign_sub_query Varchar2(500) := '
And e.assign In (
    Select
        parent
    From
        ss_user_dept_rights, params
    Where
        empno = params.p_hod_sec_empno
    Union
    Select
        costcode
    From
        ss_costmast, params
    Where
        hod = params.p_hod_sec_empno
)
';
End iot_swp_dms_rep_qry;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_CONFIG_WEEK
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_CONFIG_WEEK" As

    Type typ_tab_string Is Table Of Varchar(4000) Index By Binary_Integer;

    Procedure sp_configuration;

    Procedure sp_add_new_joinees_to_pws;

    Procedure sp_mail_plan_to_emp;

    v_ows_mail_body Varchar2(1000) := '<p>Dear User,</p><p>You have been assigned <strong>Office</strong> as your 
    primary workspace for the week between <strong>!@StartDate@!</strong> and <strong>!@EndDate@!</strong> .</p><p>
    You will be required to attend office daily between such period.</p><p></p><p>SWP</p>';
/*
    v_sws_mail_body Varchar2(2000) := '<p>Dear User,</p>rn<p>You have been assigned <strong>Smart</strong> as your 
    primary workspace for the week between <strong>!@StartDate@!</strong> and <strong>!@EndDate@!</strong> .</p>rn<p>
    You will be required to attend office on below mentioned days between such period.
    </p>rn<table border="1" style="border-collapse: collapse; width: 75.7746%;" height="56">rn
    <tbody>rn<tr>rn<td>Date</td>rn<td>Day</td>rn<td>DeskId</td>rn<td>Office</td>rn<td>Floor</td>rn<td>Wing</td>rn</tr>rn
    !@WEEKLYPLANNING@!    
	</tbody>rn
    </table>rn<p></p>rn<p></p>rn<p>SWP</p>';
*/
v_sws_mail_body Varchar2(3000) := '<p>Dear Colleague,</p>
<p>This is to inform you that as per our new working arrangement in accordance with the Smart Work Policy sent vide email on 1st June 2021, employees have been allocated a Primary Workspace which can be either an "Office Workspace" or a "Smart Workspace".</p>
<p>You have been assigned <strong>Smart Workspace</strong> as your primary workspace for the week between <strong>!@StartDate@!</strong> and <strong>!@EndDate@!</strong> .</p>
<p>You will be required to attend office on below mentioned day/s between such period.</p>
<p><strong>!@User@!</strong> attendance plan</p>
<table style="border-collapse: collapse; width: 75.7746%;" border="1">
<tbody>
<tr>
<td>Date</td>
<td>Day</td>
<td>DeskId</td>
<td>Office</td>
<td>Floor</td>
<td>Wing</td>
</tr>
!@WEEKLYPLANNING@!
</tbody>
</table>
<p> </p>
<p>The above mentioned desk/s are dynamically allocated. It may not be the same desk as the one occupied by you prior to moving to Smart Workspace.</p>
<p>Please report to the office on the above mentioned date/s only and occupy the corresponding desk only.</p>
<p>You are expected to observe the above schedule strictly.</p>
<p>In case you do not report to office on the above mentioned date/s, you must apply for leave for those date/s or the system will deduct your leave / log an LOP (Loss of Pay), as applicable.</p>
<p>Interchanging of scheduled date/s with other colleagues is not allowed and the employee will be considered as "Absent" for the scheduled date/s in case of such interchange.</p>
<p>If you are required to use monitor and keyboard provided on office desk, you must bring your docking station along with you.</p>
<p>Also carry your headphones along with you.</p>
<p><strong>Special note to Microsoft Surface users : Surface users must also bring DP to mini DP cable provided to them at the time of issue of Laptop, along with the docking station.</strong></p>
<p> </p>
<p><strong><u>Note</u></strong> : Employees on deputation need to fill appropriate form by following the path mentioned below to stop receiving this mailer.</p>
<p>TCMPL Intranet Portal <strong>-></strong> TCMPLApp <strong>-></strong> SelfService <strong>-></strong> On duty <strong>-></strong> On duty application <strong>-></strong> Deput/On Tour <strong>-></strong> On duty type / Deputation</p>
<p>This is an auto-generated mail. Please do not reply to this mail.</p>';

    v_sws_empty_day_row Varchar2(200) := '<tr><td>DATE</td><td>DAY</td><td>DESKID</td><td>OFFICE</td><td>FLOOR</td><td>WING</td></tr>';


End iot_swp_config_week;
/
---------------------------
--Changed PACKAGE
--IOT_SWP_COMMON
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_COMMON" As

    Function fn_get_pws_text(
        p_pws_type_code Number
    ) Return Varchar2;

    Function fn_get_dept_group(
        p_costcode Varchar2
    ) Return Varchar2;

    Function get_emp_work_area(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2
    ) Return Varchar2;

    Function get_emp_work_area_code(
        p_empno Varchar2
    ) Return Varchar2;

    Function get_desk_from_dms(
        p_empno In Varchar2
    ) Return Varchar2;

    Function get_swp_planned_desk(
        p_empno In Varchar2
    ) Return Varchar2;

    Function get_total_desk(
        p_work_area Varchar2,
        p_office    Varchar2,
        p_floor     Varchar2,
        p_wing      Varchar2
    ) Return Number;

    Function get_occupied_desk(
        p_work_area Varchar2,
        p_office    Varchar2,
        p_floor     Varchar2,
        p_wing      Varchar2,
        p_date      Date Default Null
    ) Return Number;

    Function get_monday_date(p_date Date) Return Date;

    Function get_friday_date(p_date Date) Return Date;

    --
    Function is_emp_eligible_for_swp(
        p_empno Varchar2
    ) Return Varchar2;

    --
    Function get_default_costcode_hod_sec(
        p_hod_sec_empno Varchar2,
        p_assign_code   Varchar2 Default Null
    ) Return Varchar2;

    Function get_default_dept4plan_hod_sec(
        p_hod_sec_empno Varchar2,
        p_assign_code   Varchar2 Default Null
    ) Return Varchar2;

    Function get_hod_sec_costcodes_csv(
        p_hod_sec_empno    Varchar2,
        p_assign_codes_csv Varchar2 Default Null
    ) Return Varchar2;

    Function is_emp_laptop_user(
        p_empno Varchar2
    ) Return Number;
    --
    Function csv_to_ary_grades(
        p_grades_csv Varchar2 Default Null
    ) Return Sys_Refcursor;

    Function fn_get_emp_pws(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_is_planning Boolean
    ) Return Number;

    Function fn_get_emp_pws_planning(
        p_empno Varchar2 Default Null
    ) Return Varchar2;

    Function is_desk_in_general_area(p_deskid Varchar2) Return Boolean;

    Function fn_can_do_desk_plan_4_emp(p_empno Varchar2) Return Boolean;

    Function fn_is_present_4_swp(
        p_empno Varchar2,
        p_date  Date
    ) Return Number;

    Function get_emp_is_eligible_4swp(
        p_empno Varchar2 Default Null
    ) Return Varchar2;

    Function is_emp_dualmonitor_user(
        p_empno Varchar2 Default Null
    ) Return Number;

    Function get_emp_projno_desc(
        p_empno Varchar2
    ) Return Varchar2;

    Function fn_get_attendance_status(
        p_empno Varchar2,
        p_date  Date
    ) Return Varchar2;

    -----------------------
    Procedure get_planning_week_details(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,
        p_plan_start_date Out Date,
        p_plan_end_date   Out Date,
        p_curr_start_date Out Date,
        p_curr_end_date   Out Date,
        p_planning_exists Out Varchar2,
        p_pws_open        Out Varchar2,
        p_sws_open        Out Varchar2,
        p_ows_open        Out Varchar2,
        p_message_type    Out Varchar2,
        p_message_text    Out Varchar2

    );

    Procedure sp_primary_workspace(
        p_person_id                   Varchar2,
        p_meta_id                     Varchar2,
        p_empno                       Varchar2 Default Null,

        p_current_workspace_text  Out Varchar2,
        p_current_workspace_val   Out Varchar2,
        p_current_workspace_date  Out Varchar2,

        p_planning_workspace_text Out Varchar2,
        p_planning_workspace_val  Out Varchar2,
        p_planning_workspace_date Out Varchar2,

        p_message_type            Out Varchar2,
        p_message_text            Out Varchar2

    );

    Procedure sp_emp_office_workspace(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2,

        p_office       Out Varchar2,
        p_floor        Out Varchar2,
        p_wing         Out Varchar2,
        p_desk         Out Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    );

    Procedure sp_get_emp_workspace_details(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,
        p_empno                 Varchar2,
        p_current_pws       Out Number,
        p_planning_pws      Out Number,
        p_current_pws_text  Out Varchar2,
        p_planning_pws_text Out Varchar2,
        p_curr_desk_id      Out Varchar2,
        p_curr_office       Out Varchar2,
        p_curr_floor        Out Varchar2,
        p_curr_wing         Out Varchar2,
        p_curr_bay          Out Varchar2,
        p_plan_desk_id      Out Varchar2,
        p_plan_office       Out Varchar2,
        p_plan_floor        Out Varchar2,
        p_plan_wing         Out Varchar2,
        p_plan_bay          Out Varchar2,
        p_message_type      Out Varchar2,
        p_message_text      Out Varchar2
    );

End iot_swp_common;
/
---------------------------
--New PACKAGE
--IOT_SWP_AUTO_ASSIGN_DESK
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_AUTO_ASSIGN_DESK" As
    
    Type typ_rec_pws Is Record(
            empno                Varchar2(5),
            employee_name        Varchar2(30),
            assign               Varchar2(4),
            parent               Varchar2(4),
            office               Varchar2(2),
            emptype              Varchar2(1),
            work_area            Varchar2(60),
            is_laptop_user       Number,
            is_laptop_user_text  Varchar2(3),
            emp_grade            Varchar2(2),
            primary_workspace    Number,
            is_swp_eligible      varchar2(2),
            is_swp_eligible_desc Varchar2(3),
            row_number           Number,
            total_row            Number
        );

    Type typ_rec_sws Is Record(
            empno      Varchar2(5),
            d_day      Varchar2(3),
            d_date     Date,
            planned    Number,
            deskid     Varchar2(7),
            is_holiday Number,
            office     Varchar2(5),
            floor      Varchar2(8),
            wing       Varchar2(5),
            bay        Varchar2(20)
        );    
    Procedure sp_auto_generate_plan;
End;
/
---------------------------
--New PACKAGE
--IOT_SWP_ATTENDANCE_EXCEPTION
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_ATTENDANCE_EXCEPTION" As

    Function fn_admin_ows(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,
        p_date             Date,

        p_row_number       Number,
        p_page_length      Number

    ) Return Sys_Refcursor;

    Function fn_admin_sws(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,

        p_row_number  Number,
        p_page_length Number

    ) Return Sys_Refcursor;

    Function fn_ows(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,
        p_date             Date,

        p_row_number       Number,
        p_page_length      Number

    ) Return Sys_Refcursor;

    Function fn_sws(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,

        p_row_number  Number,
        p_page_length Number

    ) Return Sys_Refcursor;



End;
/
---------------------------
--New PACKAGE
--IOT_SWP_ATTENDANCE
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_SWP_ATTENDANCE" As
    Function fn_sws_attendance(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,

        p_date           Date,

        p_generic_search Varchar2 Default Null,

        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor;

    Function fn_sws_attendance_all(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,

        p_date           Date,

        p_generic_search Varchar2 Default Null,

        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor;

    v_sws_attendance_query Varchar2(4000) := regexp_replace('
With
    params As (
        Select
            :p_date          As p_date,
            :p_hod_sec_empno As p_hod_sec_empno,
            :p_row_number     As p_row_number,
            :p_page_length    As p_page_length
        From
            dual
    ),
    attendance_list As(
        Select
            empno, Count(empno) punch_count
        From
            ss_integratedpunch,
            params
        Where
            pdate = params.p_date
        Group By
            empno
    ),
    sws_emp_list As (
        Select
            a.empno,
            a.attendance_date,
            a.deskid,
            b.punch_count
        From
            swp_smart_attendance_plan a,
            attendance_list           b,
            params
        Where
            attendance_date = params.p_date
            And a.empno     = b.empno(+)
    )
    select * from (
Select
    e.empno,
    e.name employee_name,
    e.parent,
    e.assign,
    e.grade,
    e.emptype,
    d.deskid,
    d.punch_count,
    d.attendance_status,
    Case isldt(params.p_date, e.empno)
        When 0 Then
            ''''
        When 1 Then
            ''Leave''
        When 2 Then
            ''Depu''
        When 3 Then
            ''Tour''
        Else
            ''''
    End leave_tour_depu,
    Row_Number() Over(Order By name) As row_number,
    Count(*) Over()                   As total_row

From
    ss_emplmast e,
    params,
    (
        Select
            se.empno,
            se.attendance_date,
            se.deskid,
            se.punch_count,
            Case
                When se.punch_count > 0 Then
                    ''Present''
                Else
                    ''Absent''
            End attendance_status
        From
            sws_emp_list se,

            ss_emplmast  e
        Where
            se.empno     = e.empno
            And e.status = 1

        Union
        Select
            empno,
            Null               attendance_date,
            Null               deskid,
            punch_count,
            ''OutOfTurnPresent'' attendance_status
        From
            attendance_list
        Where
            empno Not In (
                Select
                    empno
                From
                    swp_smart_attendance_plan, params
                Where
                    attendance_date = params.p_date
            )
            And empno In (
                Select
                    empno
                From
                    swp_primary_workspace smap
                Where
                    primary_workspace = 2

                    And start_date    = (
                           Select
                               Max(trunc(start_date))
                           From
                               swp_primary_workspace b, params
                           Where
                               b.empno = smap.empno
                               And b.start_date <= params.p_date
                       )
            )
    )           d

Where
    e.empno = d.empno
    !ASSIGN_SUBQUERY!
), params
Where
    row_number Between (nvl(params.p_row_number, 0) + 1) And (nvl(params.p_row_number, 0) + params.p_page_length)
Order By
    employee_name    
    ', '[[:space:]]+', chr(32));

    v_sub_query_assign Varchar2(800) := regexp_replace('
And e.assign In
(
    Select
        parent
    From
        ss_user_dept_rights a
    Where
        empno = params.p_hod_sec_empno
    Union
    Select
        costcode
    From
        ss_costmast a
    Where
        hod = params.p_hod_sec_empno
)    ', '[[:space:]]+', chr(32));
End;
/
---------------------------
--Changed PACKAGE
--IOT_PUNCH_DETAILS
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."IOT_PUNCH_DETAILS" As

    Cursor cur_tab Is
        Select
            *
        From
            tab;

    Cursor cur_for_punch_data(cp_empno      Varchar2,
                              cp_start_date Date,
                              cp_end_date   Date) Is
        Select
            typ_row_punch_data(
                empno,
                dd,
                ddd,
                d_date,
                shiftcode,
                wk_of_year,
                first_punch,
                last_punch,
                penaltyhrs,
                is_odd_punch,
                is_ldt,
                is_sunday,
                islwd,
                islcapp,
                issleaveapp,
                is_absent,
                slappcntr,
                ego,
                wrkhrs,
                deltahrs,
                extra_hours,
                comp_off_hrs,
                last_day_cfwd_dhrs,
                Sum(wrkhrs) Over (Partition By wk_of_year),
                Sum(deltahrs) Over (Partition By wk_of_year),
                Sum(extra_hours) Over (Partition By wk_of_year),
                Sum(comp_off_hrs) Over (Partition By wk_of_year),
                Sum(weekday_extra_hours) Over (Partition By wk_of_year),
                Sum(holiday_extra_hours) Over (Partition By wk_of_year),
                wk_bfwd_delta_hrs,
                wk_cfwd_delta_hrs,
                wk_penalty_leave_hrs,
                day_punch_count,
                remarks
            --,
            --str_wrk_hrs,
            --str_delta_hrs,
            --str_extra_hrs,
            --str_ts_work_hrs,
            --str_ts_extra_hrs,
            --str_wk_sum_work_hrs,
            --str_wk_sum_delta_hrs,
            --str_wk_bfwd_delta_hrs,
            --str_wk_cfwd_delta_hrs,
            --str_wk_penalty_leave_hrs
            )
        From
            (
                Select
                    main_main_query.*,
                    n_otperiod_inlcude_2nd_shift(cp_empno, d_date, shiftcode, deltahrs)                       As extra_hours,
                    trunc(n_otperiod_inlcude_2nd_shift(cp_empno, d_date, shiftcode, deltahrs, 1) / 240) * 240 As comp_off_hrs,
                    Case
                        When is_sunday = 0 Then

                            n_otperiod_inlcude_2nd_shift(cp_empno, d_date, shiftcode, deltahrs)
                        Else
                            0
                    End                                                                     As weekday_extra_hours,
                    Case
                        When is_sunday > 0 Then

                            n_otperiod_inlcude_2nd_shift(cp_empno, d_date, shiftcode, deltahrs)
                        Else
                            0
                    End                                                                     As holiday_extra_hours,
                    Case
                        When islwd = 1 Then

                            lastday_cfwd_dhrs1(
                                p_deltahrs  => deltahrs,
                                p_ego       => ego,
                                p_slapp     => issleaveapp,
                                p_slappcntr => slappcntr,
                                p_islwd     => islwd
                            )
                        Else
                            0
                    End                                                                     As last_day_cfwd_dhrs

                From
                    (
                        Select
                            main_query.*,
                            n_deltahrs_include_2nd_shift(cp_empno, d_date, shiftcode, penaltyhrs) As deltahrs,
                            Case
                                When day_punch_count > 1 Then
                                    to_hrs(firstlastpunch1(cp_empno, d_date, 1))
                                Else
                                    ''
                            End                                                 As last_punch
                        From
                            (
                                Select
                                    cp_empno                                                        As empno,
                                    d_dd                                                            As dd,
                                    d_day                                                           As ddd,
                                    wk_of_year,

                                    to_hrs(firstlastpunch1(cp_empno, d_date, 0))                    As first_punch,

                                    penaltyleave1(

                                        latecome1(cp_empno, d_date),
                                        earlygo1(cp_empno, d_date),
                                        islastworkday1(cp_empno, d_date),

                                        Sum(islcomeegoapp(cp_empno, d_date))
                                            Over ( Partition By wk_of_year Order By d_date
                                                Range Between Unbounded Preceding And Current Row),

                                        n_sum_slapp_count(cp_empno, d_date),

                                        islcomeegoapp(cp_empno, d_date),
                                        issleaveapp(cp_empno, d_date)
                                    )                                                               As penaltyhrs,
                                    is_odd_punch(cp_empno, d_date)                                  As is_odd_punch,
                                    to_char(d_date, 'dd-Mon-yyyy')                                  As mdate,
                                    d_dd                                                            As sday,
                                    d_date,
                                    getshift1(cp_empno, d_date)                                     As shiftcode,
                                    isleavedeputour(d_date, cp_empno)                               As is_ldt,
                                    get_holiday(d_date)                                             As is_sunday,
                                    islastworkday1(cp_empno, d_date)                                As islwd,
                                    lc_appcount(cp_empno, d_date)                                   As islcapp,
                                    issleaveapp(cp_empno, d_date)                                   As issleaveapp,
                                    isabsent(cp_empno, d_date)                                      As is_absent,

                                    n_sum_slapp_count(cp_empno, d_date)                             As slappcntr,

                                    earlygo1(cp_empno, d_date)                                      As ego,
                                    N_WORKEDHRS_INCLUDE_2ND_SHIFT(cp_empno, d_date, getshift1(cp_empno, d_date))      As wrkhrs,

                                    0                                                               As wk_bfwd_delta_hrs,
                                    0                                                               As wk_cfwd_delta_hrs,
                                    0                                                               As wk_penalty_leave_hrs,
                                    punchcount(cp_empno, d_date)                                    As day_punch_count,
                                    Null                                                            As remarks,
                                    ''                                                              As str_wrk_hrs,
                                    ''                                                              As str_delta_hrs,
                                    ''                                                              As str_extra_hrs,
                                    ''                                                              As str_wk_sum_work_hrs,
                                    ''                                                              As str_wk_sum_delta_hrs,
                                    ''                                                              As str_wk_bfwd_delta_hrs,
                                    ''                                                              As str_wk_cfwd_delta_hrs,
                                    ''                                                              As str_wk_penalty_leave_hrs,
                                    to_hrs(nvl(get_time_sheet_work_hrs(cp_empno, d_date), 0) * 60)  As str_ts_work_hrs,
                                    to_hrs(nvl(get_time_sheet_extra_hrs(cp_empno, d_date), 0) * 60) As str_ts_extra_hrs
                                --v_max_punch                                              tot_punch_nos

                                From
                                    ss_days_details
                                Where
                                    d_date Between cp_start_date And cp_end_date
                                Order By d_date
                            ) main_query
                    ) main_main_query
            )
        Order By
            d_date;

    Type pls_typ_tab_punch_data Is Table Of cur_for_punch_data%rowtype;
    /*
        Function fn_punch_details_4_self(
            p_person_id Varchar2,
            p_meta_id   Varchar2,
            p_yyyymm    Varchar2
        ) Return Sys_Refcursor;
    */
    Cursor cur_day_punch_list(cp_empno Varchar2,
                              p_pdate  Date) Is
        Select
            cp_empno                                    empno,
            pdate                                       punch_date,
            lpad(hh, 2, '0') || ':' || lpad(mm, 2, '0') punch_time,
            substr(b.office, 4, 1)                      office
        From
            ss_integratedpunch                       a, ss_swipe_mach_mast b
        Where
            empno      = cp_empno
            And a.mach = b.mach_name(+)
            And pdate  = p_pdate
        Order By
            hh,
            mm,
            ss,
            hhsort,
            mmsort,
            hh,
            mm;
    Type typ_tab_day_punch_list Is Table Of cur_day_punch_list%rowtype;

    --

    Function fn_punch_details_4_self(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2 Default Null,
        p_yyyymm    Varchar2,
        p_for_ot    Varchar2 Default 'KO'
    ) Return typ_tab_punch_data
        Pipelined;

    Function fn_day_punch_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2,
        p_date      Date
    ) Return typ_tab_day_punch_list
        Pipelined;

    Procedure punch_details_pipe(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2 Default Null,
        p_yyyymm    Varchar2,
        p_for_ot    Varchar2 Default 'KO'
    );

End iot_punch_details;
/
---------------------------
--Changed PACKAGE
--HEALTH
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."HEALTH" as 
  c_smtp_mail_server constant varchar2(60) := 'ticbexhcn1.ticb.comp';
  c_sender_mail_id constant varchar2(60) := 'selfservice@tecnimont.in';
  c_web_server constant varchar2(60) :=  'http://ticbapps.ticb.comp:80';
  
  procedure send_mail(p_from varchar2, p_to varchar2, p_subject varchar2,
                      p_body varchar2, p_success out number, p_message out varchar2);   
  
  --procedure pending_reminder();
  
  function get_parent(p_empno varchar2) return varchar2;
  function get_healthstatus (p_status number) return varchar2;
  
  function get_slots(p_clinic varchar2, p_location varchar2, p_date varchar2, p_isdeputaion number, p_ischeckup number) return number; 
  function get_bookedslots(p_clinic varchar2, p_date date, p_isdeputaion number) return number; 
  
  function get_clinic_unqid(p_clinic varchar2, p_location varchar2) return varchar2;
  function get_checkup_type(p_isdeputaion number, p_ischeckup number) return varchar2;
  function get_slot_available_list(p_clinic varchar2) return sys_refcursor;
  
  
end health;
/
---------------------------
--New PACKAGE
--ANALYTICAL_REPORTS
---------------------------
CREATE OR REPLACE PACKAGE "SELFSERVICE"."ANALYTICAL_REPORTS" As
    Procedure generate_delta_hours(
        p_start_date Date,
        p_end_date   Date
    );
End analytical_reports;
/
---------------------------
--Changed PACKAGE BODY
--WFH_ATTENDANCE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."WFH_ATTENDANCE" As

    Function check_office_punch_exists (
        param_empno Varchar2
    ) Return Varchar2 As
        v_count Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_punch
        Where
            empno = param_empno
            And Trunc(pdate) = Trunc(Sysdate);

        If v_count = 0 Then
            Return 'KO';
        Else
            Return 'OK';
        End If;
    Exception
        When Others Then
            Return 'KO';
    End;

    Function is_valid_ip (
        param_ip Varchar2
    ) Return Varchar2 Is

        v_ip_to_include      Char(11);
        v_ip_to_exclude      Char(15);
        v_include_count      Number;
        v_exclude_count      Number;
        v_ip_to_skip_count   Number;
    Begin
        --Check IP is RDP Allowed -- IP
        Select
            Count(*)
        Into v_include_count
        From
            ss_tcmpl_ip_4_wfh_rdp
        Where
            Trim(ip_addr) = Trim(param_ip);

        If v_include_count > 0 Then
            Return 'OK';
        --Else
            --Return 'KO';
        End If;
        
        --
        --
        v_ip_to_exclude := Trim(Trailing '.' From Substr(param_ip, 1, Instr(param_ip, '.', -1)));

        --v_ip_to_exclude   := param_ip;

        Select
            Count(*)
        Into v_exclude_count
        From
            ss_tcmpl_ip_mast
        Where
            ip_prefix = v_ip_to_exclude;

        Select
            Count(*)
        Into v_ip_to_skip_count
        From
            ss_tcmpl_ip_skip
        Where
            Trim(ip) = Trim(param_ip);

        If v_ip_to_skip_count > 0 Or v_exclude_count > 0 Then
            Return 'KO';
        Else
            Return 'OK';
        End If;

    Exception
        When Others Then
            Return 'KO';
    End;

    Function get_first_punch (
        param_empno Varchar2,
        param_pdate Date
    ) Return Varchar2 As
        v_ret_val   Varchar2(5);
        v_hrs       Varchar2(2);
        v_mn        Varchar2(2);
    Begin
        Select
            hrs,
            mn
        Into
            v_hrs,
            v_mn
        From
            (
                Select
                    Lpad(hh, 2, '0') hrs,
                    Lpad(mm, 2, '0') mn
                From
                    ss_vu_manual_punch
                Where
                    empno = param_empno
                    And pdate = param_pdate
                Order By
                    hh,
                    mm
            )
        Where
            Rownum = 1;

        Return v_hrs || ':' || v_mn;
    Exception
        When Others Then
            Return '';
    End;

    Function get_last_punch (
        param_empno Varchar2,
        param_pdate Date
    ) Return Varchar2 As

        v_ret_val   Varchar2(5);
        v_hrs       Varchar2(2);
        v_mn        Varchar2(2);
        v_count     Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_vu_manual_punch
        Where
            empno = param_empno
            And pdate = param_pdate;

        If v_count < 2 Then
            Return '';
        End If;
        Select
            hrs,
            mn
        Into
            v_hrs,
            v_mn
        From
            (
                Select
                    Lpad(hh, 2, '0') hrs,
                    Lpad(mm, 2, '0') mn
                From
                    ss_vu_manual_punch
                Where
                    empno = param_empno
                    And pdate = param_pdate
                Order By
                    hh Desc,
                    mm Desc
            )
        Where
            Rownum = 1;

        Return v_hrs || ':' || v_mn;
    Exception
        When Others Then
            Return '';
    End;

    Procedure add_punch (
        param_empno     Varchar2,
        param_ip        Varchar2,
        param_success   Out             Varchar2,
        param_message   Out             Varchar2
    ) As

        v_ip_to_include         Char(11);
        v_ip_to_exclude         Char(15);
        v_count                 Number;
        v_first_punch_time      Date;
        v_last_punch_time       Date;
        v_diff                  Number;
        v_now_date              Date;
        v_punch_entry_msg       Varchar2(100);
        v_include_count         Number;
        v_exclude_count         Number;
        v_is_ip_valid           Varchar2(10);
        v_office_punch_exists   Varchar2(2);
    Begin
        v_office_punch_exists   := check_office_punch_exists(param_empno);
        If v_office_punch_exists = 'OK' Then
            param_success   := 'KO';
            param_message   := 'Err - Office Punch exist. Cannot insert WFH - Punch.';
            return;
        End If;

        v_is_ip_valid           := is_valid_ip(param_ip);
        v_now_date              := Sysdate;
        /*
        If Trunc(v_now_date) >= To_Date('8-Oct-2020', 'dd-Mon-yyyy') Then
            param_success   := 'KO';
            param_message   := 'Err -  This utility has been disabled.';
            return;
        End If;
        
        
        v_ip_to_exclude   := param_ip;
        v_ip_to_include   := Trim(Trailing '.' From Substr(param_ip, 1, Instr(param_ip, '.', -1)));

        Select
            Count(*)
        Into v_include_count
        From
            ss_tcmpl_ip_mast
        Where
            ip_prefix = v_ip_to_include;

        Select
            Count(*)
        Into v_exclude_count
        From
            ss_tcmpl_ip_skip
        Where
            ip = v_ip_to_exclude;

        If v_include_count = 0 Or v_exclude_count > 0 Then
            param_success   := 'KO';
            param_message   := 'This utility is applicable from selected PC''s in TCMPL Mumbai Office';
            return;
        End If;
        */
        If v_is_ip_valid = 'KO' Then
            param_success   := 'KO';
            param_message   := 'This utility is not applicable from your PC in TCMPL Mumbai Office';
            return;
        End If;

        Select
            Count(*)
        Into v_count
        From
            ss_punch_wfh
        Where
            empno = param_empno
            And pdate = Trunc(v_now_date);

        If v_count = 0 Then
            v_punch_entry_msg   := 'IN entry has been successfully recorded.';
            v_now_date          := v_now_date; -- ( 5 / 1440 );
        Else
            v_punch_entry_msg   := 'OUT entry has been successfully recorded.';
            v_now_date          := v_now_date;-- + ( 5 / 1440 );
        End If;

        Begin
            Select
                Min(pdate_time),
                Max(pdate_time),
                Count(*)
            Into
                v_first_punch_time,
                v_last_punch_time,
                v_count
            From
                ss_punch_wfh
            Where
                empno = param_empno
                And pdate = Trunc(v_now_date);

        Exception
            When Others Then
                v_count := 0;
        End;

        v_diff                  := ( v_now_date - v_last_punch_time ) * 1440;
        If v_diff < 5 Then
            param_success   := 'KO';
            param_message   := 'Your last entry "' || To_Char(v_last_punch_time, 'dd-Mon-yyyy HH24:mi') || '". Please try this utility after '
            || To_Char(v_last_punch_time, 'dd-Mon-yyyy HH24:mi');

            return;
        End If;

        If v_count > 1 Then
            Delete From ss_punch_wfh
            Where
                empno = param_empno
                And pdate = Trunc(v_now_date)
                And pdate_time <> v_first_punch_time;

            Commit;
        End If;

        Insert Into ss_punch_wfh (
            empno,
            hh,
            mm,
            pdate,
            falseflag,
            dd,
            mon,
            yyyy,
            mach,
            ss,
            pdate_time
        ) Values (
            param_empno,
            To_Char(v_now_date, 'HH24'),
            To_Char(v_now_date, 'MI'),
            Trunc(v_now_date),
            1,
            To_Char(v_now_date, 'dd'),
            To_Char(v_now_date, 'MM'),
            To_Char(v_now_date, 'YYYY'),
            param_ip,
            To_Char(v_now_date, 'SS'),
            v_now_date
        );

        param_success           := 'OK';
        param_message           := v_punch_entry_msg;
    Exception
        When dup_val_on_index Then
            param_success   := 'KO';
            param_message   := 'Err - Entry already recorded. Please try after 5 min';
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End add_punch;

    Procedure get_emp_attendance (
        param_empno      Varchar2,
        param_name       Out              Varchar2,
        param_pdate      Out              Varchar2,
        param_in_time    Out              Varchar2,
        param_out_time   Out              Varchar2,
        param_success2   Out              Varchar2,
        param_message2   Out              Varchar2
    ) As

        v_first_punch   Varchar2(5);
        v_last_punch    Varchar2(5);
        v_now_date      Date := Sysdate;
        v_name          Varchar2(60);
    Begin
        param_pdate      := To_Char(v_now_date, 'dd-Mon-yyyy');
        Select
            name
        Into v_name
        From
            ss_emplmast
        Where
            empno = param_empno;

        param_name       := v_name;
        param_success2   := 'OK';
        Begin
            Select
                To_Char(Min(pdate_time), 'hh24:mi'),
                To_Char(Max(pdate_time), 'hh24:mi')
            Into
                param_in_time,
                param_out_time
            From
                ss_punch_wfh
            Where
                empno = param_empno
                And pdate = Trunc(v_now_date);

        Exception
            When Others Then
                param_in_time    := '-';
                param_out_time   := '-';
                param_message2   := 'to register OUT punch.';
                return;
        End;

        If Trim(param_in_time) Is Null Then
            param_in_time    := '';
            param_out_time   := '';
            param_message2   := 'to register IN punch.';
            return;
        End If;

        If param_in_time = param_out_time Then
            param_out_time := '';
        End If;
        param_message2   := 'to register OUT punch.';
    Exception
        When Others Then
            param_success2   := 'KO';
            param_message2   := 'Err - Data could not be retrieved.';
    End;

    Procedure rem_wfh_n_keep_card_swipe (
        param_empno Varchar2,
        param_pdate Date
    ) As
    Begin
        Delete From ss_punch_wfh
        Where
            empno = param_empno
            And Trunc(pdate) = Trunc(param_pdate);

        Commit;
    End;


End wfh_attendance;
/
---------------------------
--Changed PACKAGE BODY
--USER_PROFILE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."USER_PROFILE" as

  function get_profile(param_empno varchar2) return number as
    vCount Number;
  begin
    --W A R N I N G
    --X X X X
    --Do not change the sequence of the Select Statements.
    
    if param_empno = '02320' then
    --  return c_type_uhrd;
    null;
    end if;
    
    --HR
    Select count(EmpNo) InTo vCount from SS_UserMast where Empno = trim(param_empno) and active = 1 and type=1;
    If vCount > 0 Then
      return c_type_uhrd;
    End If;
    
    --HOD
    Select Count(Empno) InTo vCount from SS_EmplMast where mngr = trim(Param_empno) and status = 1 and emptype in ('R','S','C');
    If vCount > 0 Then
      return c_type_uhod;
    End If;
    
    --IT USB Manager
    Select Count(Empno) InTo vCount from SS_USERMAST where EMPNO = trim(Param_empno) and active = 1 and type=2;
    If vCount > 0 Then
      return c_Type_IT_USB_Mgr;
    End If;
    
    
    --LEAD
    Select Count(EmpNo) InTo vCount from SS_Lead_Approver where Parent In 
      (Select Parent From SS_Emplmast Where EmpNo = trim(param_empno) And Status=1) And EmpNo = trim(param_empno) ;
    If vCount > 0 Then
      return c_type_ulead;
    End If;
    
    --Approver Secretary
    Select Count(EmpNo) InTo vCount from SS_Delegate where Empno = trim(Param_empno);
    If vCount > 0 Then
      return c_type_usec_appr;
    End If;
    
    --Secretary
    Select Count(EmpNo) InTo vCount from SS_User_Dept_Rights where Empno = trim(Param_empno);
    If vCount > 0 Then
      return c_type_usec;
    End If;
    
    --Others
    Return c_type_uothers;
  Exception
    When Others Then
      --Others
      Return c_type_uothers;
  end get_profile;


function get_profile_desc( param_profile number) return varchar as
begin
  case 
    when param_profile = c_type_uhod then
      return 'HOD';
    when param_profile = c_type_uhrd then
      return 'HR';
    when param_profile = c_type_ulead then
      return 'LEAD';
    when param_profile = c_type_uothers then
      return 'Others';
    when param_profile = c_type_usec then
      return 'Secretary';
    when param_profile = c_type_usec_appr then
      return 'Approver Secretary';
    else
      return null;
  end case;
end;

function get_user_tcp_ip(param_empno varchar2) return varchar2 as
  UserType Number;
  vRetVal varchar2(30);
begin
  UserType := get_profile(param_empno);
  vRetVal := 'Test';
  if UserType = c_type_uhrd then
    Select Tcp_Ip InTo vRetVal from SS_UserMast where Empno = trim(Param_empno) and active = 1;
    --vRetVal := 'Test';
  else
    vRetVal := 'Raj';
  end if;
  return vRetVal;
exception
  when others then return null;
end;

  function type_HOD return number as
  begin
    return c_type_uhod;
  end type_HOD;

  function type_HRD return number as
  begin
    
    return c_type_uhrd;
  end type_HRD;

  function type_SEC return number as
  begin
    
    return c_type_usec;
  end type_SEC;

  function type_Lead return number as
  begin
    
    return c_type_ulead;
  end type_Lead;

  function type_Others return number as
  begin
    
    return c_type_uothers;
  end type_Others;

  function type_NotLoggedIn return number as
  begin
    
    return c_type_notloggedin;
  end type_NotLoggedIn;

  function type_Sec_Appr return Number as
  begin
    
    return c_type_usec_appr;
  end type_Sec_Appr;

end user_profile;
/
---------------------------
--Changed PACKAGE BODY
--USB
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."USB" As
    Procedure add_request (
        param_empno       Varchar2,
        param_reason      Varchar2,
        param_end_date    Varchar2,
        param_comp_name   Varchar2,
        param_success     Out Varchar2,
        param_message     Out Varchar2
    ) As
        v_count      Number;
        v_end_date   Date;
    Begin
        Select Count (*) Into
            v_count
        From ss_usb_request Where empno = Trim (param_empno) And nvl (apprl, ss.pending) = ss.pending;
        If v_count > 0 Then
            param_success := 'FAILURE';
            param_message := 'Error - Requests still pending for approval. Cannot create request.';
            return;
        End If;
        Begin
            v_end_date := To_Date (param_end_date, 'dd/mm/yyyy');
        Exception
            When others Then
                param_success := 'FAILURE';
                param_message := 'Error - incorrect "End Date" specified.' || param_end_date;
                return;
        End;
        Insert Into ss_usb_request field (
            key_id,
            empno,
            reason,
            entry_date,
            access_end_date,
            comp_name,
            req_access_edate
        ) Values (
            dbms_random.string ('X', 8),
            param_empno,
            param_reason,
            Sysdate,
            v_end_date,
            param_comp_name,
            v_end_date
        );
        Commit;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End add_request;
    Procedure del_request (
        param_empno     Varchar2,
        param_key       Varchar2,
        param_success   Out Varchar2,
        param_message   Out Varchar2
    )
        As
    Begin
        Delete From ss_usb_request Where empno = param_empno And key_id = param_key And nvl (apprl, ss.pending) = ss.pending;
        If sql%rowcount > 0 Then
            Commit;
            param_success := 'SUCCESS';
        Else
            param_success := 'FAILURE';
            param_message := 'Error - Could not delete specified record.';
        End If;
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End del_request;
    Procedure approve_request (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_end_date   Varchar2,
        param_remarks    Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    ) As
        v_end_date   Date;
    Begin
    -- TODO: Implementation required for procedure USB.approve_request

        Begin
            v_end_date := To_Date (param_end_date, 'dd/mm/yyyy');
        Exception
            When others Then
                param_success := 'FAILURE';
                param_message := 'Error - incorrect "End Date" specified.' || param_end_date;
                return;
        End;
        Update ss_usb_request
            Set
                apprl = ss.approved,
                apprl_by = param_approver,
                apprl_dt = Sysdate,
                access_end_date = v_end_date,
                apprl_remarks = param_remarks
        Where
            key_id = param_key;
        Commit;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End approve_request;
    Function employee_approver (
        param_empno   Varchar2
    ) Return Varchar2 As
        v_approver   Varchar2 (5);
    Begin
        Begin
            Select approver Into
                v_approver
            From
                ( Select
                        empno,
                        mngr_col approver,
                        level approver_level
                    From
                        ( Select
                                empno,
                                name,
                                parent,
                                empno empno_1,
                                    Case When empno = mngr
                                    Then
                                        Null
                                    Else
                                        mngr
                                    End
                                mngr_col
                            From ss_emplmast Where status = 1 )
                    Start With empno = param_empno Connect By Prior mngr_col = empno )
            Where approver_level = 2 And approver <> ( c_exclude_mngr );
        Exception
            When others Then
                Null;
        End;
        If v_approver Is Null Then
            Begin
                Select mngr Into
                    v_approver
                From ss_emplmast Where empno = param_empno And mngr Not In (
                        c_exclude_mngr
                    );
            Exception
                When others Then
                    Null;
            End;
        End If;
        Return v_approver;
    End;
    Procedure reject_request (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_remarks    Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    )
        As
    Begin
        Update ss_usb_request
            Set
                apprl = ss.rejected,
                apprl_by = param_approver,
                apprl_dt = Sysdate,
                apprl_remarks = param_remarks
        Where
            key_id = param_key;
        Commit;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Procedure it_approve (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    )
        As
    Begin
        Update ss_usb_request
            Set
                it_apprl = ss.approved,
                it_apprl_by = param_approver,
                it_apprl_date = Sysdate
        Where
            key_id = Trim (param_key);
        Commit;
        param_success := 'SUCCESS';
        --param_message := 'Error - ' || param_key || ' - ' || param_approver;

    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Procedure it_reject (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    )
        As
    Begin
        Update ss_usb_request
            Set
                it_apprl = ss.rejected,
                it_apprl_by = param_approver,
                it_apprl_date = Sysdate
        Where
            key_id = param_key;
        Commit;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Procedure it_terminate_by_date (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    )
        As
    Begin
        Update ss_usb_request
            Set
                it_apprl = usb.termination_by_date,
                it_apprl_by = param_approver,
                it_apprl_date = Sysdate
        Where
            key_id = param_key;
        Commit;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Procedure it_terminate_by_force (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    )
        As
    Begin
        Update ss_usb_request
            Set
                it_apprl = usb.termination_by_force,
                it_apprl_by = param_approver,
                it_apprl_date = Sysdate
        Where
            key_id = param_key;
        Commit;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Procedure it_mis_match_rectify (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    ) As
        v_count   Number;
        v_empno   Varchar2 (5);
    Begin
        Select empno Into
            v_empno
        From ss_usb_request Where key_id = param_key;
        Select Count (*) Into
            v_count
        From ss_usb_request Where key_id = Trim (param_key) And Trim (comp_name) <> usb.get_comp_name (v_empno);
        If v_count > 0 Then
            Update ss_usb_request
                Set
                    comp_name = trim (usb.get_comp_name (v_empno) ),
                    it_apprl_by = param_approver,
                    it_apprl_date = Sysdate
            Where
                key_id = param_key;
            Commit;
        End If;
        Select Count (*) Into
            v_count
        From ss_usb_request Where key_id = param_key And trunc (nvl (access_end_date, Sysdate + 1) ) <= trunc (Sysdate);
        If v_count > 0 Then
            Update ss_usb_request
                Set
                    it_apprl = usb.termination_by_date,
                    it_apprl_by = param_approver,
                    it_apprl_date = Sysdate
            Where
                key_id = param_key;
            Commit;
        End If;
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Procedure it_mach_replaced (
        param_key        Varchar2,
        param_approver   Varchar2,
        param_success    Out Varchar2,
        param_message    Out Varchar2
    )
        As
    Begin
  /*
    update ss_usb_request set 
        it_apprl = USB.TERMINATION_BY_FORCE, it_apprl_by = param_approver, it_apprl_date = sysdate
      where key_id = param_key;
    commit;
    */
        param_success := 'SUCCESS';
    Exception
        When others Then
            param_success := 'FAILURE';
            param_message := 'Error - ' ||sqlcode ||' - ' ||sqlerrm;
    End;
    Function approved Return Number
        Is
    Begin
        Return n_approved;
    End;
    Function rejected Return Number
        Is
    Begin
        Return n_rejected;
    End;
    Function pending Return Number
        Is
    Begin
        Return n_pending;
    End;
    Function termination_by_force Return Number
        Is
    Begin
        Return n_termination_by_force;
    End;
    Function termination_by_date Return Number
        Is
    Begin
        Return n_termination_by_date;
    End;
    Function approval_text (
        param_status   Number
    ) Return Varchar2 Is
        v_status    Number;
        v_ret_val   Varchar2 (30);
    Begin
        v_status := nvl (param_status, ss.pending);
        Case When v_status = usb.pending
        Then
            v_ret_val := 'Pending';
        When v_status = usb.approved
        Then
            v_ret_val := 'Approved';
        When v_status = usb.rejected
        Then
            v_ret_val := 'Rejected';
        When v_status = usb.termination_by_force
        Then
            v_ret_val := 'Forceful Termination';
        When v_status = usb.termination_by_date
        Then
            v_ret_val := 'Termination by Request';
        Else
            v_status := '';
        End Case;
        Return v_ret_val;
    End;
    Function get_comp_name (
        param_empno   Varchar2
    ) Return Varchar2 Is
        v_comp_name   Varchar2 (60);
    Begin
        If param_empno = 'ALLSS' Then
            Return 'PC9584';
        End If;
        Select a.compname Into
            v_comp_name
        From
            dm_vu_user_desk_pc a
        Where a.empno = Trim (param_empno) ;
        Return v_comp_name;
    Exception
        When others Then
            Return 'ERRRRR';
    End;
End usb;
/
---------------------------
--New PACKAGE BODY
--TASK_SCHEDULER
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."TASK_SCHEDULER" As

    Procedure sp_daily_swp_add_nu_joinees As
    Begin
        iot_swp_config_week.sp_add_new_joinees_to_pws;
    End ;

    procedure sp_daily_swp_config_week as
    begin
        iot_swp_config_week.sp_configuration;
    end;

    procedure sp_daily_swp_sendmail as
    begin
        iot_swp_mail.sp_send_to_ows_absent_emp;
    end;


End task_scheduler;
/
---------------------------
--Changed PACKAGE BODY
--SWP_VACCINE_REMINDER
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SWP_VACCINE_REMINDER" As

    Procedure remind_vaccine_type_not_update As

        Cursor cur_vaccine_type_null Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        e.name,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast       e,
                        swp_vaccine_dates v
                    Where
                        e.empno      = v.empno
                        And e.status = 1
                        And e.parent <> '0187'
                        And v.vaccine_type Is Null
                        And e.email Is Not Null
                        And e.empno Not In ('04132', '04600')
                    Order By e.empno
                )
            Group By
                group_id;

        Type typ_tab_vaccine_type_null Is
            Table Of cur_vaccine_type_null%rowtype;
        tab_vaccine_type_null typ_tab_vaccine_type_null;
        v_count               Number;
        v_mail_csv            Varchar2(2000);
        v_subject             Varchar2(1000);
        v_msg_body            Varchar2(2000);
        v_success             Varchar2(100);
        v_message             Varchar2(500);
    Begin
        v_msg_body := v_mail_body_vaccine_type;
        v_subject  := 'SELFSERVICE : Vaccine type not updated';
        For email_csv_row In cur_vaccine_type_null
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;

    End;

    Procedure remind_vaccine_not_done As

        Cursor cur_vaccine_not_done(
            p_date_for_calc Date
        ) Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        e.name,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast e
                    Where
                        e.status = 1
                        And e.parent <> '0187'
                        And e.email Is Not Null
                        And e.empno Not In ('04132', '04600')
                        And e.empno Not In (
                            Select
                                empno
                            From
                                swp_vaccine_dates
                        )
                        And e.empno Not In (
                            Select
                                empno
                            From
                                swp_vaccine_covid_emp
                            Group By empno
                            Having
                                ceil(trunc(p_date_for_calc) - trunc(Max(covid_start_date))) < 90
                            Union
                            Select
                                empno
                            From
                                swp_vaccine_pregnent_emp
                        -- Exclude Covid Infected  & Pergnent Employees
                        )
                        And emptype In (
                            'R', 'S', 'C', 'F'
                        )
                    Order By e.empno
                )
            Group By
                group_id;

        v_count         Number;
        v_mail_csv      Varchar2(2000);
        v_subject       Varchar2(500);
        v_msg_body      Varchar2(2000);
        v_success       Varchar2(100);
        v_message       Varchar2(1000);
        v_date_for_calc Date := to_date('5-Sep-2021');
    Begin
        v_msg_body := v_mail_body_no_vaccine_regn;
        v_subject  := 'Vaccine second jab due';
        If trunc(sysdate) > v_date_for_calc Then
            v_msg_body      := v_mail_body_without_vaccine;
            v_date_for_calc := sysdate;
        End If;

        v_subject  := 'SELFSERVICE : Get yourself vaccinated';
        For email_csv_row In cur_vaccine_not_done(v_date_for_calc)
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;

    End;

    Procedure remind_covishield_second_jab As

        Cursor cur_vaccine2_pending(
            p_date_for_calc Date
        ) Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        e.name,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast       e,
                        swp_vaccine_dates v
                    Where
                        e.empno            = v.empno
                        And e.empno Not In ('04132', '04600')
                        And e.status       = 1
                        And e.parent <> '0187'
                        And e.email Is Not Null
                        And v.vaccine_type = 'COVISHIELD'
                        And (trunc((p_date_for_calc)) - trunc(v.jab1_date)) >= 84
                        And v.jab2_date Is Null
                        And v.empno Not In (
                            Select
                                empno
                            From
                                swp_vaccine_covid_emp
                            Group By empno
                            Having
                                (trunc((p_date_for_calc)) - trunc(Max(covid_start_date))) < 90
                            Union
                            Select
                                empno
                            From
                                swp_vaccine_pregnent_emp

                        -- Exclude Covid Infected  & Pergnent Employees
                        )
                        And v.empno Not In (
                            Select
                                empno
                            From
                                swp_vaccination_office
                            Where
                                trunc((p_date_for_calc)) != trunc(sysdate)
                        -- Exclude registered
                        )
                    Order By e.empno
                )
            Group By
                group_id;

        v_count         Number;
        v_mail_csv      Varchar2(2000);
        v_subject       Varchar2(1000);
        v_msg_body      Varchar2(2000);
        v_success       Varchar2(100);
        v_message       Varchar2(500);
        v_date_for_calc Date := to_date('5-Sep-2021');
    Begin
        v_msg_body := v_mail_body_second_jab_regn;
        v_subject  := 'SELFSERVICE : Vaccine second jab due';
        If trunc(sysdate) > v_date_for_calc Then
            v_date_for_calc := sysdate;
            v_msg_body      := v_mail_body_second_jab;
        End If;

        For email_csv_row In cur_vaccine2_pending(v_date_for_calc)
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;

    End;

    Procedure remind_covaxin_second_jab As

        Cursor cur_vaccine_type_null Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        e.name,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast       e,
                        swp_vaccine_dates v
                    Where
                        e.empno            = v.empno
                        And e.empno Not In ('04132', '04600')
                        And e.status       = 1
                        And e.parent <> '0187'
                        And e.email Is Not Null
                        And v.vaccine_type = 'COVAXIN'
                        And (trunc(sysdate) - trunc(v.jab1_date)) >= 28
                        And v.empno Not In (
                            Select
                                empno
                            From
                                swp_vaccine_covid_emp
                            Group By empno
                            Having
                                ceil(trunc(sysdate) - trunc(Max(covid_start_date))) < 90
                            Union
                            Select
                                empno
                            From
                                swp_vaccine_pregnent_emp

                        -- Exclude Covid Infected  & Pergnent Employees
                        )
                        And v.jab2_date Is Null
                    Order By e.empno
                )
            Group By
                group_id;

        Type typ_tab_vaccine_type_null Is
            Table Of cur_vaccine_type_null%rowtype;
        tab_vaccine_type_null typ_tab_vaccine_type_null;
        v_count               Number;
        v_mail_csv            Varchar2(2000);
        v_subject             Varchar2(500);
        v_msg_body            Varchar2(2000);
        v_success             Varchar2(100);
        v_message             Varchar2(1000);
    Begin
        v_msg_body := v_mail_body_second_jab;
        v_subject  := 'SELFSERVICE : Vaccine second jab due';
        For email_csv_row In cur_vaccine_type_null
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;

    End;

    Procedure remind_training_pending As

        Cursor cur_pending_trainings Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        e.name,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast      e,
                        swp_emp_training t
                    Where
                        e.empno      = t.empno
                        And e.empno Not In ('04132', '04600')
                        And e.status = 1
                        And e.parent <> '0187'
                        And e.email Is Not Null
                        And 0 In (t.security, t.sharepoint16, t.onedrive365, t.teams, t.planner)
                    Order By e.empno
                )
            Group By
                group_id;

        v_count    Number;
        v_mail_csv Varchar2(2000);
        v_subject  Varchar2(500);
        v_msg_body Varchar2(2000);
        v_success  Varchar2(100);
        v_message  Varchar2(1000);
    Begin
        v_msg_body := v_mail_body_pend_train;
        v_subject  := 'SELFSERVICE : Smart Working Policy - Mandatory Courses Pending';
        For email_csv_row In cur_pending_trainings
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );
        End Loop;

    End;

    Procedure send_mail As
    Begin

        remind_vaccine_type_not_update;
        remind_vaccine_not_done;
        remind_covishield_second_jab;
        remind_covaxin_second_jab;

        --remind_training_pending;
    End send_mail;

End swp_vaccine_reminder;
/
---------------------------
--Changed PACKAGE BODY
--SWP_VACCINEDATE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SWP_VACCINEDATE" As

    Procedure sendmail(
        param_empno Varchar2
    ) As

        v_email         ss_emplmast.email%Type;
        v_name          ss_emplmast.name%Type;
        v_email_body    Varchar2(4000);
        v_email_subject Varchar2(200);
        v_success       Varchar2(10);
        v_message       Varchar2(1000);
    Begin
        Select
            name,
            email
        Into
            v_name,
            v_email
        From
            ss_emplmast
        Where
            empno = param_empno;

        v_email_subject := 'Vaccine Date deletion.';
        v_email_body    := 'Dear User,

Your input in Employee Vaccine Dates has been deleted as it was for a future date.

Please input your actual 1st vaccine date after taking the 1st jab and follow the same for the 2nd vaccine date.';
        v_email_body    := v_email_body || chr(13) || chr(10) || chr(13) || chr(10);

        v_email_body    := v_email_body || 'Thanks,' || chr(13) || chr(10);

        v_email_body    := v_email_body || 'This is an automated TCMPL Mail.';
        If v_email Is Not Null Then
            send_mail_from_api(
                p_mail_to      => v_email,
                p_mail_cc      => Null,
                p_mail_bcc     => Null,
                p_mail_subject => v_email_subject,
                p_mail_body    => v_email_body,
                p_mail_profile => 'SELFSERVICE',
                p_mail_format  => 'Text',
                p_success      => v_success,
                p_message      => v_message
            );
        End If;

    End sendmail;

    Procedure add_new(
        param_win_uid      Varchar2,
        param_vaccine_type Varchar2,
        param_first_jab    Date,
        param_second_jab   Date,
        param_success Out  Varchar2,
        param_message Out  Varchar2
    ) As
        v_empno Char(5);
    Begin
        v_empno       := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If v_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;

        Insert Into swp_vaccine_dates (
            empno,
            vaccine_type,
            jab1_date,
            is_jab1_by_office,
            jab2_date,
            is_jab2_by_office,
            modified_on,
            modified_by
        )
        Values (
            v_empno,
            param_vaccine_type,
            param_first_jab,
            'KO',
            param_second_jab,
            'KO',
            sysdate,
            v_empno
        );

        Commit;
        param_success := 'OK';
        param_message := 'Procedure executed successfully';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End add_new;

    Procedure add_emp_vaccine_dates(
        param_win_uid          Varchar2,
        param_vaccine_type     Varchar2,
        param_for_empno        Varchar2,
        param_first_jab_date   Date,
        param_second_jab_date  Date Default Null,
        param_booster_jab_date Date Default Null,
        param_success Out      Varchar2,
        param_message Out      Varchar2
    ) As
        v_empno                Char(5);
        v_second_jab_by_office Varchar2(2);
    Begin
        v_empno                := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If v_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;
        v_second_jab_by_office := Case
                                      When param_second_jab_date Is Null Then
                                          Null
                                      Else
                                          'KO'
                                  End;
        Insert Into swp_vaccine_dates (
            empno,
            vaccine_type,
            jab1_date,
            is_jab1_by_office,
            jab2_date,
            is_jab2_by_office,
            booster_jab_date,
            modified_on,
            modified_by
        )
        Values (
            param_for_empno,
            param_vaccine_type,
            param_first_jab_date,
            'KO',
            param_second_jab_date,
            'KO',
            param_booster_jab_date,
            sysdate,
            v_empno
        );

        Commit;
        param_success          := 'OK';
        param_message          := 'Procedure executed successfully';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End add_emp_vaccine_dates;

    Procedure update_emp_second_jab(
        param_win_uid         Varchar2,
        param_for_empno       Varchar2,
        param_second_jab_date Date,

        param_success Out     Varchar2,
        param_message Out     Varchar2
    ) As
        by_empno Char(5);
    Begin
        by_empno      := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If by_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;

        Update
            swp_vaccine_dates
        Set
            jab2_date = param_second_jab_date,
            is_jab2_by_office = 'KO',

            modified_on = sysdate,
            modified_by = by_empno
        Where
            empno = param_for_empno;

        If Sql%rowcount = 0 Then
            param_success := 'OK';
            param_message := 'Second Jab info could not be updated.';
            Return;
        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Procedure executed';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End update_emp_second_jab;

    Procedure update_emp_jab(
        param_win_uid          Varchar2,
        param_for_empno        Varchar2,
        param_second_jab_date  Date,
        param_booster_jab_date Date,
        param_success Out      Varchar2,
        param_message Out      Varchar2
    ) As
        by_empno Char(5);
    Begin
        by_empno      := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If by_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;

        Update
            swp_vaccine_dates
        Set
            jab2_date = param_second_jab_date,
            booster_jab_date = param_booster_jab_date,
            is_jab2_by_office = 'KO',
            modified_on = sysdate,
            modified_by = by_empno
        Where
            empno = param_for_empno;

        If Sql%rowcount = 0 Then
            param_success := 'OK';
            param_message := 'Second Jab info could not be updated.';
            Return;
        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Procedure executed';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End update_emp_jab;

    Procedure update_self_jab(
        param_win_uid          Varchar2,

        param_second_jab_date  Date,
        param_booster_jab_date Date,
        param_success Out      Varchar2,
        param_message Out      Varchar2
    ) As
        v_empno Char(5);
    Begin
        v_empno       := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If v_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;

        Update
            swp_vaccine_dates
        Set
            jab2_date = param_second_jab_date,
            booster_jab_date = param_booster_jab_date,
            is_jab2_by_office = 'KO',
            modified_on = sysdate,
            modified_by = v_empno
        Where
            empno = v_empno;

        If Sql%rowcount = 0 Then
            param_success := 'OK';
            param_message := 'Second Jab info could not be updated.';
            Return;
        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Procedure executed';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End update_self_jab;

    Procedure update_second_jab(
        param_win_uid     Varchar2,
        param_second_jab  Date,
        param_success Out Varchar2,
        param_message Out Varchar2
    ) As
        v_empno Char(5);
    Begin
        v_empno       := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If v_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;

        Update
            swp_vaccine_dates
        Set
            jab2_date = param_second_jab,
            is_jab2_by_office = 'KO',
            modified_on = sysdate,
            modified_by = v_empno
        Where
            empno = v_empno;

        If Sql%rowcount = 0 Then
            param_success := 'OK';
            param_message := 'Second Jab info could not be updated.';
            Return;
        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Procedure executed';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End update_second_jab;

    Procedure update_vaccine_type(
        param_win_uid      Varchar2,
        param_vaccine_type Varchar2,
        param_second_jab   Date,
        param_success Out  Varchar2,
        param_message Out  Varchar2
    ) As
        v_empno Char(5);
    Begin
        v_empno       := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        If v_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving EMPNO';
            Return;
        End If;

        Update
            swp_vaccine_dates
        Set
            vaccine_type = param_vaccine_type,
            jab2_date = param_second_jab,
            modified_on = sysdate
        Where
            empno = v_empno;

        If Sql%rowcount = 0 Then
            param_success := 'OK';
            param_message := 'Second Jab info could not be updated.';
            Return;
        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Procedure executed';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End update_vaccine_type;

    Procedure delete_emp_vaccine_dates(
        param_empno       Varchar2,
        param_hr_win_uid  Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    ) As
        --v_empno          Char(5);
        v_hr_empno Char(5);
        v_count    Number;
    Begin
        v_hr_empno    := swp_users.get_empno_from_win_uid(param_win_uid => param_hr_win_uid);
        If v_hr_empno Is Null Then
            param_success := 'KO';
            param_message := 'Error while retrieving HR EMP Detials';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno      = param_empno
            And status = 1;

        If v_hr_empno Is Null Then
            param_success := 'KO';
            param_message := 'Err - Select Employee details not found.';
            Return;
        End If;

        Delete
            From swp_vaccine_dates
        Where
            empno = param_empno;

        If Sql%rowcount = 0 Then
            param_success := 'OK';
            param_message := 'Jab info could not be updated.';
            Return;
        End If;

        Commit;
        sendmail(param_empno);
        param_success := 'OK';
        param_message := 'Procedure executed';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End delete_emp_vaccine_dates;

End swp_vaccinedate;
/
---------------------------
--Changed PACKAGE BODY
--SWP_OFFICE_VACCINE_BATCH_2
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SWP_OFFICE_VACCINE_BATCH_2" As

    Procedure add_registration (
        param_win_uid          Varchar2,
        param_vaccine_for      Varchar2,
        param_preferred_date   Date,
        jab_number             Varchar2,
        param_success          Out                    Varchar2,
        param_message          Out                    Varchar2
    ) As
        v_empno   Varchar2(5);
        v_name    Varchar2(100);
        v_yob     Varchar2(4);
    Begin
        v_empno         := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        Insert Into swp_vaccination_office_batch_2 (
            empno,
            vaccination_for,
            preferred_date,
            jab_number,
            modified_on
        ) Values (
            v_empno,
            param_vaccine_for,
            param_preferred_date,
            jab_number,
            Sysdate
        );

        If Upper(param_vaccine_for) Like '%SELF%' Then
            Select
                name,
                To_Char(dob, 'yyyy')
            Into
                v_name,
                v_yob
            From
                ss_emplmast
            Where
                empno = v_empno;

            add_family_member(
                param_win_uid              => param_win_uid,
                param_family_member_name   => v_name,
                param_relation             => 'SELF',
                param_year_of_birth        => v_yob,
                param_success              => param_success,
                param_message              => param_message
            );

        End If;

        Commit;
        param_success   := 'OK';
        param_message   := 'Procedure executed';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End add_registration;

    Procedure add_family_member (
        param_win_uid              Varchar2,
        param_family_member_name   Varchar2,
        param_relation             Varchar2,
        param_year_of_birth        Number,
        param_success              Out                        Varchar2,
        param_message              Out                        Varchar2
    ) As
        v_empno    Varchar2(5);
        v_key_id   Varchar2(8);
    Begin
        v_empno         := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        v_key_id        := dbms_random.string('X', 8);
        Insert Into swp_vaccination_office_family (
            empno,
            family_member_name,
            relation,
            year_of_birth,
            modified_on,
            key_id
        ) Values (
            v_empno,
            Upper(param_family_member_name),
            Upper(param_relation),
            param_year_of_birth,
            Sysdate,
            v_key_id
        );

        Commit;
        param_success   := 'OK';
        param_message   := 'Procedure executed';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End add_family_member;

    Procedure remove_family_member (
        param_win_uid   Varchar2,
        param_keyid     Varchar2,
        param_success   Out             Varchar2,
        param_message   Out             Varchar2
    ) As
        v_empno Varchar2(5);
    Begin
        v_empno := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        Delete From swp_vaccination_office_family
        Where
            key_id = param_keyid
            And empno = v_empno;

        If Sql%rowcount <> 0 Then
            param_success   := 'OK';
            param_message   := 'Procedure executed successfully';
            Commit;
        Else
            param_success   := 'KO';
            param_message   := 'Family member not found.';
        End If;

    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End remove_family_member;

    Procedure reset_registration (
        param_win_uid   Varchar2,
        param_success   Out             Varchar2,
        param_message   Out             Varchar2
    ) As
        v_empno Varchar2(5);
    Begin
        v_empno := swp_users.get_empno_from_win_uid(param_win_uid => param_win_uid);
        Delete From swp_vaccination_office_family
        Where
            empno = v_empno;

        Delete From swp_vaccination_office_batch_2
        Where
            empno = v_empno;

        If Sql%rowcount <> 0 Then
            param_success   := 'OK';
            param_message   := 'Procedure executed successfully';
            Commit;
        Else
            param_success   := 'KO';
            param_message   := 'Employee data not found.';
        End If;

    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End reset_registration;

End swp_office_vaccine_batch_2;
/
---------------------------
--Changed PACKAGE BODY
--SWP
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SWP" As

    Procedure check_details (
        param_win_uid           Varchar2,
        param_swp_exists        Out                     Varchar2,
        param_user_can_do_swp   Out                     Varchar2,
        param_is_iphone_user    Out                     Varchar2,
        param_success           Out                     Varchar2,
        param_message           Out                     Varchar2
    ) As
        v_empno   Varchar2(5);
        v_count   Number;
    Begin
        v_empno         := swp_users.get_empno_from_win_uid(param_win_uid);
        If v_empno Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - User not found in DB.';
            return;
        End If;

        --Check user is valid

        Select
            Count(*)
        Into v_count
        From
            ss_emplmast
        Where
            empno = v_empno
            And status = 1
            And emptype In (
                'R',
                'F',
                'S',
                'C'
            );

        If v_count = 0 Then
            param_user_can_do_swp   := 'KO';
            param_success           := 'OK';
            param_message           := 'User not eligible for Smart Work Policy';
            return;
        Else
            param_user_can_do_swp := 'OK';
        End If;

        --Check employee has already already submitted his response.

        Select
            Count(*)
        Into v_count
        From
            swp_emp_response
        Where
            empno = v_empno;

        If v_count > 0 Then
            param_swp_exists := 'OK';
        Else
            param_swp_exists := 'KO';
        End If;

        Select
            Count(*)
        Into v_count
        From
            swp_emp_with_comp_mob
        Where
            empno = v_empno;

        If v_count > 0 Then
            param_is_iphone_user := 'OK';
        Else
            param_is_iphone_user := 'KO';
        End If;

        param_success   := 'OK';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End check_details;

    Procedure swp_create (
        param_win_uid             Varchar2,
        param_is_accepted         Varchar2,
        param_download_speed      Varchar2,
        param_upload_speed        Varchar2,
        param_monthly_quota       Varchar2,
        param_isp_name            Varchar2,
        param_router_brand        Varchar2,
        param_router_model        Varchar2,
        param_msauth_on_own_mob   Varchar2,
        param_success             Out                       Varchar2,
        param_message             Out                       Varchar2
    ) As
        v_empno Char(5);
    Begin
        v_empno         := swp_users.get_empno_from_win_uid(param_win_uid);
        If v_empno Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - User not found in DB.';
            return;
        End If;

        Insert Into swp_emp_response (
            empno,
            is_accepted,
            emp_entry_date
        ) Values (
            v_empno,
            param_is_accepted,
            Sysdate
        );

        Delete From swp_it_prerequisites
        Where
            empno = v_empno;

        Insert Into swp_it_prerequisites (
            empno,
            download_speed,
            upload_speed,
            monthly_quota,
            isp_name,
            router_brand,
            router_model,
            ms_auth_on_own_mob,
            modified_on
        ) Values (
            v_empno,
            param_download_speed,
            param_upload_speed,
            param_monthly_quota,
            param_isp_name,
            param_router_brand,
            param_router_model,
            param_msauth_on_own_mob,
            Sysdate
        );

        Commit;
        param_success   := 'OK';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End swp_create;

    Procedure swp_hod_appr (
        p_json              Clob,
        param_hod_win_uid   Varchar2,
        param_success       Out                 Varchar2,
        param_message       Out                 Varchar2
    ) As
        v_empno         swp_emp_response.empno%Type;
        v_is_accepted   swp_emp_response.is_accepted%Type;
        v_hod           Varchar2(5);
    Begin
        v_hod           := swp_users.get_empno_from_win_uid(param_hod_win_uid);
        If v_hod Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - HoD not found in DB.';
            return;
        End If;

        apex_json.parse(p_json);
        For i In 1..apex_json.get_count('data') Loop
            v_empno         := apex_json.get_varchar2(
                'data[%d].EMPNO',
                i
            );
            v_is_accepted   := apex_json.get_varchar2(
                'data[%d].IS_ACCEPTED',
                i
            );
            If v_is_accepted = 'OK' Then
                Update swp_emp_response
                Set
                    hod_apprl = 'OK',
                    hod_apprl_by = v_hod,
                    hod_apprl_date = Sysdate
                Where
                    empno = v_empno;

            Else
                param_success   := 'KO';
                param_message   := 'Err - Policy not accepted';
                return;
            End If;

        End Loop;

        Commit;
        /*For i In 1..apex_json.get_count('data') Loop
            v_empno := apex_json.get_varchar2('data[%d].EMPNO', i);
            send_mail(v_empno, 'HoD', 'Approved');
        End Loop;*/
        param_success   := 'OK';
        param_message   := 'Approved';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End swp_hod_appr;

    Procedure swp_hod_reject (
        param_empno         Char,
        param_hod_win_uid   Varchar2,
        param_success       Out                 Varchar2,
        param_message       Out                 Varchar2
    ) As
        v_hod        Varchar2(5);
        v_hr_apprl   Varchar2(2);
    Begin
        v_hod := swp_users.get_empno_from_win_uid(param_hod_win_uid);
        If v_hod Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - HoD not found in DB.';
            return;
        End If;

        Select
            hr_apprl
        Into v_hr_apprl
        From
            swp_emp_response
        Where
            empno = param_empno;

        If Nvl(v_hr_apprl, 'KO') = 'OK' Then
            param_success   := 'KO';
            param_message   := 'Err - Smart Working Policy is already approved by HR.';
            return;
        Else
            Update swp_emp_response
            Set
                hod_apprl = 'KO',
                hod_apprl_by = v_hod,
                hod_apprl_date = Sysdate
            Where
                empno = param_empno;

            Commit;
            send_mail(
                param_empno,
                'HoD',
                'Rejected'
            );
            param_success   := 'OK';
            param_message   := 'Rejected by HoD';
        End If;

    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End swp_hod_reject;

    Procedure swp_hr_appr (
        p_json             Clob,
        param_hr_win_uid   Varchar2,
        param_success      Out                Varchar2,
        param_message      Out                Varchar2
    ) As

        v_empno         swp_emp_response.empno%Type;
        v_is_accepted   swp_emp_response.is_accepted%Type;
        v_hod_apprl     swp_emp_response.hod_apprl%Type;
        v_hr            Varchar2(5);
    Begin
        v_hr            := swp_users.get_empno_from_win_uid(param_hr_win_uid);
        If v_hr Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - HR not found in DB.';
            return;
        End If;

        apex_json.parse(p_json);
        For i In 1..apex_json.get_count('data') Loop
            v_empno         := apex_json.get_varchar2(
                'data[%d].EMPNO',
                i
            );
            v_is_accepted   := apex_json.get_varchar2(
                'data[%d].IS_ACCEPTED',
                i
            );
            v_hod_apprl     := apex_json.get_varchar2(
                'data[%d].HOD_APPRL',
                i
            );
            If v_is_accepted = 'OK' And v_hod_apprl = 'OK' Then
                Update swp_emp_response
                Set
                    hr_apprl = 'OK',
                    hr_apprl_by = v_hr,
                    hr_apprl_date = Sysdate
                Where
                    empno = v_empno;

            Else
                param_success   := 'KO';
                param_message   := 'Err - Policy not accepted / HoD not approved';
                return;
            End If;

        End Loop;

        Commit;
        /*For i In 1..apex_json.get_count('data') Loop
            v_empno := apex_json.get_varchar2('data[%d].EMPNO', i);
            send_mail(v_empno, 'HR', 'Approved');
        End Loop;*/
        param_success   := 'OK';
        param_message   := 'Approved';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End swp_hr_appr;

    Procedure swp_hr_reject (
        param_empno        Char,
        param_hr_win_uid   Varchar2,
        param_success      Out                Varchar2,
        param_message      Out                Varchar2
    ) As
        v_hr         Varchar2(5);
        v_hr_apprl   Varchar2(2);
    Begin
        v_hr            := swp_users.get_empno_from_win_uid(param_hr_win_uid);
        If v_hr Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - HR not found in DB.';
            return;
        End If;

        Update swp_emp_response
        Set
            hr_apprl = 'KO',
            hr_apprl_by = v_hr,
            hr_apprl_date = Sysdate
        Where
            empno = param_empno;

        Commit;
        send_mail(
            param_empno,
            'HR',
            'Rejected'
        );
        param_success   := 'OK';
        param_message   := 'Rejected by HR';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End swp_hr_reject;

    Procedure swp_hr_reset (
        param_empno        Char,
        param_hr_win_uid   Varchar2,
        param_success      Out                Varchar2,
        param_message      Out                Varchar2
    ) As
        v_hr         Varchar2(5);
        v_hr_apprl   Varchar2(2);
    Begin
        v_hr            := swp_users.get_empno_from_win_uid(param_hr_win_uid);
        If v_hr Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - HR not found in DB.';
            return;
        End If;

        Delete From swp_emp_response
        Where
            empno = param_empno;

        Delete From swp_it_prerequisites
        Where
            empno = param_empno;

        Commit;
        param_success   := 'OK';
        param_message   := 'Reset successfully by HR';
    Exception
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End swp_hr_reset;

    Function mail_body (
        p_name          Varchar2,
        p_appr          Varchar2,
        p_appr_status   Varchar2
    ) Return Varchar2 Is
        v_body Varchar2(4000);
    Begin
        v_body   := 'Dear ' || p_name || ',' || Chr(13) || Chr(10) || Chr(13) || Chr(10);

        If Upper(p_appr) = 'HOD' Then
            v_body := v_body || 'Your application for the Smart Work Policy Agreement has been disapproved by your HOD. Please contact your HOD before re-application.'
            ;
        Else
            v_body := v_body || 'Your application for the Smart Work Policy Agreement has been disapproved by HR as the completion of the mandatory training/s is/are pending from your end. Please complete your pending training/s and contact Ashutosh Rawat / Kausik Das from HR before re-application.'
            ;
        End If;

        v_body   := v_body || Chr(13) || Chr(10) || Chr(13) || Chr(10);

        v_body   := v_body || 'Thanks,' || Chr(13) || Chr(10);

        v_body   := v_body || 'This is an automated TCMPL Mail.';
        Return v_body;
    End mail_body;

    Procedure send_mail (
        p_empno         Char,
        p_appr          Varchar2,
        p_appr_status   Varchar2
    ) As

        v_email           ss_emplmast.email%Type;
        v_name            ss_emplmast.name%Type;
        v_email_body      Varchar2(4000);
        v_email_subject   Varchar2(200);
        v_success         Varchar2(10);
        v_message         Varchar2(1000);
    Begin
        Select
            name,
            email
        Into
            v_name,
            v_email
        From
            ss_emplmast
        Where
            empno = p_empno;

        If Upper(p_appr) = 'HOD' Then
            v_email_subject := 'Smart Work Policy Agreement application disapproved by HOD';
        Else
            v_email_subject := 'Smart Work Policy Agreement application disapproved by HR';
        End If;

        v_email_body := swp.mail_body(
            v_name,
            p_appr,
            p_appr_status
        );
        If v_email Is Not Null Then
            send_mail_from_api(
                p_mail_to        => v_email,
                p_mail_cc        => Null,
                p_mail_bcc       => Null,
                p_mail_subject   => v_email_subject,
                p_mail_body      => v_email_body,
                p_mail_profile   => 'SELFSERVICE',
                p_mail_format    => 'Text',
                p_success        => v_success,
                p_message        => v_message
            );
        
        /*
            ss_mail.send_mail_2_user_nu(
                param_to_mail_id   => v_email,
                param_subject      => 'Smart Working - ' || p_appr_status,
                param_body         => swp.mail_body(
                    v_name,
                    p_appr,
                    p_appr_status
                )
            );
        */
        End If;

    Exception
        When Others Then
            Null;
    End send_mail;

End swp;
/
---------------------------
--Changed PACKAGE BODY
--SUM_WRK_HRS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SUM_WRK_HRS" As

    Procedure get_emp_work_hrs (
        param_empno          Varchar2,
        param_bdate          Date,
        param_edate          Date,
        param_act_wrk_hrs    Out   Number,
        param_tar_wrk_hrs    Out   Number,
        param_sat_wrk_hrs    Out   Number,
        param_sun_wrk_hrs    Out   Number,
        param_hh_wrk_hrs     Out   Number,
        param_sat_wrk_days   Out   Number,
        param_sun_wrk_days   Out   Number,
        param_hh_wrk_days    Out   Number,
        param_success        Out   Varchar2,
        param_message        Out   Varchar2
    ) As
    Begin
        Null;
        Select
            Sum(shift_hrs),
            Sum(act_wrkhrs),
            Sum(sat_wrkhrs),
            Sum(sun_wrkhrs),
            Sum(hh_wrkhrs),
            Sum(sat_day),
            Sum(sun_day),
            Sum(hh_day)
        Into
            param_tar_wrk_hrs,
            param_act_wrk_hrs,
            param_sat_wrk_hrs,
            param_sun_wrk_hrs,
            param_hh_wrk_hrs,
            param_sat_wrk_days,
            param_sun_wrk_days,
            param_hh_wrk_days
        From
            (
                Select
                    shift_hrs,
                    act_wrkhrs,
                    sat_wrkhrs,
                    sun_wrkhrs,
                    hh_wrkhrs,
                    Case
                        When sat_wrkhrs > 0 Then
                            1
                        Else
                            0
                    End As sat_day,
                    Case
                        When sun_wrkhrs > 0 Then
                            1
                        Else
                            0
                    End As sun_day,
                    Case
                        When hh_wrkhrs > 0 Then
                            1
                        Else
                            0
                    End As hh_day
                From
                    (
                        With shift As (
                            Select
                                shiftcode,
                                ( ( ( ( ( ( timeout_hh * 60 ) + nvl(timeout_mn, 0) ) - ( ( timein_hh * 60 ) + timein_mn ) ) - nvl
                                (lunch_mn, 0) ) ) / 60 ) shift_hrs
                            From
                                ss_shiftmast
                        )
                        Select
                            b.shift_hrs,
                            Case
                                When holiday_type = 0 Then
                                    n_workedhrs(param_empno, d_date, a.shiftcode)
                                Else
                                    0
                            End As act_wrkhrs,
                            Case
                                When holiday_type = 1 Then
                                    n_workedhrs(param_empno, d_date, a.shiftcode)
                                Else
                                    0
                            End As sat_wrkhrs,
                            Case
                                When holiday_type = 2 Then
                                    n_workedhrs(param_empno, d_date, a.shiftcode)
                                Else
                                    0
                            End As sun_wrkhrs,
                            Case
                                When holiday_type = 3 Then
                                    n_workedhrs(param_empno, d_date, a.shiftcode)
                                Else
                                    0
                            End As hh_wrkhrs
                        From
                            (
                                Select
                                    d_date,
                                    getshift1(param_empno, d_date) As shiftcode,
                                    get_holiday(d_date) As holiday_type
                                From
                                    ss_days_details
                                Where
                                    d_date <= ( param_edate ) And d_date >= param_bdate
                            ) a,
                            shift b
                        Where
                            a.shiftcode = b.shiftcode (+)
                    )
            );

    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure populate_data (
        param_yyyymm    Varchar2,
        param_success   Out   Varchar2,
        param_message   Out   Varchar2
    ) As

        Cursor cur_emp_list (
            cp_month_bdate Date
        ) Is
        Select
            empno,
            name,
            parent,
            grade,
            greatest(doj, cp_month_bdate) bdate,
            least(nvl(dol, last_day(cp_month_bdate)), last_day(cp_month_bdate)) edate
        From
            ss_emplmast
        Where
            ( ( status = 1 And doj < last_day(cp_month_bdate) ) Or ( status = 0 And dol Between cp_month_bdate And last_day(cp_month_bdate
            ) ) ) And emptype In (
                'R',
                'S',
                'C'
            ) order by empno;

        v_key_id           Varchar2(5);
        v_bdate            Date;
        v_edate            Date;
        Type typ_tab_emp Is
            Table Of cur_emp_list%rowtype;
        tab_emp            typ_tab_emp;
        v_master_created   Varchar2(2);
    Begin
        v_master_created := 'KO';
        v_key_id := dbms_random.string('X', 5);
        Delete From ss_worked_hrs_mast
        Where
            yyyymm = param_yyyymm;

        Delete From ss_worked_hrs_detail
        Where
            yyyymm = param_yyyymm;

        Commit;
        Insert Into ss_worked_hrs_mast (
            key_id,
            yyyymm,
            modified_on,
            proc_status
        ) Values (
            v_key_id,
            param_yyyymm,
            sysdate,
            'WP'
        );

        v_master_created := 'OK';
        Commit;
        v_bdate := trunc(to_date(param_yyyymm, 'yyyymm'), 'month');
        v_edate := last_day(v_bdate);
        Open cur_emp_list(v_bdate);
        Loop
            Fetch cur_emp_list Bulk Collect Into tab_emp Limit 100;
            For i In 1..tab_emp.count Loop Declare
                v_act_wrk_hrs    Number;
                v_tar_wrk_hrs    Number;
                v_sat_wrk_hrs    Number;
                v_sun_wrk_hrs    Number;
                v_hh_wrk_hrs     Number;
                v_sat_wrk_days   Number;
                v_sun_wrk_days   Number;
                v_hh_wrk_days    Number;
                v_success        Varchar2(10);
                v_message        Varchar2(2000);
            Begin
                get_emp_work_hrs(tab_emp(i).empno, tab_emp(i).bdate, tab_emp(i).edate, v_act_wrk_hrs, v_tar_wrk_hrs,
                                 v_sat_wrk_hrs, v_sun_wrk_hrs, v_hh_wrk_hrs, v_sat_wrk_days, v_sun_wrk_days,
                                 v_hh_wrk_days, v_success, v_message);

                If v_success = 'KO' Then
                    Continue;
                End If;
                Insert Into ss_worked_hrs_detail (
                    key_id,
                    yyyymm,
                    empno,
                    tar_work_hrs,
                    act_work_hrs,
                    act_sat_work_hrs,
                    act_sun_work_hrs,
                    act_hh_work_hrs,
                    act_sat_work_days,
                    act_sun_work_days,
                    act_hh_work_days
                ) Values (
                    v_key_id,
                    param_yyyymm,
                    tab_emp(i).empno,
                    v_tar_wrk_hrs,
                    ( trunc(v_act_wrk_hrs / 15) * 15 ) / 60,
                    ( trunc(v_sat_wrk_hrs / 15) * 15 ) / 60,
                    ( trunc(v_sun_wrk_hrs / 15) * 15 ) / 60,
                    ( trunc(v_hh_wrk_hrs / 15) * 15 ) / 60,
                    v_sat_wrk_days,
                    v_sun_wrk_days,
                    v_hh_wrk_days
                );

                Commit;
            End;
            End Loop;

            Exit When cur_emp_list%notfound;
        End Loop;

        Update ss_worked_hrs_mast
        Set
            proc_status = 'OK'
        Where
            key_id = v_key_id;

        param_success := 'OK';
    Exception
        When Others Then
            If v_master_created = 'OK' Then
                Update ss_worked_hrs_mast
                Set
                    proc_status = 'KO'
                Where
                    key_id = v_key_id;

                Commit;
            End If;

            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End populate_data;

End sum_wrk_hrs;
/
---------------------------
--Changed PACKAGE BODY
--SS_TS_LEAVE_COMPARE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SS_TS_LEAVE_COMPARE" As

    Function get_emp_ss_leave_4_month (
        p_empno Varchar2,
        p_yyyymm Varchar2
    ) Return Number Is
        v_retval Number;
    Begin
        Select
            Sum(aa.nu_leaveperiod)
        Into v_retval
        From
            (
                Select
                    empno,
                    leavetype,
                    app_no,
                    nu_bdate,
                    nu_edate,
                    leave_4_mm - holiday_count As nu_leaveperiod,
                    bdate,
                    edate,
                    leave_period
                From
                    (
                        Select
                            empno,
                            leavetype,
                            app_no,
                            1 + nu_edate - nu_bdate leave_4_mm,
                            nu_bdate,
                            nu_edate,
                            leave_period,
                            bdate,
                            edate,
                            (
                                Select
                                    Count(*)
                                From
                                    ss_holidays
                                Where
                                    holiday Between a.nu_bdate And a.nu_edate
                            ) As holiday_count
                        From
                            (
                                Select
                                    empno,
                                    leavetype,
                                    app_no,
                                    Case
                                        When To_Char(bdate, 'yyyymm') <> p_yyyymm Then
                                            To_Date(p_yyyymm, 'yyyymm')
                                        Else
                                            bdate
                                    End nu_bdate,
                                    Case
                                        When To_Char(edate, 'yyyymm') <> p_yyyymm Then
                                            Last_Day(To_Date(p_yyyymm, 'yyyymm'))
                                        Else
                                            edate
                                    End nu_edate,
                                    edate,
                                    bdate,
                                    leaveperiod / 8 * - 1 As leave_period
                                From
                                    ss_leaveledg
                                Where
                                    ( ( To_Char(bdate, 'yyyymm') = p_yyyymm
                                        Or To_Char(Nvl(edate, bdate), 'yyyymm') = p_yyyymm )
                                      Or ( To_Date(p_yyyymm, 'yyyymm') Between bdate And edate
                                           And Last_Day(To_Date(p_yyyymm, 'yyyymm')) Between bdate And edate ) )
                                    And edate Is Not Null
                                    And bdate <> edate
                                    And To_Char(bdate, 'yyyymm') <> To_Char(edate, 'yyyymm')
                                    And adj_type In (
                                        'LA',
                                        'LC'
                                    )
                                    And db_cr                              = 'D'
                                    And empno                              = p_empno
                            ) a
                    )
                Union
                Select
                    empno,
                    leavetype,
                    app_no,
                    bdate,
                    edate,
                    leaveperiod / 8 * - 1 leave_period,
                    bdate,
                    edate,
                    leaveperiod / 8 * - 1 leave_period
                From
                    ss_leaveledg
                Where
                    bdate Between To_Date(p_yyyymm, 'yyyymm') And Last_Day(To_Date(p_yyyymm, 'yyyymm'))
                    And Nvl(edate, bdate) Between To_Date(p_yyyymm, 'yyyymm') And Last_Day(To_Date(p_yyyymm, 'yyyymm'))
                    And adj_type In (
                        'LA',
                        'LC'
                    )
                    And db_cr  = 'D'
                    And empno  = p_empno
            ) aa,
            ss_emplmast         bb,
            ss_engg_costcodes   cc
        Where
            aa.empno = bb.empno
            And ( bb.parent = cc.costcode )
            And aa.empno = p_empno;

        Return nvl(v_retval,0);
    Exception
        When Others Then
            Return 0;
    End get_emp_ss_leave_4_month;

    Function get_emp_ts_leave_4_month (
        p_empno Varchar2,
        p_yyyymm Varchar2
    ) Return Number As
        v_adj_hrs      Number;
        v_normal_hrs   Number;
    Begin
        Begin
            Select
                Sum(total)
            Into v_normal_hrs
            From
                ss_time_daily a
            Where
                Substr(projno, 1, 5) In (
                    '11114',
                    '22224',
                    '33334',
                    '22225'
                )
                And wpcode  = '1'
                And yymm    = p_yyyymm
                And empno   = p_empno;

        Exception
            When others Then
                v_normal_hrs := 0;
        End;

        Begin
            Select
                Sum(total)
            Into v_adj_hrs
            From
                ss_time_daily a
            Where
                Substr(projno, 1, 5) In (
                    '11114',
                    '22224',
                    '33334',
                    '22225'
                )
                And wpcode  = '4'
                And yymm    = To_Char(Add_Months(To_Date(p_yyyymm, 'yyyymm'), 1), 'yyyymm')
                And empno   = p_empno;

        Exception
            When others Then
                v_adj_hrs := 0;
        End;

        Return (nvl(v_normal_hrs,0) + nvl(v_adj_hrs,0))/8;
    Exception
        When Others Then
            Return 0;
    End get_emp_ts_leave_4_month;

End ss_ts_leave_compare;
/
---------------------------
--Changed PACKAGE BODY
--SS_MAIL
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SS_MAIL" As

    Procedure set_msg(param_obj_id     Varchar2,
                      param_apprl_desc Varchar2,
                      param_obj_name   Varchar2) As
    Begin
        --Discard
        --pkg_var_sub := replace(c_subject,'null' || chr(38) || '',c_obj_nm_tr);
        --pkg_var_msg := replace(c_message,'null' || chr(38) || '',c_obj_nm_tr);

        pkg_var_sub := replace(pkg_var_sub, 'null' || chr(38) || '', param_apprl_desc);
        pkg_var_msg := replace(pkg_var_msg, 'null' || chr(38) || '', param_apprl_desc);

        --pkg_var_msg := replace(pkg_var_msg,'null' || chr(38) || '',param_tr_id);
        --pkg_var_sub := replace(pkg_var_sub,'null' || chr(38) || '',param_tr_id);
    End;

    Procedure set_new_leave_app_subject(param_empno    In Varchar2,
                                        param_emp_name In Varchar2) As
    Begin
        pkg_var_sub := replace(c_leave_app_subject, c_empno, param_empno);
        pkg_var_sub := replace(pkg_var_sub, c_emp_name, param_emp_name);
    End;

    Procedure set_new_leave_app_body(
        param_empno        Varchar2,
        param_emp_name     Varchar2,
        param_leave_period Number,
        param_app_no       Varchar2,
        param_mail_to_hod  Varchar2
    )
    As
        v_leave_period Number;
        v_approval_url Varchar2(200);
    Begin
        If param_mail_to_hod = 'OK' Then
            v_approval_url := 'http://tplapps02.ticb.comp/TCMPLApp/SelfService/Attendance/HoDApprovalLeaveIndex';
        Else
            v_approval_url := 'http://tplapps02.ticb.comp/TCMPLApp/SelfService/Attendance/LeadApprovalLeaveIndex';
        End If;
        v_leave_period := param_leave_period / 8;
        pkg_var_msg    := replace(c_leave_app_msg, '');
        pkg_var_msg    := replace(pkg_var_msg, c_app_no, param_app_no);
        pkg_var_msg    := replace(pkg_var_msg, c_approval_url, v_approval_url);
        pkg_var_msg    := replace(pkg_var_msg, c_emp_name, param_emp_name);
        pkg_var_msg    := replace(pkg_var_msg, c_empno, param_empno);
        pkg_var_msg    := replace(pkg_var_msg, c_leave_period, param_leave_period);
    End;

    Procedure send_email_2_user_async(
        param_to_mail_id In Varchar2
    )
    As
    Begin
        dbms_scheduler.create_job(
            job_name            => 'SEND_MAIL_JOB_4_SELFSERVICE',
            job_type            => 'STORED_PROCEDURE',
            job_action          => 'ss_mail.send_mail_2_user_nu',
            number_of_arguments => 3,
            enabled             => false,
            job_class           => 'TCMPL_JOB_CLASS',
            comments            => 'to send Email'
        );

        dbms_scheduler.set_job_argument_value(
            job_name          => 'SEND_MAIL_JOB_4_SELFSERVICE',
            argument_position => 1,
            argument_value    => param_to_mail_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name          => 'SEND_MAIL_JOB_4_SELFSERVICE',
            argument_position => 2,
            argument_value    => pkg_var_sub
        );
        dbms_scheduler.set_job_argument_value(
            job_name          => 'SEND_MAIL_JOB_4_SELFSERVICE',
            argument_position => 3,
            argument_value    => pkg_var_msg
        );
        dbms_scheduler.enable('SEND_MAIL_JOB_4_SELFSERVICE');
    End;

    Procedure send_email_2_user(
        param_to_mail_id In Varchar2
    ) As
        l_mail_conn utl_smtp.connection;
        l_boundary  Varchar2(50) := '----=*#abc1234321cba#*=';
    Begin

        If Trim(param_to_mail_id) Is Null Then
            Return;
        End If;

        l_mail_conn := utl_smtp.open_connection(c_smtp_mail_server, 25);
        utl_smtp.helo(l_mail_conn, c_smtp_mail_server);
        utl_smtp.mail(l_mail_conn, c_sender_mail_id);
        utl_smtp.rcpt(l_mail_conn, param_to_mail_id);
        utl_smtp.open_data(l_mail_conn);
        utl_smtp.write_data(l_mail_conn, 'Date: ' || to_char(sysdate, 'DD-MON-YYYY HH24:MI:SS') || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'To: ' || param_to_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'From: ' || c_sender_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Subject: ' || pkg_var_sub || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, 'MIME-Version: 1.0' || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: multipart/alternative; boundary="' || l_boundary || '"' || utl_tcp.
        crlf ||
            utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: text/plain; charset="iso-8859-1"' || utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, pkg_var_msg);
        utl_smtp.write_data(l_mail_conn, utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || '--' || utl_tcp.crlf);
        utl_smtp.close_data(l_mail_conn);

        utl_smtp.quit(l_mail_conn);

    End send_email_2_user;

    Procedure send_msg As
    Begin
        /* TODO implementation required */
        Null;
    End send_msg;

    Procedure send_msg_new_leave_app(param_app_no      Varchar2,
                                     param_success Out Number,
                                     param_message Out Varchar2) As
        v_empno        Varchar2(5);
        v_mngr         Varchar2(5);
        v_mngr_email   Varchar2(60);
        v_lead_empno   Varchar2(5);
        v_emp_name     Varchar2(60);
        v_leave_period Number;
        v_mail_to_hod  Varchar2(2) := 'OK';
    Begin
        Select
            empno, leaveperiod / 8, lead_apprl_empno
        Into
            v_empno, v_leave_period, v_lead_empno
        From
            ss_leaveapp
        Where
            app_no = param_app_no;

        Select
            name, mngr
        Into
            v_emp_name, v_mngr
        From
            ss_emplmast
        Where
            empno = v_empno;
        If v_lead_empno <> 'None' Then
            v_mngr        := v_lead_empno;
            v_mail_to_hod := 'KO';
            --v_mngr := '02320';
        End If;

        Select
            email
        Into
            v_mngr_email
        From
            ss_emplmast
        Where
            empno = v_mngr;

        set_new_leave_app_subject(v_empno, v_emp_name);

        set_new_leave_app_body(
            param_empno        => v_empno,
            param_emp_name     => v_emp_name,
            param_leave_period => v_leave_period,
            param_app_no       => param_app_no,
            param_mail_to_hod  => v_mail_to_hod
        );

        --send_email_2_user(v_mngr_email);
        send_email_2_user_async(v_mngr_email);
    Exception
        When Others Then
            param_success := ss.failure;
            param_message := 'Error : ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure send_mail(param_to_mail_id  Varchar2,
                        param_subject     Varchar2,
                        param_body        Varchar2,
                        param_success Out Number,
                        param_message Out Varchar2) As

        l_mail_conn utl_smtp.connection;
        l_boundary  Varchar2(50) := '----=*#abc1234321cba#*=';
    Begin

        l_mail_conn   := utl_smtp.open_connection(c_smtp_mail_server, 25);
        utl_smtp.helo(l_mail_conn, c_smtp_mail_server);
        utl_smtp.mail(l_mail_conn, c_sender_mail_id);
        utl_smtp.rcpt(l_mail_conn, param_to_mail_id);
        utl_smtp.open_data(l_mail_conn);
        utl_smtp.write_data(l_mail_conn, 'Date: ' || to_char(sysdate, 'DD-MON-YYYY HH24:MI:SS') || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'To: ' || param_to_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'From: ' || c_sender_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Subject: ' || param_subject || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, 'MIME-Version: 1.0' || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: multipart/alternative; boundary="' || l_boundary || '"' || utl_tcp.
        crlf ||
            utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: text/plain; charset="iso-8859-1"' || utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, replace(param_body, '!nuLine!', utl_tcp.crlf));
        utl_smtp.write_data(l_mail_conn, utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || '--' || utl_tcp.crlf);
        utl_smtp.close_data(l_mail_conn);

        utl_smtp.quit(l_mail_conn);
        param_success := ss.success;
        param_message := 'Email was successfully sent.';
        /*exception
            when others then
                param_success := ss.failure;
                param_message := 'Error : ' || sqlcode || ' - ' || sqlerrm;*/
    End;

    Procedure send_test_email_2_user(
        param_to_mail_id In Varchar2
    ) As
        l_mail_conn utl_smtp.connection;
        l_boundary  Varchar2(50) := '----=*#abc1234321cba#*=';
    Begin

        If Trim(param_to_mail_id) Is Null Then
            Return;
        End If;

        l_mail_conn := utl_smtp.open_connection(c_smtp_mail_server, 25);
        utl_smtp.helo(l_mail_conn, c_smtp_mail_server);
        utl_smtp.mail(l_mail_conn, c_sender_mail_id);
        utl_smtp.rcpt(l_mail_conn, param_to_mail_id);
        utl_smtp.open_data(l_mail_conn);
        utl_smtp.write_data(l_mail_conn, 'Date: ' || to_char(sysdate, 'DD-MON-YYYY HH24:MI:SS') || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'To: ' || param_to_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'From: ' || c_sender_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Subject: ' || 'Test by Deven' || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, 'MIME-Version: 1.0' || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: multipart/alternative; boundary="' || l_boundary || '"' || utl_tcp.
        crlf ||
            utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: text/plain; charset="iso-8859-1"' || utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, 'Test By Deven');
        utl_smtp.write_data(l_mail_conn, utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || '--' || utl_tcp.crlf);
        utl_smtp.close_data(l_mail_conn);

        utl_smtp.quit(l_mail_conn);

    End send_test_email_2_user;

    Procedure send_html_mail(param_to_mail_id  Varchar2,
                             param_subject     Varchar2,
                             param_body        Varchar2,
                             param_success Out Number,
                             param_message Out Varchar2) As

        l_mail_conn utl_smtp.connection;
        l_boundary  Varchar2(50) := '----=*#abc1234321cba#*=';
    Begin

        l_mail_conn   := utl_smtp.open_connection(c_smtp_mail_server, 25);
        utl_smtp.helo(l_mail_conn, c_smtp_mail_server);
        utl_smtp.mail(l_mail_conn, c_sender_mail_id);
        utl_smtp.rcpt(l_mail_conn, param_to_mail_id);
        utl_smtp.open_data(l_mail_conn);
        utl_smtp.write_data(l_mail_conn, 'Date: ' || to_char(sysdate, 'DD-MON-YYYY HH24:MI:SS') || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'To: ' || param_to_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'From: ' || c_sender_mail_id || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Subject: ' || param_subject || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, 'MIME-Version: 1.0' || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: multipart/alternative; boundary="' || l_boundary || '"' || utl_tcp.
        crlf ||
            utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || utl_tcp.crlf);
        utl_smtp.write_data(l_mail_conn, 'Content-Type: text/html; charset="iso-8859-1"' || utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, replace(param_body, '!nuLine!', utl_tcp.crlf));
        utl_smtp.write_data(l_mail_conn, utl_tcp.crlf || utl_tcp.crlf);

        utl_smtp.write_data(l_mail_conn, '--' || l_boundary || '--' || utl_tcp.crlf);
        utl_smtp.close_data(l_mail_conn);

        utl_smtp.quit(l_mail_conn);
        param_success := ss.success;
        param_message := 'Email was successfully sent.';
    Exception
        When Others Then
            param_success := ss.failure;
            param_message := 'Error : ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure send_mail_2_user_nu(
        param_to_mail_id In Varchar2,
        param_subject    In Varchar2,
        param_body       In Varchar2
    ) As
        v_success Varchar2(10);
        v_message Varchar2(1000);
    Begin

        send_mail_from_api(
            p_mail_to      => param_to_mail_id,
            p_mail_cc      => Null,
            p_mail_bcc     => Null,
            p_mail_subject => 'SELFSERVICE : ' + param_subject,
            p_mail_body    => param_body,
            p_mail_profile => 'SELFSERVICE',
            p_mail_format  => 'HTML',
            p_success      => v_success,
            p_message      => v_message
        );
        Return;
        /*
        utl_mail.send(
            sender     => c_sender_mail_id,
            recipients => param_to_mail_id,
            subject    => param_subject,
            message    => param_body,
            mime_type  => 'text; charset=us-ascii'
        );
        */
    End;

    Procedure send_mail_leave_reject_async(
        p_app_id In Varchar2
    ) As
        v_key_id   Varchar2(8);
        v_job_name Varchar2(30);
    Begin

        v_key_id   := dbms_random.string('X', 8);
        v_job_name := 'MAIL_JOB_4_SS_' || v_key_id;
        dbms_scheduler.create_job(
            job_name            => v_job_name,
            job_type            => 'STORED_PROCEDURE',
            job_action          => 'ss_mail.send_mail_leave_rejected',
            number_of_arguments => 1,
            enabled             => false,
            job_class           => 'TCMPL_JOB_CLASS',
            comments            => 'to send Email'
        );

        dbms_scheduler.set_job_argument_value(
            job_name          => v_job_name,
            argument_position => 1,
            argument_value    => p_app_id
        );
        dbms_scheduler.enable(v_job_name);
    End;

    Procedure send_mail_leave_rejected(
        p_app_id Varchar2
    ) As
        rec_rejected_leave ss_leaveapp_rejected%rowtype;
        v_emp_email        ss_emplmast.email%Type;
        v_mail_body        Varchar2(4000);
        v_mail_subject     Varchar2(400);
        v_success          Varchar2(10);
        v_message          Varchar2(1000);
        e                  Exception;

        Pragma exception_init(e, -20100);
    Begin

        Select
            *
        Into
            rec_rejected_leave
        From
            ss_leaveapp_rejected
        Where
            Trim(app_no) = Trim(p_app_id);
        Select
            email
        Into
            v_emp_email
        From
            ss_emplmast
        Where
            empno      = rec_rejected_leave.empno
            And status = 1;
        If Trim(v_emp_email) Is Null Then
            raise_application_error(-20100, 'Employee email address not found. Mail not sent.');
        End If;
        v_mail_body    := c_leave_rejected_body;
        v_mail_subject := 'SELFSERVICE : Leave application rejected';

        v_mail_body    := replace(v_mail_body, '@app_id', p_app_id);
        v_mail_body    := replace(v_mail_body, '@app_date', to_char(rec_rejected_leave.app_date, 'dd-Mon-yyyy'));
        v_mail_body    := replace(v_mail_body, '@start_date', to_char(rec_rejected_leave.bdate, 'dd-Mon-yyyy'));
        v_mail_body    := replace(v_mail_body, '@end_date', to_char(nvl(rec_rejected_leave.edate, rec_rejected_leave.bdate),
                                                                    'dd-Mon-yyyy'));
        v_mail_body    := replace(v_mail_body, '@leave_period', rec_rejected_leave.leaveperiod / 8);
        v_mail_body    := replace(v_mail_body, '@leave_type', rec_rejected_leave.leavetype);
        v_mail_body    := replace(v_mail_body, '@lead_approval', ss.approval_text(rec_rejected_leave.lead_apprl));
        v_mail_body    := replace(v_mail_body, '@lead_remarks', rec_rejected_leave.lead_reason);
        v_mail_body    := replace(v_mail_body, '@hod_approval', ss.approval_text(rec_rejected_leave.hod_apprl));
        v_mail_body    := replace(v_mail_body, '@hod_remarks', rec_rejected_leave.hodreason);
        v_mail_body    := replace(v_mail_body, '@hrd_approval', ss.approval_text(rec_rejected_leave.hrd_apprl));
        v_mail_body    := replace(v_mail_body, '@hrd_remarks', rec_rejected_leave.hrdreason);

        send_mail_from_api(
            p_mail_to      => v_emp_email,
            p_mail_cc      => Null,
            p_mail_bcc     => Null,
            p_mail_subject => v_mail_subject,
            p_mail_body    => v_mail_body,
            p_mail_profile => 'SELFSERVICE',
            p_mail_format  => 'HTML',
            p_success      => v_success,
            p_message      => v_message
        );
    End send_mail_leave_rejected;

End ss_mail;
/
---------------------------
--Changed PACKAGE BODY
--SS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SS" as

    function ss_false return number as
    begin
    /* TODO implementation required */
        return n_false;
    end ss_false;

    function ss_true return number as
    begin
        return n_true;
    end;

    function ot_approved return number as
    begin
        return n_ot_approved;
    end;

    function ot_rejected return number as
    begin
        return n_ot_rejected;
    end;

    function ot_re_apply return number as
    begin
        return n_ot_re_apply;
    end;

    function ot_pending return number as
    begin
        return n_ot_pending;
    end;

    function ot_lead_none return varchar2 as
    begin
        return c_ot_lead_none;
    end;

    function ot_apprl_none return number as
    begin
        return n_ot_apprl_none;
    end;

    function approved return number as
    begin
        return n_ot_approved;
    end;

    function rejected return number as
    begin
        return n_ot_rejected;
    end;

    function disapproved return number as
    begin
        return n_disapproved;
    end;

    function re_apply return number as
    begin
        return n_ot_re_apply;
    end;

    function pending return number as
    begin
        return n_ot_pending;
    end;


    function lead_none return varchar2 as
    begin
        return c_ot_lead_none;
    end;

    function apprl_none return number as
    begin
        return n_ot_apprl_none;
    end;

    function success return number as
    begin
        return n_success;
    end;

    function failure return number as
    begin
        return n_failure;
    end;

    function warning return number as
    begin
        return n_warning;
    end;

    function rep_srv_nm return varchar2 as
    begin
        return c_rep_srv_nm;
    end rep_srv_nm;

    function rep_srv_url return varchar2 as
    begin
        return c_rep_srv_url;
    end rep_srv_url;

    function rep_env_id return varchar2 as
    begin
        return c_rep_env_id;
    end rep_env_id;

    function webutil_upload_dir return varchar2 as
    begin
        return c_webutil_upload_dir;
    end webutil_upload_dir;

    function opening_bal return number as
    begin
        return n_opening_bal;
    end;

    function closing_bal return number as
    begin
        return n_closing_bal;
    end;

    function application_url return varchar2 is
    begin
        return c_appl_url;
    end;

    function approval_text (
        param_status number
    ) return varchar2 is
        v_status    number;
        v_ret_val   varchar2(30);
    begin
        v_status   := nvl(param_status,ss.pending);
        case
            when v_status = ss.pending then
                v_ret_val   := 'Pending';
            when v_status = ss.approved then
                v_ret_val   := 'Approved';
            when v_status = ss.disapproved then
                v_ret_val   := 'Rejected';
            when v_status = ss.rejected then
                v_ret_val   := 'Rejected';
            when v_status = ss.ot_apprl_none then
                v_ret_val   := 'NONE';
            else
                v_status   := '';
        end case;

        return v_ret_val;
    end;

    function csv_to_table (
        p_list in varchar2
    ) return typ_str_tab
        pipelined
    as
        l_string        long := p_list || ',';
        l_comma_index   pls_integer;
        l_index         pls_integer := 1;
    begin
        loop
            l_comma_index   := instr(l_string,',',l_index);
            exit when l_comma_index = 0;
            pipe row ( trim(substr(l_string,l_index,l_comma_index - l_index) ) );
            l_index         := l_comma_index + 1;
        end loop;

        return;
    end csv_to_table;

    function get_empno (
        param_user_id varchar2
    ) return varchar2 is
        v_user_domain   varchar2(30);
        v_user_id       varchar2(30);
        v_empno         varchar2(5);
    begin
        if instr(param_user_id,'\') > 0 then
            v_user_domain   := substr(param_user_id,1,instr(param_user_id,'\') - 1);

            v_user_id       := substr(param_user_id,instr(param_user_id,'\') + 1);
            begin
                select
                    a.empno
                into v_empno
                from
                    userids a,
                    ss_emplmast b
                where
                    a.empno = b.empno
                    and userid = upper(trim(v_user_id) )
                    and domain = upper(trim(v_user_domain) )
                    and b.status = 1;

                return v_empno;
            exception
                when others then
                    return 'FALSE';
            end;

        elsif instr(param_user_id,'@') > 0 then
            select
                empno
            into v_empno
            from
                ss_emplmast
            where
                email = param_user_id
                and status = 1;

            return v_empno;
        end if;

        return nvl(v_empno,'XYZ11');
    end;

    function ldt_onduty return number is
    begin
        return n_ldt_onduty;
    end;

    function ldt_missed_punch return number is
    begin
        return n_ldt_missed_punch;
    end;

    function ldt_depu return number is
    begin
        return n_ldt_depu;
    end;

    function ldt_leave return number is
    begin
        return n_ldt_leave;
    end;

end ss;
/
---------------------------
--Changed PACKAGE BODY
--SELF_ATTENDANCE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SELF_ATTENDANCE" As

    Function valid_office_ip (
        param_ip Varchar2
    ) Return Varchar2 Is
        v_ip_to_include   Char(11);
        v_ip_to_exclude   Char(15);
        v_include_count   Number;
        v_exclude_count   Number;
    Begin
        v_ip_to_include   := Trim(Trailing '.' From Substr(param_ip, 1, Instr(param_ip, '.', -1)));

        v_ip_to_exclude   := param_ip;
        Select
            Count(*)
        Into v_include_count
        From
            ss_tcmpl_ip_mast
        Where
            ip_prefix = v_ip_to_include;

        Select
            Count(*)
        Into v_exclude_count
        From
            ss_tcmpl_ip_skip
        Where
            ip = v_ip_to_exclude;

        If v_include_count = 0 Or v_exclude_count > 0 Then
            Return 'KO';
        Else
            Return 'OK';
        End If;

    Exception
        When Others Then
            Return 'KO';
    End;

    Procedure add_punch (
        param_empno     Varchar2,
        param_ip        Varchar2,
        param_success   Out             Varchar2,
        param_message   Out             Varchar2
    ) As

        v_ip_to_include      Char(11);
        v_ip_to_exclude      Char(15);
        v_count              Number;
        v_first_punch_time   Date;
        v_last_punch_time    Date;
        v_diff               Number;
        v_now_date           Date;
        v_punch_entry_msg    Varchar2(100);
        v_include_count      Number;
        v_exclude_count      Number;
        v_is_ip_valid        Varchar2(10);
    Begin
        v_is_ip_valid   := valid_office_ip(param_ip);
        v_now_date      := Sysdate;
        If Trunc(v_now_date) >= To_Date('8-Oct-2020', 'dd-Mon-yyyy') Then
            param_success   := 'KO';
            param_message   := 'Err -  This utility has been disabled.';
            return;
        End If;
        /*
        v_ip_to_exclude   := param_ip;
        v_ip_to_include   := Trim(Trailing '.' From Substr(param_ip, 1, Instr(param_ip, '.', -1)));

        Select
            Count(*)
        Into v_include_count
        From
            ss_tcmpl_ip_mast
        Where
            ip_prefix = v_ip_to_include;

        Select
            Count(*)
        Into v_exclude_count
        From
            ss_tcmpl_ip_skip
        Where
            ip = v_ip_to_exclude;

        If v_include_count = 0 Or v_exclude_count > 0 Then
            param_success   := 'KO';
            param_message   := 'This utility is applicable from selected PC''s in TCMPL Mumbai Office';
            return;
        End If;
        */

        If v_is_ip_valid = 'KO' Then
            param_success   := 'KO';
            param_message   := 'This utility is applicable from selected PC''s in TCMPL Mumbai Office';
            return;
        End If;

        Select
            Count(*)
        Into v_count
        From
            ss_punch_manual
        Where
            empno = param_empno
            And pdate = Trunc(v_now_date);

        If v_count = 0 Then
            v_punch_entry_msg   := 'IN entry with 5min early grace, has been successfully recorded.';
            v_now_date          := v_now_date - ( 5 / 1440 );
        Else
            v_punch_entry_msg   := 'OUT entry with 5min later grace, has been successfully recorded.';
            v_now_date          := v_now_date + ( 5 / 1440 );
        End If;

        Begin
            Select
                Min(pdate_time),
                Max(pdate_time),
                Count(*)
            Into
                v_first_punch_time,
                v_last_punch_time,
                v_count
            From
                ss_punch_manual
            Where
                empno = param_empno
                And pdate = Trunc(v_now_date);

        Exception
            When Others Then
                v_count := 0;
        End;

        v_diff          := ( v_now_date - v_last_punch_time ) * 1440;
        If v_diff < 5 Then
            param_success   := 'KO';
            param_message   := 'Your last entry "' || To_Char(v_last_punch_time, 'dd-Mon-yyyy HH24:mi') || '". Please try this utility after '
            || To_Char(v_last_punch_time, 'dd-Mon-yyyy HH24:mi');

            return;
        End If;

        If v_count > 1 Then
            Delete From ss_punch_manual
            Where
                empno = param_empno
                And pdate = Trunc(v_now_date)
                And pdate_time <> v_first_punch_time;

            Commit;
        End If;

        Insert Into ss_punch_manual (
            empno,
            hh,
            mm,
            pdate,
            falseflag,
            dd,
            mon,
            yyyy,
            mach,
            ss,
            pdate_time
        ) Values (
            param_empno,
            To_Char(v_now_date, 'HH24'),
            To_Char(v_now_date, 'MI'),
            Trunc(v_now_date),
            1,
            To_Char(v_now_date, 'dd'),
            To_Char(v_now_date, 'MM'),
            To_Char(v_now_date, 'YYYY'),
            param_ip,
            To_Char(v_now_date, 'SS'),
            v_now_date
        );

        param_success   := 'OK';
        param_message   := v_punch_entry_msg;
    Exception
        When dup_val_on_index Then
            param_success   := 'KO';
            param_message   := 'Err - Entry already recorded. Please try after 5 min';
        When Others Then
            param_success   := 'KO';
            param_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End add_punch;

    Procedure get_emp_attendance (
        param_empno      Varchar2,
        param_name       Out              Varchar2,
        param_pdate      Out              Varchar2,
        param_in_time    Out              Varchar2,
        param_out_time   Out              Varchar2,
        param_success2   Out              Varchar2,
        param_message2   Out              Varchar2
    ) As

        v_first_punch   Varchar2(5);
        v_last_punch    Varchar2(5);
        v_now_date      Date := Sysdate;
        v_name          Varchar2(60);
    Begin
        param_pdate      := To_Char(v_now_date, 'dd-Mon-yyyy');
        Select
            name
        Into v_name
        From
            ss_emplmast
        Where
            empno = param_empno;

        param_name       := v_name;
        param_success2   := 'OK';
        Begin
            Select
                To_Char(Min(pdate_time), 'hh24:mi'),
                To_Char(Max(pdate_time), 'hh24:mi')
            Into
                param_in_time,
                param_out_time
            From
                ss_punch_manual
            Where
                empno = param_empno
                And pdate = Trunc(v_now_date);

        Exception
            When Others Then
                param_in_time    := '-';
                param_out_time   := '-';
                param_message2   := 'to register OUT punch.';
                return;
        End;

        If Trim(param_in_time) Is Null Then
            param_in_time    := '';
            param_out_time   := '';
            param_message2   := 'to register IN punch.';
            return;
        End If;

        If param_in_time = param_out_time Then
            param_out_time := '';
        End If;
        param_message2   := 'to register OUT punch.';
    Exception
        When Others Then
            param_success2   := 'KO';
            param_message2   := 'Err - Data could not be retrieved.';
    End;

    Function get_first_punch (
        param_empno Varchar2,
        param_pdate Date
    ) Return Varchar2 As
        v_ret_val   Varchar2(5);
        v_hrs       Varchar2(2);
        v_mn        Varchar2(2);
    Begin
        Select
            hrs,
            mn
        Into
            v_hrs,
            v_mn
        From
            (
                Select
                    Lpad(hh, 2, '0') hrs,
                    Lpad(mm, 2, '0') mn
                From
                    ss_vu_manual_punch
                Where
                    empno = param_empno
                    And pdate = param_pdate
                Order By
                    hh,
                    mm
            )
        Where
            Rownum = 1;

        Return v_hrs || ':' || v_mn;
    Exception
        When Others Then
            Return '';
    End;

    Function get_last_punch (
        param_empno Varchar2,
        param_pdate Date
    ) Return Varchar2 As

        v_ret_val   Varchar2(5);
        v_hrs       Varchar2(2);
        v_mn        Varchar2(2);
        v_count     Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_vu_manual_punch
        Where
            empno = param_empno
            And pdate = param_pdate;

        If v_count < 2 Then
            Return '';
        End If;
        Select
            hrs,
            mn
        Into
            v_hrs,
            v_mn
        From
            (
                Select
                    Lpad(hh, 2, '0') hrs,
                    Lpad(mm, 2, '0') mn
                From
                    ss_vu_manual_punch
                Where
                    empno = param_empno
                    And pdate = param_pdate
                Order By
                    hh Desc,
                    mm Desc
            )
        Where
            Rownum = 1;

        Return v_hrs || ':' || v_mn;
    Exception
        When Others Then
            Return '';
    End;

    Function onduty_pending_approval (
        param_empno Varchar2,
        param_pdate Date
    ) Return Varchar2 As
        v_od ss_ondutyapp%rowtype;
    Begin
        Select
            *
        Into v_od
        From
            ss_ondutyapp
        Where
            type In (
                'MP',
                'IO'
            )
            And hrd_apprl Not In (
                ss.approved,
                ss.rejected
            )
            And hod_apprl <> ss.rejected
            And lead_apprl <> ss.rejected
            And empno  = param_empno
            And pdate  = Trunc(param_pdate);

        If v_od.type = 'MP' Then
            Return 'Missed Punch pending for approval';
        Elsif v_od.type = 'IO' Then
            Return 'Forgetting Punch Card pending for approval';
        End If;

    Exception
        When Others Then
            Return '';
    End;

    Function get_emp_office (
        param_empno Varchar2,
        param_pdate Date
    ) Return Varchar2 As

        v_ip       Varchar2(15);
        v_office   Varchar2(10);
        v_mst      Varchar2(1000);
        v_count    Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_punch_manual
        Where
            empno = param_empno
            And pdate = param_pdate;

        If v_count = 0 Then
            v_office := mis_punch.get_first_punch_office(
                param_empno,
                param_pdate
            );
            Return v_office;
        End If;

        Select
            mach
        Into v_ip
        From
            (
                Select
                    mach
                From
                    ss_punch_manual
                Where
                    empno = param_empno
                    And pdate = param_pdate
                Order By
                    hh,
                    mm
            )
        Where
            Rownum = 1;

        v_ip := Trim(Trailing '.' From Substr(v_ip, 1, Instr(v_ip, '.', -1)));

        Select
            office
        Into v_office
        From
            ss_tcmpl_ip_mast
        Where
            Trim(ip_prefix) = Trim(v_ip);

        Return v_office;
    Exception
        When Others Then
            v_mst := Sqlcode || ' - ' || Sqlerrm;
            Return '';
    End;

    Function non_main_office_cc Return typ_tab_costcode
        Pipelined
    As
        v_costcode_csv   Varchar2(2000);
        tab_costcodes    typ_tab_costcode;
        v_rec_costcode   typ_rec_cc;
    Begin
        v_costcode_csv := '0163,0165,0167,0188,0189,0198,0232,0238,0245,0290,0291,0292,0307';
        Select
            costcode
        Bulk Collect
        Into tab_costcodes
        From
            (
                With data As (
                    Select
                        v_costcode_csv str
                    From
                        dual
                )
                Select
                    Trim(Regexp_Substr(str, '[^,]+', 1, Level)) costcode
                From
                    data
                Connect By
                    Instr(str, ',', 1, Level - 1) > 0
            );
        --return;

        For i In 1..tab_costcodes.count Loop Pipe Row ( tab_costcodes(i) );
        End Loop;
        --return(tab_costcodes);

    Exception
        When Others Then
            Pipe Row ( 'Errr' );
    End;

End self_attendance;
/
---------------------------
--Changed PACKAGE BODY
--SA
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."SA" AS -- Shift Allowance
    --This FUNCTION is used for Shift Allowance calculations
    --This FUNCTION returns shift code for an employee On a particular date

    /*********  F u n c t i o n    G E T S H I F T ***********/
    FUNCTION GetShift4Allowance(pEmpNum In Varchar2, p_Date In Date) RETURN Char IS
      vDD 		Char(2);	
      SCode				Char(2);
      IsHoliday 	Number;
    BEGIN
        vDD := To_Char(p_Date, 'dd');									
        Select Substr(Shift, ((To_number(vDD) * 2) - 1), 2) Into SCode From SS_Muster_4Allowance
          Where empno = Trim(pEmpNum) And mnth = Ltrim(Rtrim(To_Char(p_Date, 'yyyymm')));
        Return SCode;	
    Exception
        When others then
          return 'NA';
    END GetShift4Allowance;
    /*********  F u n c t i o n    G E T S H I F T ***********/


    /*********  F u n c t i o n    G E T S H I F T 4 P U N C H***********/
  Function GetShift4Punch(pEmpNo IN Varchar2, p_Date IN Date) Return Varchar2 IS
      vDD 		Char(2);	
      SCode				Char(2);
      IsHoliday 	Number;
    BEGIN
        vDD := To_Char(p_Date, 'dd');									
        Select Substr(S_Mrk, ((To_number(vDD) * 2) - 1), 2) Into SCode From ss_muster
          Where empno = Trim(pEmpNo) And mnth = Ltrim(Rtrim(To_Char(p_Date, 'yyyymm')));
        Return SCode;	
    Exception
        When others then
          return 'NA';
    END GetShift4Punch;
    /*********  F u n c t i o n    G E T S H I F T 4 P U N C H***********/



    /*********  F u n c t i o n    H r s I n S h i f t _ W r k ***********/
    Function HrsInShift_Wrk(pEmpNum Varchar2,p_Date IN Date,pShiftCode In Varchar2) Return Number As
        vWorkedHours  Number;
        vAvailedLunchBreak Number;
        vRetVal Number;
    Begin
        vWorkedHours := WorkedHrs(pEmpNum,p_Date,pShiftCode);
        vAvailedLunchBreak := AvailedLunchBreak(pEmpNum ,p_Date, pShiftCode );
        vRetVal := vWorkedHours - vAvailedLunchBreak;
        Return vRetVal;
    End HrsInShift_Wrk;
    /*********  F u n c t i o n    H r s I n S h i f t _ W r k ***********/







    /*********  F u n c t i o n    A v a i l e d L u n c h B r e a k ***********/
    Function AvailedLunchBreak(pEmpNo IN Varchar2, p_Date IN Date, pSCode IN Varchar2) Return Number IS
        vRetVal			  Number := 0;
        vParent 			Varchar2(4);
        vStartHH 			Number := 0;
        vStartMN 			Number := 0;
        vEndHH 				Number := 0;
        vEndMN 				Number := 0;
        vFirstPunch 	Number := 0;
        vLastPunch 		Number := 0;
    BEGIN
      vRetVal := availedlunchtime1(pEmpNo,p_date,pSCode);
      return vRetVal;
          /*Select Min(hh*60+mm), Max(hh*60+mm) InTo vFirstPunch, vLastPunch from SS_IntegratedPunch	
             where EmpNo = ltrim(rtrim(pEmpNo)) and PDate = p_Date order by PDate,hhsort,mmsort,hh,mm;
          If Ltrim(Rtrim(pSCode)) = 'OO' Or Ltrim(Rtrim(pSCode)) = 'HH' Then
              If vFirstPunch < 720 And vLastPunch > 820 Then
                  vRetVal := 30;
              End If;
              Return vRetVal;
          End If;

          Select Assign InTo vParent From SS_EmplMast Where EmpNo = Ltrim(RTrim(pEmpNo));

          Select StartHH, StartMN, EndHH, EndMN
            InTo vStartHH, vStartMN, vEndHH, vEndMN
            From SS_LunchMast Where ShiftCode = Ltrim(RTrim(pSCode)) And Parent = Ltrim(RTrim(vParent));


          If vFirstPunch >= (vEndHH * 60) + vEndMN Then
              Return 0;
          ElsIf vLastPunch <= (vStartHH * 60) + vStartMN Then
              Return 0;

          ElsIf vFirstPunch <= (vStartHH * 60) + vStartMN And vLastPunch >= ((vEndHH * 60) + vEndMN) Then
              Return ((vEndHH * 60) + vEndMN) - ((vStartHH * 60) + vStartMN);

          ElsIf (vFirstPunch > (vStartHH * 60) + vStartMN) And (vFirstPunch < (vEndHH * 60) + vEndMN) And vLastPunch >= (vEndHH * 60) + vEndMN Then
              Return ((vEndHH * 60) + vEndMN) - vFirstPunch;

          ElsIf (vFirstPunch < (vStartHH * 60) + vStartMN) And (vLastPunch < (vEndHH * 60) + vEndMN) And vLastPunch >= (vStartHH * 60) + vStartMN Then
              Return vLastPunch - ((vStartHH * 60) + vStartMN);

          ElsIf (vFirstPunch > (vStartHH * 60) + vStartMN) And (vLastPunch < (vEndHH * 60) + vEndMN) Then
              Return vLastPunch - vFirstPunch;

          ElsIf NVL(LTrim(rTrim(vFirstPunch)),0) = 0 Then
              Return 0;
          ElsIf IsLeaveDepuTour(p_Date, pEmpNo) > 0 Then
              Return 0;
          Else
              Return 30;
          End If;
    Exception
      When Others Then
        Return 30;*/
    END AvailedLunchBreak;
    /*********  F u n c t i o n    A v a i l e d L u n c h B r e a k ***********/



    /*********  F u n c t i o n    W o r k e d H r s  ***********/
    FUNCTION WorkedHrs(pEmpNum IN Varchar2, p_Date IN Date, pShiftCode IN Varchar2) Return Number IS

        Cursor C1 is select HH*60+MM As Hrs from SS_IntegratedPunch
          where EmpNo = ltrim(rtrim(pEmpNum))
          and PDate = p_Date Order By PDate,hhsort,mmsort,hh,mm;

        Type recHrs is record (Hrs number);
        Type TabHrs  is table of recHrs index by Binary_Integer;
        vTHrs TabHrs;
        i Number;
        vCntr Number;
        --vTHrs Varchar2(10);
        vPrevHrs Number;
        vTotalHrs Number;
        inTimeHH Number;
        inTimeMN Number;
        vOutTimeHH Number;
        vOutTimeMN Number;
        vAvailedLunchTime Number := 0;
        --vTotalHrs Number;
    BEGIN
      Select TimeIn_HH, TimeIn_Mn, TimeOut_HH, TimeOut_Mn InTo inTimeHH, inTimeMN, vOutTimeHH, vOutTimeMN From SS_ShiftMast Where ShiftCode = Trim(pShiftCode);
      vTotalHrs := 0;
      i := 0;
      For C2 in C1 Loop
          i := vTHrs.Count + 1;
          If C2.Hrs > (vOutTimeHH * 60) + vOutTimeMN Then
              vTHrs(i).Hrs := (vOutTimeHH * 60) + vOutTimeMN ;
              Exit;
          Else
                If (C2.Hrs  < (inTimeHH * 60) + inTimeMN ) And i = 1 Then
                  vTHrs(i).Hrs := (inTimeHH * 60) + inTimeMN ;
                ElsIf C2.Hrs  >= (inTimeHH * 60) + inTimeMN  Then
                  vTHrs(i).Hrs := C2.Hrs;
                End If;
          End If;
      End Loop;
      
      
      vCntr := 0;
      vPrevHrs := 0;
      vTotalHrs := 0;
      If vTHrs.Count > 1 Then
          For i in vTHrs.First..vTHrs.Last Loop
              vCntr := vCntr + 1;
              If Mod(vCntr,2) = 0 Or vCntr = vTHrs.Count Then
                  vTotalHrs := vTotalHrs + (vTHrs(i).Hrs - vPrevHrs);
              End If;
              vPrevHrs := vTHrs(i).Hrs;
          End Loop;
          vAvailedLunchTime := AvailedLunchBreak(pEmpNum,p_Date, pShiftCode);
          vTotalHrs := vTotalHrs - vAvailedLunchTime;
      End If;
      Return vTotalHrs;
    /*Exception
        When Others Then Return 0;*/
    End WorkedHrs;
    /*********  F u n c t i o n    W o r k e d H r s  ***********/


    Function GetPunch(pEmpNo IN Varchar2 , p_Date IN DATE, pSelect IN Number) Return Number As
        vPunchTime Number;
    Begin
        If pSelect = SA.pFirstPunch Then
            Select Min( (HH*60) + mm ) InTo vPunchTime From SS_IntegratedPunch A
                Where Empno = pEmpNo And PDate = trunc(p_Date)
                Order by a.hhsort, a.mmsort, a.hh,a.mm;
        ElsIf pSelect = SA.pLastPunch Then
            Select Max( (HH*60) + mm ) InTo vPunchTime From SS_IntegratedPunch A
                Where Empno = pEmpNo And PDate = trunc(p_Date)
                Order by a.hhsort, a.mmsort, a.hh,a.mm;
        End If;
        Return vPunchTime;
    End GetPunch;
    
    Function FirstPunch Return Number As
    Begin
        Return SA.pFirstPunch;
    End;
        
    Function LastPunch Return Number As
    Begin
        Return SA.pLastPunch;
    End;

    Function GetPrevWrkDay(p_Date IN DATE) Return Date IS
        vDate Date := p_Date;
        vCntr Number;
    Begin
        Loop
            vDate := vDate - 1;
            Select Count(*) InTo vCntr From SS_Holidays Where SS_Holidays.holiday=vDate;
            If vCntr = 0 Then
                Exit;
            End If;
        End Loop;
        Return vDate;
    End GetPrevWrkDay;
    
    Procedure SetPunchDetails4Allowance(pMnth IN Varchar2) AS
        Cursor C1 is Select Holiday From SS_Holidays Where yyyymm = Trim(pMnth);
        vNum Number;
        vDate Date;
        vDay Number;
    Begin
        For C2 In C1 Loop
            vDate := GetPrevWrkDay(C2.Holiday);
            vDay := To_Number(To_Char(C2.Holiday,'dd'));
            dbms_output.put_line (vDay);
			UpDate SS_Muster_4Allowance Set Shift = SubStr(Shift,1,(vDay-1) * 2) || Trim(GetShift4Punch(EmpNo,vDate)) || SubStr(Shift,(vDay * 2)+1)
			Where MNTH = pMnth;
			
			Commit;
        End Loop;
    End SetPunchDetails4Allowance;
    
    Function isShift4Period(pEmpNo IN Varchar2, pBDate IN Date, pEDate IN Date) Return Number IS
        vCounter  Number;
        v_ReturnValue Number := 0;
    Begin
        Select Count(*) InTo vCounter From  (
        Select sa.getshift4allowance(pEmpNo,A.d_Date) As ShiftCode From SS_Days_Details A
          Where A.d_date >= pBDate And A.d_date <= pEDate ) B
          Where B.ShiftCode In (Select ShiftCode From SS_ShiftMast A where A.shift4allowance=1);
        If vCounter > 0 Then
            v_ReturnValue := 1;
        End If;
        Return v_ReturnValue;
    End isShift4Period;
    


--	UpDate SS_Muster Set S_Mrk = SubStr(S_Mrk,1,(v_FirstDay-1) * 2) || LTrim(RTrim(v_ShiftStr)) || SubStr(S_Mrk,(v_LastDay * 2)+1)
--		Where MNTH = To_Char(:Period.EDate,'yyyymm')
--		And EmpNo = LTrim(RTrim(:Period.EmpNo));

    
END;
/
---------------------------
--Changed PACKAGE BODY
--PRINT_LOG_MIS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PRINT_LOG_MIS" as

    procedure generate_html as
          l_xmltype XMLTYPE;
          lHTMLOutput xmltype;
          lXSL         CLOB;
          lRetVal      CLOB;
          param_success varchar2(60);
          param_message varchar2(200);
        begin
          l_xmltype := dbms_xmlgen.getxmltype(
              'select * from 
              (
                  select PARENT, empno, emp_name, USER_NAME, PERIOD, PAGECOUNT
                      from SS_VU_PRINT_LOG_PIVOT where parent=''' || '0106' || '''
               ) 
              pivot (sum(pagecount) for (period) in 
                  (''' || '201505_B_W' || ''' ,''' || '201505_COLOR' || ''' ,'''  || '201504_B_W' || ''',''' || '201504_COLOR' || ''',
                    ''' || '201503_B_W' || ''',''' || '201503_COLOR' || ''',''' || '201502_B_W' || ''',''' || '201502_COLOR' || '''))'
                    );
      

          lXSL := lXSL || q'[<?xml version="1.0" encoding="ISO-8859-1"?>]';
          lXSL := lXSL || q'[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">]';
          lXSL := lXSL || q'[ <xsl:output method="html"/>]';
          lXSL := lXSL || q'[ <xsl:template match="/">]';
          lXSL := lXSL || q'[ <html>]';
          lXSL := lXSL || q'[  <body>]';
          lXSL := lXSL || q'[   <table border="1">]';
          lXSL := lXSL || q'[     <tr bgcolor="Beige">]';
          lXSL := lXSL || q'[      <xsl:for-each select="/ROWSET/ROW[1]/*">]';
          lXSL := lXSL || q'[       <th><xsl:value-of select="name()"/></th>]';
          lXSL := lXSL || q'[      </xsl:for-each>]';
          lXSL := lXSL || q'[     </tr>]';
          lXSL := lXSL || q'[     <xsl:for-each select="/ROWSET/*">]';
          lXSL := lXSL || q'[      <tr>]';    
          lXSL := lXSL || q'[       <xsl:for-each select="./*">]';
          lXSL := lXSL || q'[        <td><xsl:value-of select="text()"/> </td>]';
          lXSL := lXSL || q'[       </xsl:for-each>]';
          lXSL := lXSL || q'[      </tr>]';
          lXSL := lXSL || q'[     </xsl:for-each>]';
          lXSL := lXSL || q'[   </table>]';
          lXSL := lXSL || q'[  </body>]';
          lXSL := lXSL || q'[ </html>]';
          lXSL := lXSL || q'[ </xsl:template>]';
          lXSL := lXSL || q'[</xsl:stylesheet>]';

          -- XSL transformation to convert XML to HTML --
          lHTMLOutput := l_xmltype.transform(XMLType(lXSL));
          -- convert XMLType to Clob --
          lRetVal := lHTMLOutput.getClobVal();
          lRetVal := replace(lRetVal,'_x0027_','');
          SS_MAIL.SEND_html_MAIL('d.bhavsar@ticb.com','Print Log',lRetVal,PARAM_SUCCESS ,PARAM_MESSAGE );
          dbms_output.put_line(param_success);
          dbms_output.put_line(param_message);
      end generate_html;
      
      function get_page_size(param_page_size varchar2) return varchar2 is
          v_actual_page_size varchar2(60);
      Begin
        Begin
          Select map_paper_size into v_actual_page_size from 
                (
                    select distinct map_paper_size from SS_PAPER_SIZE_MAP 
                    where trim(SRC_PAPER_SIZE) = trim(param_page_size) 
                ) where rownum = 1;
        Exception
          When others then
            v_actual_page_size := param_page_size;
        End;
        Return v_actual_Page_size;
      End;
      
      
      
      function get_print_rate(param_page_size varchar2, param_color_flag number) return number is
          v_count number;
          v_page_size varchar2(60);
          v_print_rate number;
      Begin
          v_page_size := get_page_size(param_page_size);
          Begin
              Select  RATE into v_print_rate  from ss_print_rate_mast where PAGE_SIZE = trim(v_page_size) and COLOR = param_color_flag;
              return v_print_rate;
          Exception
            when Others then return 10;
          End;
      End;
      function get_print_rate(param_page_size varchar2, param_color_flag varchar2) return number is
          v_count number;
          v_color_flag number := 1; --Color
          v_page_size varchar2(60);
          v_print_rate number;
      Begin
          If Upper(Trim(param_color_flag)) = 'GRAYSCALE' Then
              v_color_flag := -1; --- B/W
          End If;
          v_print_rate := get_print_rate(param_page_size, v_color_flag);
          return v_print_rate;
      End;
      
      Procedure update_print_log as
          cursor cur_print_log is select rownum, userid, page_size, COLOR from ss_print_log where empno is null
          and print_date > trunc(sysdate) - 3;
            --and PRINT_DATE = to_date('17-OCT-2015','dd-MON-yyyy');
          v_empno varchar2(5);
          v_deptno varchar2(4);
          v_page_type varchar2(2);
          v_cost number;
      Begin
          for cur_row in cur_print_log  loop
              begin
                select empno into v_empno from userids where domain = 'TICB' and trim(userid) = Trim(upper(cur_row.userid));
                Select parent into v_deptno from ss_emplmast where empno = v_empno;
              Exception
                When Others then null;
              end;
              begin
                  select map_paper_size into v_page_type from ss_paper_size_map where
                    trim(src_paper_size) = trim(upper(cur_row.page_size));
                  select rate into v_cost from ss_print_rate_mast where 
                    PAGE_SIZE = v_page_type and color = decode(trim(cur_row.color), 'NOT GRAYSCALE',1,-1);
              exception
                  when others then null;
              end;
              If v_empno is not null or v_cost is not null Then
                  update ss_print_log set empno = v_empno, parent = v_deptno, page_type = v_page_type, cost = v_cost
                    where rownum = cur_row.rownum;
              End If;
              commit;
          end loop;
          --Commit;
      
      End;
      
      
end print_log_mis;
/
---------------------------
--Changed PACKAGE BODY
--PN
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PN" --4 PENALTY LEAVE DEDUCTION           
IS
--   
-- To modify this template, edit file PKGBODY.TXT in TEMPLATE 
-- directory of SQL Navigator
--
-- Purpose: Briefly explain the functionality of the package body
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  ------------------------------------------      
   -- Enter procedure, function bodies as shown below


        FUNCTION GetStartDate(p_MM In Varchar2, p_YYYY In Varchar2) RETURN Date IS
        BEGIN
            IF Not (p_MM = '01' and p_YYYY='2007') Then
                Return N_GetStartDate(p_MM,p_YYYY);
            else
                Return To_Date('1-Jan-2007');
            End If;
        END GetStartDate;

        FUNCTION GetEndDate(p_MM In Varchar2, p_YYYY In Varchar2) RETURN Date IS
        BEGIN
            Return N_GetEndDate(p_MM,p_YYYY);
        END GetEndDate;

        --procedure to save / calculate CFwd Delta Hrs of Last Working Day (Used in punch details and Penalty Leave calculation)
        PROCEDURE N_CFWD_LWD_DELTAHRS(p_EmpNo IN Varchar2, p_PDate IN Date, p_SaveTot In Number,
                                    p_DeltaHrs Out Number, p_LWDDeltaHrs Out Number,
                                    p_LCAppCntr Out Number) IS

            -- p_SaveTot - if '1' Then totals of Last Complete Week of the month are stored in the database.
            -- p_SaveTot - if '0' Then totals of Last Complete Week of the month are retrived from the database.

            Cursor C1 (c_EmpNo IN Varchar2, c_Date IN Date) Is
                Select c_EmpNo As EmpNo, To_Number(D_DD) As Days,
                    LateCome1(c_EmpNo,D_Date) AS LCome,
                    D_Date AS PDate,
                    GetShift1(c_EmpNo, D_Date) AS SCode,
                    Get_Holiday(D_Date) As isSunday,
                    EarlyGo1(c_EmpNo,D_Date) AS EGo,
                    isLComeEGoApp(c_EmpNo,D_Date) AS LC_App,
                    isSLeaveApp(c_EmpNo,D_Date) AS SL_App,
                    isLastWorkDay1(c_EmpNo, D_Date) AS isLWD,
                    Wk_Of_Year,
                    D_Day
                From SS_Days_Details
                Where D_Date >= PN.GetStartDate(To_Char(c_Date,'MM'), To_Char(c_Date,'YYYY')) And
                    D_Date <= PN.GetEndDate(To_Char(c_Date,'MM'), To_Char(c_Date,'YYYY'))
                Order by D_Date;

            LC_AppCntr      Number := 0;
            SL_AppCntr      Number := 0;
            v_OpenLC_Cntr   Number := 0;
            v_OpenMM        Number :=0;
            v_SDate         Date;
            v_Count         Number :=0;
            v_DHrs          Number :=0;
            v_SumDHrs       Number :=0;
            v_CFwdHrs       Number :=0;
            v_RetVal        Number := 0;
            v_NumVar        Number :=0;
            v_PHrs          Number :=0;
            --v_CFwdSLAppCntr Number :=0;
            v_LastDay Varchar2(3) :='NON';
            v_MM Varchar2(2);
            v_YYYY Varchar2(4);
        BEGIN
            If To_Number(To_Char(p_PDate,'dd')) = 1 Then
                Select Count(*) InTo v_Count From SS_DeltaHrsBal_OT Where EmpNo = LTrim(p_EmpNo);
                If v_Count = 0 Then
                    --Select Nvl(doj,p_PDate) InTo v_SDate From SS_Emplmast Where EmpNo = Ltrim(Rtrim(p_EmpNo));
                    v_SDate := Add_Months(p_PDate,-1) -1; -- Add_Montsh(1-Feb-2001,-1) = 1-Jan-2001 - 1 = 31-Dec-2000
                Else
                    Select MON, YYYY, --Nvl(LC_AppCntr,0),
                                Nvl(DELTAHRS,0), Nvl(LDAY_CFWD_DHRS,0), PDate
                        InTo v_MM, v_YYYY, --LC_AppCntr,
                                v_SumDHrs, p_LWDDeltaHrs, v_SDate From SS_DeltaHrsBal_OT
                        Where PDate < p_PDate
                            And EmpNo = lTrim(p_EmpNo)
                            And PDate = (Select Max(PDate) From SS_DeltaHrsBal_OT Where PDate < p_PDate And EmpNo = lTrim(p_EmpNo) Group By EmpNo);

                    If Add_Months(v_SDate,1) + 1 < p_PDate Then
                        v_SDate := Add_Months(p_PDate, -1) -1;
                        v_MM := To_Char(v_SDate,'MM');
                        v_YYYY := To_Char(v_SDate,'YYYY');
                        LC_AppCntr := 0;
                        v_SumDHrs := 0;
                        v_CFwdHrs := 0;
                    End If;
                End If;
                v_SDate := v_SDate + 1; -- 1st of the Month
                If Add_Months(v_SDate,1)  = p_PDate Then
                --
                    For C2 IN C1(p_EmpNo,v_SDate) Loop

                        v_LastDay := C2.D_Day; --eg. 'MON', 'TEU' 'SUN' etc

                        If v_LastDay = 'SUN' Then
                            p_LWDDeltaHrs := Nvl(v_CFwdHrs,0);
                        End If;
                        If v_LastDay  ='MON' Then
                            v_SumDHrs := v_CFwdHrs;
                            v_CFwdHrs := 0;
                        End If;

                        LC_AppCntr := LC_AppCntr + C2.LC_App;
                        SL_AppCntr := SL_AppCntr + C2.SL_App;

                        Select N_DeltaHrs(C2.EmpNo,C2.PDate,C2.SCode,PenaltyLeave1(C2.LCome,C2.EGo,C2.isLWD,LC_AppCntr,SL_AppCntr,C2.LC_App,C2.SL_App)) InTo v_DHrs From Dual;
                        v_SumDHrs := v_SumDHrs + v_DHrs ;

                        If C2.isLWD = 1 Then
 
                            If v_DHrs < 0 And C2.EGo <> 0 And (C2.SL_App = 1 ) Then
                                v_CFwdHrs := v_DHrs;
                            Else
                                v_CFwdHrs := 0;
                            End If;
                            LC_AppCntr := 0;

                            If v_SumDHrs >= 0 Or v_CFwdHrs >= 0 Then
                                v_CFwdHRs := 0;
                            ElsIf v_SumDHrs > v_CFwdHrs Then                    -- i.e v_sumDHrs < 0 And v_CFwdHRs < 0
                                v_CFwdHrs	:= v_SumDHrs;	            		-- and v_SumDHrs > v_CFwdHrs
                            			 --     e.g   -20 > -25
                            ElsIf v_SumDHrs < v_CFwdHrs Then 					-- i.e v_sumDHrs < 0 And v_CFwdHRs < 0
                                v_NumVar := v_SumDHrs + (v_CFwdHrs *-1);		-- and v_SumDHrs < v_CFwdHrs
                                v_NumVar :=	v_NumVar *-1;		 				-- e.g   -25 < -20
                                v_PHrs := Floor(v_NumVar/60);
                                If v_PHrs < (v_NumVar/60) Then
                                    v_PHrs := v_PHrs + 1;
                                End If;
                                v_NumVar := v_SumDHrs + (v_PHrs * 60);
                                If v_NumVar < 0 Then
                                    If v_CFwdHrs < v_NumVar Then
                                        v_CFwdHrs := v_NumVar;
                                    End If;
                                Else
                                    v_CFwdHrs := 0;
                                End If;
                            End If;

                            --p_LWDDeltaHrs := Nvl(v_CFwdHrs,0);
                            v_SumDHrs := 0;
                        End If;
                    End Loop;
                    If p_SaveTot = 1 Then
                        p_LCAppCntr := Nvl(p_LCAppCntr,0 );
                        Delete From SS_DeltaHrsBal_OT where EmpNo = p_EmpNo And Mon = To_Char(v_SDate,'MM') And YYYY = To_Char(v_SDate, 'yyyy');
                        Insert InTo SS_DeltaHrsBal_OT (EmpNo,Mon,YYYY,DeltaHrs,LDay_CFwd_DHrs, PDate, LC_AppCntr) Values (p_EmpNo,LPad(To_Char(v_SDate,'MM'),2,'0'),LPad(To_Char(v_SDate,'YYYY'),4,'0'),v_SumDHrs,p_LWDDeltaHrs, Last_Day(v_SDate), p_LCAppCntr );

                        Commit;
                    End If;
                    p_DeltaHrs := Nvl(v_SumDHrs,0);
                    --p_LCAppCntr := LC_AppCntr;
                Else
                    p_DeltaHrs := Nvl(v_SumDHrs,0);
                End If;
            End If;
            p_DeltaHrs := Nvl(p_DeltaHrs,0);
            p_LWDDeltaHrs := Nvl(p_LWDDeltaHrs,0);
            p_LCAppCntr := Nvl(LC_AppCntr,0);
        Exception
            When NO_DATA_FOUND Then
            p_DeltaHrs := 0;
            p_LWDDeltaHrs := 0;
            p_LCAppCntr :=0;
        END;

   -- Enter further code below as specified in the Package spec.
END;
/
---------------------------
--New PACKAGE BODY
--PKG_SYSTEMGRANTS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PKG_SYSTEMGRANTS" As

    Procedure sp_health_systemgrants(
        param_msg_type Out Varchar2,
        param_msgtext  Out Varchar2
    ) As
        vexits      Number;
        vapplsystem Varchar2(3) := '019';
    Begin
        -- Remove employees from table who left company
        Delete
            From ss_health_hrduser
        Where
            empno In (
                Select
                Distinct empno
                From
                    vu_system_grants_health
                Where
                    status = 0
            );
        Commit;

        -- Check records exists in COMMONMASTERS
        Select
            Count(*)
        Into
            vexits
        From
            commonmasters.system_grants
        Where
            applsystem = vapplsystem;

        -- Remove records in COMMONMASTERS if exits
        If (vexits > 0) Then
            Delete
                From commonmasters.system_grants
            Where
                applsystem = vapplsystem;
            Commit;
        End If;

        -- Insert records available in VU_SYSTEM_GRANTS
        Insert Into commonmasters.system_grants (
            empno,
            applsystem,
            rolename,
            roledesc,
            module
        )
        Select
            vu_sys.empno,
            vu_sys.applsystem,
            vu_sys.rolename,
            vu_sys.roledesc,
            vu_sys.module
        From
            vu_system_grants_health vu_sys
        Where
            applsystem = vapplsystem;

        If (Sql%rowcount > 0) Then
            param_msg_type := 'SUCCESS';
        Else
            param_msg_type := 'FAILURE';
        End If;
    End sp_health_systemgrants;

    Procedure sp_system_grants_selfservice As
        c_selfservice_app_id Constant Varchar2(3) := '021';
        c_amodule_id         Constant Varchar2(3) := 'M04';
        c_attendance_admin   Constant Varchar2(4) := 'R011';
        c_line_manager       Constant Varchar2(4) := 'R006';
    Begin

        Delete
            From commonmasters.system_grants
        Where
            applsystem = c_selfservice_app_id;
        Delete
            From ss_lead_approver
        Where
            empno Not In (
                Select
                    empno
                From
                    ss_emplmast
                Where
                    status = 1
            );
        Delete
            From ss_user_dept_rights
        Where
            empno Not In (
                Select
                    empno
                From
                    ss_emplmast
                Where
                    status = 1
            );
        Delete
            From ss_delegate
        Where
            empno Not In (
                Select
                    empno
                From
                    ss_emplmast
                Where
                    status = 1
            )
            Or mngr Not In (
                Select
                    empno
                From
                    ss_emplmast
                Where
                    status = 1
            );

        --selfservice - Attendance Administrator
        Insert Into commonmasters.system_grants(
            empno,
            rolename,
            roledesc,
            applsystem,
            module,
            costcode,
            projno,
            role_on_costcode,
            role_on_projno,
            personid
        )
        Select
        Distinct
            ra.empno,
            'ATTENDANCE_ADMIN',
            'ATTENDANCE ADMINISTRATOR',
            c_selfservice_app_id,
            'SELFSERVICE',
            Null       As costcode,
            Null       As projno,
            Null       As role_on_costcode,        --TCM_COSTCODE
            Null       As role_on_projno,        --TCMPL_COSTCODE
            e.personid As personid
        From
            tcmpl_app_config.vu_module_user_role_actions ra,
            ss_emplmast                                  e
        Where
            e.empno       = ra.empno
            And e.status  = 1
            And module_id = c_amodule_id
            And role_id   = c_attendance_admin;

        --Selfservice - LINE MANAGER 
        Insert Into commonmasters.system_grants(
            empno,
            rolename,
            roledesc,
            applsystem,
            module,
            costcode,
            projno,
            role_on_costcode,
            role_on_projno,
            personid
        )
        Select
        Distinct
            la.empno,
            'LINE MANAGER',
            'LINE MANAGER',
            c_selfservice_app_id,
            'SELFSERVICE',
            cc.sapcc   As costcode,
            Null       As projno,
            la.parent  As role_on_costcode,        --TCM_COSTCODE
            Null       As role_on_projno,        --TCMPL_COSTCODE
            e.personid As personid
        From
            ss_lead_approver la,
            ss_emplmast      e,
            ss_costmast      cc
        Where
            e.empno      = la.empno
            And e.status = 1
            And e.parent = cc.costcode;

        --Selfservice - SECRETARY

        Insert Into commonmasters.system_grants(
            empno,
            rolename,
            roledesc,
            applsystem,
            module,
            costcode,
            projno,
            role_on_costcode,
            role_on_projno,
            personid
        )
        Select
        Distinct
            sec.empno,
            'SECRETARY',
            'SECRETARY',
            c_selfservice_app_id,
            'SELFSERVICE',
            cc.sapcc   As costcode,
            Null       As projno,
            sec.parent As role_on_costcode,        --TCM_COSTCODE
            Null       As role_on_projno,        --TCMPL_COSTCODE
            e.personid As personid
        From
            ss_user_dept_rights sec,
            ss_emplmast         e,
            ss_costmast         cc
        Where
            e.empno        = sec.empno
            And e.status   = 1
            And sec.parent = cc.costcode;

        --Selfservice - ON BEHALF OF HoD
        Insert Into commonmasters.system_grants(
            empno,
            rolename,
            roledesc,
            applsystem,
            module,
            costcode,
            projno,
            role_on_costcode,
            role_on_projno,
            personid
        )
        Select
        Distinct
            d.empno,
            'ON BEHALF OF HoD',
            'ON BEHALF OF HoD',
            c_selfservice_app_id,
            'SELFSERVICE',
            cc.sapcc    As costcode,
            Null        As projno,
            cc.costcode As role_on_costcode,        --TCM_COSTCODE
            Null        As role_on_projno,        --TCMPL_COSTCODE
            e.personid  As personid
        From
            ss_delegate d,
            ss_emplmast e,
            ss_costmast cc
        Where
            e.empno      = d.empno
            And e.status = 1
            And d.mngr   = cc.hod;

    End sp_system_grants_selfservice;

End pkg_systemgrants;
/
---------------------------
--Changed PACKAGE BODY
--PKG_ABSENT_TS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PKG_ABSENT_TS" As

    Function get_payslip_month Return Varchar2 Is
        v_payslip_month_rec ss_absent_payslip_period%rowtype;
        v_ret_val           Varchar2(7);
    Begin
        Select
            *
        Into
            v_payslip_month_rec
        From
            ss_absent_payslip_period
        Where
            is_open = 'OK';

        Return v_payslip_month_rec.period;
    Exception
        When Others Then
            Return 'ERR';
    End;

    Procedure check_payslip_month_isopen(
        param_payslip_yyyymm Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
        v_open_payslip_yyyymm Varchar2(10);
    Begin
        v_open_payslip_yyyymm := get_payslip_month;
        If v_open_payslip_yyyymm <> param_payslip_yyyymm Then
            param_success := 'KO';
            param_message := 'Err - Payslip month "' || param_payslip_yyyymm || '" is not open in the system';
            Return;
        Else
            param_success := 'OK';
        End If;

    End;

    Procedure generate_list(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        v_key_id      Varchar2(8);
        v_first_day   Date;
        v_last_day    Date;
        v_requester   Varchar2(5);
        v_param_empno Varchar2(10);
    Begin
        v_first_day   := to_date(param_absent_yyyymm || '01', 'yyyymmdd');
        If param_absent_yyyymm = '202003' Then
            v_last_day := To_Date('20-Mar-2020', 'dd-Mon-yyyy');
        Else
            v_last_day := last_day(v_first_day);
        End If;

        v_key_id      := dbms_random.string('X', 8);
        v_requester   := ss.get_empno(param_requester);
        If param_empno = 'ALL' Then
            v_param_empno := '%';
        Else
            v_param_empno := param_empno || '%';
        End If;

        Delete
            From ss_absent_ts_detail
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm
            And empno Like v_param_empno;
        --commit;
        --param_success   := 'OK';
        --return;
        If param_empno = 'ALL' Then
            Delete
                From ss_absent_ts_master
            Where
                absent_yyyymm      = param_absent_yyyymm
                And payslip_yyyymm = param_payslip_yyyymm;

            Insert Into ss_absent_ts_master (
                absent_yyyymm,
                payslip_yyyymm,
                modified_on,
                modified_by,
                key_id
            )
            Values (
                param_absent_yyyymm,
                param_payslip_yyyymm,
                sysdate,
                v_requester,
                v_key_id
            );

        Else
            Select
                key_id
            Into
                v_key_id
            From
                ss_absent_ts_master
            Where
                absent_yyyymm      = param_absent_yyyymm
                And payslip_yyyymm = param_payslip_yyyymm;

        End If;

        Commit;
        Insert Into ss_absent_ts_detail (
            key_id,
            absent_yyyymm,
            payslip_yyyymm,
            empno,
            absent_days,
            cl_bal,
            sl_bal,
            pl_bal,
            co_bal
        )
        Select
            v_key_id,
            param_absent_yyyymm,
            param_payslip_yyyymm,
            empno,
            absent_days,
            closingclbal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) cl_bal,
            closingslbal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) sl_bal,
            closingplbal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) pl_bal,
            closingcobal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) co_bal
        From
            (
                Select
                    empno,
                    Listagg(dy, ', ') Within
                        Group (Order By dy) As absent_days
                From
                    (
                        Select
                            a.empno,
                            b.day_no                        dy,
                            is_emp_absent(a.empno, b.tdate) is_emp_absent
                        From
                            ss_emplmast        a,
                            ss_absent_ts_leave b
                        Where
                            b.yyyymm     = Trim(Trim(param_absent_yyyymm))
                            And a.empno  = b.empno
                            And a.status = 1
                            And a.parent Not In (
                                Select
                                    parent
                                From
                                    ss_dept_not_4_absent
                            )
                            And a.emptype In (
                                'R', 'F'
                            )
                            And a.empno Like v_param_empno
                            And b.leave_hrs > 0
                    )
                Where
                    is_emp_absent = 1
                Group By empno
            );

        Commit;
        param_success := 'OK';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End generate_list;

    Procedure generate_nu_list_4_all_emp(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Delete
            From ss_absent_as_lop
        Where
            payslip_yyyymm                    = param_payslip_yyyymm
            And to_char(lop_4_date, 'yyyymm') = param_absent_yyyymm;

        pop_timesheet_leave_data(
            param_yyyymm  => param_absent_yyyymm,
            param_success => param_success,
            param_message => param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        generate_list(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            'ALL',
            param_requester,
            param_success,
            param_message
        );
    End generate_nu_list_4_all_emp;

    Procedure pop_timesheet_leave_data(
        param_yyyymm      Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    ) As
    Begin
        Delete
            From ss_absent_ts_leave
        Where
            yyyymm = param_yyyymm;

        Insert Into ss_absent_ts_leave (
            yyyymm,
            empno,
            projno,
            wpcode,
            activity,
            day_no,
            tdate,
            leave_hrs
        )
        Select
            yymm,
            empno,
            projno,
            wpcode,
            activity,
            day_no,
            t_date,
            Sum(colvalue)
        From
            (
                Select
                    yymm,
                    empno,
                    projno,
                    wpcode,
                    activity,
                    day_no,
                    to_date(yymm || '-' || day_no, 'yyyymm-dd') t_date,
                    colvalue
                From
                    (
                        With
                            t As (
                                Select
                                    yymm,
                                    empno,
                                    parent,
                                    assign,
                                    a.projno,
                                    wpcode,
                                    activity,
                                    d1,
                                    d2,
                                    d3,
                                    d4,
                                    d5,
                                    d6,
                                    d7,
                                    d8,
                                    d9,
                                    d10,
                                    d11,
                                    d12,
                                    d13,
                                    d14,
                                    d15,
                                    d16,
                                    d17,
                                    d18,
                                    d19,
                                    d20,
                                    d21,
                                    d22,
                                    d23,
                                    d24,
                                    d25,
                                    d26,
                                    d27,
                                    d28,
                                    d29,
                                    d30,
                                    d31
                                From
                                    timecurr.time_daily a,
                                    timecurr.tm_leave   b
                                Where
                                    substr(a.projno, 1, 5) = b.projno
                                    And a.wpcode <> 4
                                    And yymm               = param_yyyymm
                            )
                        Select
                            yymm,
                            empno,
                            parent,
                            assign,
                            projno,
                            wpcode,
                            activity,
                            to_number(replace(col, 'D', '')) day_no,
                            colvalue
                        From
                            t Unpivot (colvalue
                            For col
                            In (d1,
                            d2,
                            d3,
                            d4,
                            d5,
                            d6,
                            d7,
                            d8,
                            d9,
                            d10,
                            d11,
                            d12,
                            d13,
                            d14,
                            d15,
                            d16,
                            d17,
                            d18,
                            d19,
                            d20,
                            d21,
                            d22,
                            d23,
                            d24,
                            d25,
                            d26,
                            d27,
                            d28,
                            d29,
                            d30,
                            d31))
                    )
                Where
                    day_no <= to_number(to_char(last_day(to_date(param_yyyymm, 'yyyymm')), 'dd'))
            )
        --Where
        --colvalue > 0
        Group By
            yymm,
            empno,
            projno,
            wpcode,
            activity,
            day_no,
            t_date;

        Commit;
        param_success := 'OK';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure update_no_mail_list(
        param_absent_yyyymm      Varchar2,
        param_payslip_yyyymm     Varchar2,
        param_emp_list_4_no_mail Varchar2,
        param_requester          Varchar2,
        param_success Out        Varchar2,
        param_message Out        Varchar2
    ) As
    Begin
        Null;
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        If Trim(param_emp_list_4_no_mail) Is Null Then
            param_success := 'KO';
            param_message := 'Err - Employee List for NO-MAIL is blank.';
            Return;
        End If;

        Update
            ss_absent_ts_detail
        Set
            no_mail = Null
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm;

        Commit;
        Update
            ss_absent_ts_detail
        Set
            no_mail = 'OK'
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm
            And empno In (
                Select
                    column_value empno
                From
                    Table (ss.csv_to_table(param_emp_list_4_no_mail))
            );

        Commit;
        param_success := 'OK';
        param_message := 'Employee List for NO-MAIL successfully updated';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
            Rollback;
    End;

    Function get_lop(
        param_empno Varchar2,
        param_pdate Date
    ) Return Number Is
        v_lop Number;
    Begin
        Select
            half_full
        Into
            v_lop
        From
            ss_absent_ts_lop
        Where
            empno          = param_empno
            And lop_4_date = param_pdate;

        Return v_lop;
    Exception
        When Others Then
            Return 0;
    End;

    Procedure set_lop_4_emp(
        param_empno          Varchar2,
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_lop_val        Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        Cursor c1 Is
            Select
                column_value
            From
                Table (ss.csv_to_table(param_lop_val));

        Type typ_tab Is
            Table Of c1%rowtype Index By Binary_Integer;
        v_tab  typ_tab;
        v_day  Varchar2(5);
        v_lop  Varchar2(5);
        v_cntr Number;
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        param_success := 'KO';
        v_cntr        := 0;
        For c2 In c1
        Loop
            v_cntr := v_cntr + 1;
            v_day  := lpad(substr(c2.column_value, 1, instr(c2.column_value, '-') - 1), 2, '0');

            v_lop  := substr(c2.column_value, instr(c2.column_value, '-') + 1);

            Insert Into ss_absent_ts_lop (
                empno,
                lop_4_date,
                payslip_yyyymm,
                half_full,
                entry_date
            )
            Values (
                param_empno,
                to_date(param_absent_yyyymm || v_day, 'yyyymmdd'),
                param_payslip_yyyymm,
                v_lop,
                sysdate
            );

        End Loop;

        If v_cntr > 0 Then
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                param_empno,
                param_requester,
                param_success,
                param_message
            );
        Else
            param_success := 'KO';
            param_message := 'Err - Zero rows updated.';
        End If;

    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
            Rollback;
    End;

    Procedure regenerate_list_4_one_emp(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        generate_list(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            param_empno,
            param_requester,
            param_success,
            param_message
        );
    End;

    Procedure reset_emp_lop(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Delete
            From ss_absent_ts_lop
        Where
            payslip_yyyymm                    = param_payslip_yyyymm
            And to_char(lop_4_date, 'yyyymm') = param_absent_yyyymm
            And empno                         = param_empno;

        Commit;
        regenerate_list_4_one_emp(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            param_empno,
            param_requester,
            param_success,
            param_message
        );
    End;

    Procedure delete_user_lop(
        param_empno          Varchar2,
        param_payslip_yyyymm Varchar2,
        param_absent_yyyymm  Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        Delete
            From ss_absent_ts_lop
        Where
            empno                             = param_empno
            And payslip_yyyymm                = param_payslip_yyyymm
            And to_char(lop_4_date, 'yyyymm') = param_absent_yyyymm;

        Commit;
        regenerate_list_4_one_emp(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            param_empno,
            param_requester,
            param_success,
            param_message
        );
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure refresh_absent_list(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        v_count            Number;
        v_absent_list_date Date;
        Cursor cur_onduty Is
            With
                absent_list As (
                    Select
                        empno
                    From
                        ss_absent_ts_detail
                    Where
                        absent_yyyymm      = param_absent_yyyymm
                        And payslip_yyyymm = param_payslip_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_absent_ts_lop
                    Where
                        payslip_yyyymm = param_payslip_yyyymm
                )
            Select
            Distinct
                empno
            From
                (
                    Select
                        empno
                    From
                        ss_ondutyapp
                    Where
                        app_date >= trunc(v_absent_list_date)
                        And type In ('OD', 'IO')
                        And nvl(lead_apprl, 0) <> 2
                        And nvl(hod_apprl, 0) <> 2
                        And nvl(hrd_apprl, 0) <> 2
                        And to_char(pdate, 'yyyymm') = param_absent_yyyymm
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                    Union
                    Select
                        empno
                    From
                        ss_ondutyapp_deleted
                    Where
                        deleted_on >= trunc(v_absent_list_date)
                        And type In ('OD', 'IO')
                        And to_char(pdate, 'yyyymm') = param_absent_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_ondutyapp_rejected
                    Where
                        rejected_on >= trunc(v_absent_list_date)
                        And type In ('OD', 'IO')
                        And to_char(pdate, 'yyyymm') = param_absent_yyyymm
                );

        Cursor cur_depu Is
            With
                absent_list As (
                    Select
                        empno
                    From
                        ss_absent_ts_detail
                    Where
                        absent_yyyymm      = param_absent_yyyymm
                        And payslip_yyyymm = param_payslip_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_absent_ts_lop
                    Where
                        payslip_yyyymm = param_payslip_yyyymm
                )
            Select
            Distinct
                empno
            From
                (
                    Select
                        empno
                    From
                        ss_depu
                    Where
                        (app_date >= trunc(v_absent_list_date)
                            Or chg_date >= trunc(v_absent_list_date))
                        And type In ('TR', 'DP')
                        And nvl(hod_apprl, 0) <> 2
                        And nvl(hrd_apprl, 0) <> 2
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                    Union
                    Select
                        empno
                    From
                        ss_depu_deleted
                    Where
                        deleted_on >= trunc(v_absent_list_date)
                        And type In ('TR', 'DP')
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    Select
                        empno
                    From
                        ss_depu_rejected
                    Where
                        rejected_on >= trunc(v_absent_list_date)
                        And type In ('TR', 'DP')
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    Select
                        empno
                    From
                        ss_depu_hist
                    Where
                        empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                        And type In ('TR', 'DP')
                        And chg_date >= trunc(v_absent_list_date)
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                );

        Cursor cur_leave Is
            With
                absent_list As (
                    Select
                        empno
                    From
                        ss_absent_ts_detail
                    Where
                        absent_yyyymm      = param_absent_yyyymm
                        And payslip_yyyymm = param_payslip_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_absent_ts_lop
                    Where
                        payslip_yyyymm = param_payslip_yyyymm
                )
            Select
            Distinct
                empno
            From
                (
                    Select
                        empno
                    From
                        ss_leaveapp
                    Where
                        (app_date >= trunc(v_absent_list_date))
                        And nvl(lead_apprl, 0) <> 2
                        And nvl(hod_apprl, 0) <> 2
                        And nvl(hrd_apprl, 0) <> 2
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                    Union
                    /*
                    Select
                        empno
                    From
                        ss_leave_adj
                    Where
                        (adj_dt >= trunc(v_absent_list_date))
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    */
                    Select
                        empno
                    From
                        ss_leaveapp_deleted
                    Where
                        deleted_on >= trunc(v_absent_list_date)
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    Select
                        empno
                    From
                        ss_leaveapp_rejected
                    Where
                        rejected_on >= trunc(v_absent_list_date)
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                );
        v_sysdate          Date := sysdate;
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Begin
            Select
                nvl(refreshed_on, modified_on)
            Into
                v_absent_list_date
            From
                ss_absent_ts_master
            Where
                absent_yyyymm      = param_absent_yyyymm
                And payslip_yyyymm = param_payslip_yyyymm;

        Exception
            When Others Then
                param_success := 'KO';
                param_message := 'Absent list not yet generated for the said period.';
                Return;
        End;

        For c_empno In cur_onduty
        Loop
            Null;
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                c_empno.empno,
                param_requester,
                param_success,
                param_message
            );
        End Loop;

        For c_empno In cur_depu
        Loop
            Null;
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                c_empno.empno,
                param_requester,
                param_success,
                param_message
            );
        End Loop;

        For c_empno In cur_leave
        Loop
            Null;
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                c_empno.empno,
                param_requester,
                param_success,
                param_message
            );
        End Loop;
        Update
            ss_absent_ts_master
        Set
            refreshed_on = v_sysdate
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm;

        Commit;
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Function is_emp_absent(
        param_empno In Varchar2,
        param_date  In Date
    ) Return Number As

        v_count           Number;
        c_is_absent       Constant Number := 1;
        c_not_absent      Constant Number := 0;
        c_leave_depu_tour Constant Number := 2;
        v_on_ldt          Number;
        v_ldt_appl        Number;
    Begin
        v_on_ldt   := isleavedeputour(param_date, param_empno);
        If v_on_ldt = 1 Then
            Return c_not_absent;
        End If;
        v_ldt_appl := isldt_appl(param_empno, param_date);
        If v_ldt_appl > 0 Then
            Return c_not_absent;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_absent_ts_lop
        Where
            empno          = param_empno
            And lop_4_date = param_date;

        If v_count > 0 Then
            Return c_not_absent;
        End If;
        Return c_is_absent;
    End is_emp_absent;

    Procedure reverse_lop_4_emp(
        param_empno          Varchar2,
        param_payslip_yyyymm Varchar2,
        param_lop_val        Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        Cursor c1 Is
            Select
                column_value
            From
                Table (ss.csv_to_table(param_lop_val));

        Type typ_tab Is
            Table Of c1%rowtype Index By Binary_Integer;
        v_tab  typ_tab;
        v_day  Varchar2(8);
        v_lop  Varchar2(5);
        v_cntr Number;
        v_date Date;
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Begin
            v_date := to_date(param_payslip_yyyymm, 'yyyymm');
        Exception
            When Others Then
                param_success := 'KO';
                param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
                Return;
        End;

        param_success := 'KO';
        v_cntr        := 0;
        For c2 In c1
        Loop
            v_cntr := v_cntr + 1;
            v_day  := substr(c2.column_value, 1, instr(c2.column_value, '-') - 1);

            v_lop  := substr(c2.column_value, instr(c2.column_value, '-') + 1);

            Insert Into ss_absent_ts_lop_reverse (
                empno,
                lop_4_date,
                payslip_yyyymm,
                half_full,
                entry_date
            )
            Values (
                param_empno,
                to_date(v_day, 'yyyymmdd'),
                to_char(v_date, 'yyyymm'),
                v_lop,
                sysdate
            );

        End Loop;

        If v_cntr = 0 Then
            param_success := 'KO';
            param_message := 'Err - Zero rows updated.';
        Else
            param_success := 'OK';
        End If;

    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
            Rollback;
    End;

    Procedure send_absent_email(
        p_payslip_yyyymm Varchar2,
        p_absent_yyyymm  Varchar2,
        p_success Out    Varchar2,
        p_message Out    Varchar2
    ) As
        Cursor cur_mail_list Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast e
                    Where
                        e.empno In (
                            Select
                                empno
                            From
                                ss_absent_ts_detail
                            Where
                                absent_yyyymm          = p_absent_yyyymm
                                And payslip_yyyymm     = p_payslip_yyyymm
                                And nvl(no_mail, 'KO') = 'KO'
                                And empno Not In ('04600', '04132')
                        )
                        And email Is Not Null
                    Order By e.empno
                )
            Group By
                group_id;

        v_subject           Varchar2(1000);
        v_msg_body          Varchar2(2000);
        v_mail_csv          Varchar2(2000);
        v_success           Varchar2(100);
        v_message           Varchar2(500);
        v_absent_month_date Date;
        v_absent_month_text Varchar2(30);
    Begin
        Begin
            v_absent_month_date := to_date(p_absent_yyyymm, 'yyyymm');
            v_absent_month_text := regexp_replace(to_char(v_absent_month_date, 'Month-yyyy'), '\s{2,}', ' ');
        Exception
            When Others Then
                p_success := 'KO';
                p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
                Return;
        End;
        v_msg_body := replace(c_absent_mail_body, '!@MONTH@!', v_absent_month_text);
        v_subject  := 'SELFSERVICE : ' || replace(c_absent_mail_sub, '!@MONTH@!', v_absent_month_text);

        For email_csv_row In cur_mail_list
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => 'a.kotian@tecnimont.in;',
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;
        p_success  := 'OK';
        p_message  := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;



End pkg_absent_ts;
/
---------------------------
--Changed PACKAGE BODY
--PKG_ABSENT
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PKG_ABSENT" As

    Function get_emp_absent_update_date(
        param_empno                Varchar2,
        param_period_keyid         Varchar2,
        param_absent_list_gen_date Date
    ) Return Date Is
        v_ret_date Date;
    Begin
        Select
            trunc(modified_on)
        Into
            v_ret_date
        From
            ss_absent_detail
        Where
            empno      = param_empno
            And key_id = param_period_keyid;

        Return (v_ret_date);
    Exception
        When Others Then
            Return (param_absent_list_gen_date);
    End;

    Procedure check_payslip_month_isopen(
        param_payslip_yyyymm Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
        v_open_payslip_yyyymm Varchar2(10);
    Begin
        v_open_payslip_yyyymm := get_payslip_month;
        If v_open_payslip_yyyymm <> param_payslip_yyyymm Then
            param_success := 'KO';
            param_message := 'Err - Payslip month "' || param_payslip_yyyymm || '" is not open in the system';
            Return;
        Else
            param_success := 'OK';
        End If;

    End;

    Procedure generate_list(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        v_key_id      Varchar2(8);
        v_first_date  Date;
        v_last_day    Date;
        --v_empno       varchar2(5);
        v_requester   Varchar2(5);
        v_param_empno Varchar2(10);
    Begin
        /*
            check_payslip_month_isopen(param_payslip_yyyymm,param_success,param_message);
            if param_success = 'KO' then
                return;
            end if;
            */
        If param_absent_yyyymm = '202106' Then
            v_first_date := to_date(param_absent_yyyymm || '07', 'yyyymmdd');
        Else
            v_first_date := to_date(param_absent_yyyymm || '01', 'yyyymmdd');
        End If;

        If param_absent_yyyymm = '202003' Then
            v_last_day := To_Date('20-Mar-2020', 'dd-Mon-yyyy');
        Else
            v_last_day := last_day(v_first_date);
        End If;

        v_key_id      := dbms_random.string('X', 8);
        v_requester   := ss.get_empno(param_requester);
        If param_empno = 'ALL' Then
            v_param_empno := '%';
        Else
            v_param_empno := param_empno || '%';
        End If;

        Delete
            From ss_absent_detail
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm
            And empno Like v_param_empno;

        If param_empno = 'ALL' Then
            Delete
                From ss_absent_master
            Where
                absent_yyyymm      = param_absent_yyyymm
                And payslip_yyyymm = param_payslip_yyyymm;

            Insert Into ss_absent_master (
                absent_yyyymm,
                payslip_yyyymm,
                modified_on,
                modified_by,
                key_id
            )
            Values (
                param_absent_yyyymm,
                param_payslip_yyyymm,
                sysdate,
                v_requester,
                v_key_id
            );

        Else
            Select
                key_id
            Into
                v_key_id
            From
                ss_absent_master
            Where
                absent_yyyymm      = param_absent_yyyymm
                And payslip_yyyymm = param_payslip_yyyymm;

        End If;

        Commit;
        Insert Into ss_absent_detail (
            key_id,
            absent_yyyymm,
            payslip_yyyymm,
            empno,
            absent_days,
            cl_bal,
            sl_bal,
            pl_bal,
            co_bal
        )
        Select
            v_key_id,
            param_absent_yyyymm,
            param_payslip_yyyymm,
            empno,
            absent_days,
            closingclbal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) cl_bal,
            closingslbal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) sl_bal,
            closingplbal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) pl_bal,
            closingcobal(
                empno,
                trunc(last_day(to_date(param_payslip_yyyymm, 'yyyymm'))),
                0
            ) co_bal
        From
            (
                Select
                    empno,
                    Listagg(dy, ', ') Within
                        Group (Order By dy) As absent_days
                From
                    (
                        With
                            days_tab As (
                                Select
                                    to_date(param_absent_yyyymm || to_char(days, 'FM00'), 'yyyymmdd') pdate,
                                    days                                                              dy
                                From
                                    ss_days
                                Where
                                    --days <= to_number(to_char(last_day(to_date(param_absent_yyyymm, 'yyyymm')), 'dd'))
                                    days <= to_number(to_char(v_last_day, 'dd'))
                                    And days >= to_number(to_char(v_first_date, 'dd'))
                            )
                        Select
                            a.empno,
                            dy,
                            pkg_absent.is_emp_absent(
                                a.empno, pdate, substr(s_mrk, ((dy - 1) * 2) + 1, 2), a.doj
                            ) is_absent
                        From
                            ss_emplmast a,
                            days_tab    b,
                            ss_muster   c
                        Where
                            mnth         = Trim(Trim(param_absent_yyyymm))
                            And a.empno  = c.empno
                            And a.status = 1
                            And a.parent Not In (
                                Select
                                    parent
                                From
                                    ss_dept_not_4_absent
                            )
                            And emptype In (
                                'R', 'F'
                            )
                            And a.empno Like v_param_empno
                    )
                Where
                    is_absent = 1
                Group By empno
            );

        Commit;
        param_success := 'OK';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End generate_list;

    Procedure generate_nu_list_4_all_emp(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Delete
            From ss_absent_lop
        Where
            payslip_yyyymm                    = param_payslip_yyyymm
            And to_char(lop_4_date, 'yyyymm') = param_absent_yyyymm;

        generate_list(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            'ALL',
            param_requester,
            param_success,
            param_message
        );
    End;

    Procedure regenerate_list_4_one_emp(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        generate_list(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            param_empno,
            param_requester,
            param_success,
            param_message
        );
    End;

    Procedure reset_emp_lop(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_empno          Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Delete
            From ss_absent_lop
        Where
            payslip_yyyymm                    = param_payslip_yyyymm
            And to_char(lop_4_date, 'yyyymm') = param_absent_yyyymm
            And empno                         = param_empno;

        Commit;
        regenerate_list_4_one_emp(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            param_empno,
            param_requester,
            param_success,
            param_message
        );
    End;

    Function is_emp_absent(
        param_empno      In Varchar2,
        param_date       In Date,
        param_shift_code In Varchar2,
        param_doj        In Date
    ) Return Varchar2 As

        v_holiday         Number;
        v_count           Number;
        c_is_absent       Constant Number := 1;
        c_not_absent      Constant Number := 0;
        c_leave_depu_tour Constant Number := 2;
        v_on_ldt          Number;
        v_ldt_appl        Number;
    Begin
        v_holiday  := get_holiday(param_date);
        If v_holiday > 0 Or nvl(param_shift_code, 'ABCD') In (
                'HH', 'OO'
            )
        Then
            --return -1;
            Return c_not_absent;
        End If;

        --Check DOJ & DOL

        If param_date < nvl(param_doj, param_date) Then
            --return -5;
            Return c_not_absent;
        End If;
        v_on_ldt   := isleavedeputour(param_date, param_empno);
        If v_on_ldt = 1 Then
            --return -2;
            --return c_leave_depu_tour;
            Return c_not_absent;
        End If;
        Select
            Count(empno)
        Into
            v_count
        From
            ss_integratedpunch
        Where
            empno     = Trim(param_empno)
            And pdate = param_date;

        If v_count > 0 Then
            --return -3;
            Return c_not_absent;
        End If;
        v_ldt_appl := isldt_appl(param_empno, param_date);
        If v_ldt_appl > 0 Then
            --return -6;
            Return c_not_absent;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_absent_lop
        Where
            empno          = param_empno
            And lop_4_date = param_date;

        If v_count > 0 Then
            Return c_not_absent;
        End If;
        --return -4;
        Return c_is_absent;
    End is_emp_absent;

    Procedure set_lop_4_emp(
        param_empno          Varchar2,
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_lop_val        Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        Cursor c1 Is
            Select
                column_value
            From
                Table (ss.csv_to_table(param_lop_val));

        Type typ_tab Is
            Table Of c1%rowtype Index By Binary_Integer;
        v_tab  typ_tab;
        v_day  Varchar2(5);
        v_lop  Varchar2(5);
        v_cntr Number;
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        param_success := 'KO';
        v_cntr        := 0;
        For c2 In c1
        Loop
            v_cntr := v_cntr + 1;
            v_day  := lpad(substr(c2.column_value, 1, instr(c2.column_value, '-') - 1), 2, '0');

            v_lop  := substr(c2.column_value, instr(c2.column_value, '-') + 1);

            Insert Into ss_absent_lop (
                empno,
                lop_4_date,
                payslip_yyyymm,
                half_full,
                entry_date
            )
            Values (
                param_empno,
                to_date(param_absent_yyyymm || v_day, 'yyyymmdd'),
                param_payslip_yyyymm,
                v_lop,
                sysdate
            );

        End Loop;

        If v_cntr > 0 Then
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                param_empno,
                param_requester,
                param_success,
                param_message
            );
        Else
            param_success := 'KO';
            param_message := 'Err - Zero rows updated.';
        End If;

    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
            Rollback;
    End;

    Function get_lop(
        param_empno Varchar2,
        param_pdate Date
    ) Return Number Is
        v_lop Number;
    Begin
        Select
            half_full
        Into
            v_lop
        From
            ss_absent_lop
        Where
            empno          = param_empno
            And lop_4_date = param_pdate;

        Return v_lop;
    Exception
        When Others Then
            Return 0;
    End;

    Procedure update_no_mail_list(
        param_absent_yyyymm       Varchar2,
        param_payslip_yyyymm      Varchar2,
        param_emp_list_4_no_mail  Varchar2,
        param_emp_list_4_yes_mail Varchar2,
        param_requester           Varchar2,
        param_success Out         Varchar2,
        param_message Out         Varchar2
    ) As
    Begin
        Null;
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        /*
        If Trim(param_emp_list_4_no_mail) Is Null Then
            param_success   := 'KO';
            param_message   := 'Err - Employee List for NO-MAIL is blank.';
            return;
        End If;
        */
        Update
            ss_absent_detail
        Set
            no_mail = Null
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm
            And empno In (
                Select
                    column_value empno
                From
                    Table (ss.csv_to_table(param_emp_list_4_yes_mail))
            );

        Commit;
        Update
            ss_absent_detail
        Set
            no_mail = 'OK'
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm
            And empno In (
                Select
                    column_value empno
                From
                    Table (ss.csv_to_table(param_emp_list_4_no_mail))
            );

        Commit;
        param_success := 'OK';
        param_message := 'Employee List for NO-MAIL successfully updated';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
            Rollback;
    End;

    Procedure add_payslip_period(
        param_period      Varchar2,
        param_open        Varchar2,
        param_by_win_uid  Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    ) As
        v_count    Number;
        v_date     Date;
        v_by_empno Varchar2(5);
    Begin
        Begin
            v_date := to_date(param_period, 'Mon-yyyy');
        Exception
            When Others Then
                param_success := 'KO';
                param_message := 'Err - Invalid date format';
                Return;
        End;

        v_by_empno    := pkg_09794.get_empno(param_by_win_uid);
        If v_by_empno Is Null Then
            param_success := 'KO';
            param_message := 'Err - Data Entry by EmpNo not found.';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_absent_payslip_period
        Where
            period = to_char(v_date, 'yyyymm');

        If v_count <> 0 Then
            param_success := 'KO';
            param_message := 'Err - Period already exists.';
            Return;
        End If;

        Insert Into ss_absent_payslip_period (
            period,
            is_open,
            modified_on,
            modified_by
        )
        Values (
            to_char(v_date, 'yyyymm'),
            param_open,
            sysdate,
            v_by_empno
        );

        If param_open = 'OK' Then
            Update
                ss_absent_payslip_period
            Set
                is_open = 'KO'
            Where
                period != to_char(v_date, 'yyyymm')
                And is_open = 'OK';

        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Period successfully added.';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure edit_payslip_period(
        param_period      Varchar2,
        param_open        Varchar2,
        param_by_win_uid  Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2
    ) As
        v_count    Number;
        v_date     Date;
        v_by_empno Varchar2(5);
    Begin
        Begin
            v_date := to_date(param_period, 'Mon-yyyy');
        Exception
            When Others Then
                param_success := 'KO';
                param_message := 'Err - Invalid date format';
                Return;
        End;

        v_by_empno    := pkg_09794.get_empno(param_by_win_uid);
        If v_by_empno Is Null Then
            param_success := 'KO';
            param_message := 'Err - Data Entry by EmpNo not found.';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_absent_payslip_period
        Where
            period = to_char(v_date, 'yyyymm');

        If v_count <> 1 Then
            param_success := 'KO';
            param_message := 'Err - Period not found in database.';
            Return;
        End If;

        Update
            ss_absent_payslip_period
        Set
            is_open = param_open
        Where
            period = to_char(v_date, 'yyyymm');

        If param_open = 'OK' Then
            Update
                ss_absent_payslip_period
            Set
                is_open = 'KO'
            Where
                period != to_char(v_date, 'yyyymm')
                And is_open = 'OK';

        End If;

        Commit;
        param_success := 'OK';
        param_message := 'Period successfully updated.';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure refresh_absent_list(
        param_absent_yyyymm  Varchar2,
        param_payslip_yyyymm Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        v_count             Number;
        v_absent_list_date  Date;
        v_absent_list_keyid Varchar2(8);
        Cursor cur_onduty(
            pc_list_keyid Varchar2,
            pc_list_date  Date
        ) Is
            With
                absent_list As (
                    Select
                        empno
                    From
                        ss_absent_detail
                    Where
                        absent_yyyymm      = param_absent_yyyymm
                        And payslip_yyyymm = param_payslip_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_absent_lop
                    Where
                        payslip_yyyymm = param_payslip_yyyymm
                )
            Select
            Distinct
                empno
            From
                (
                    Select
                        empno
                    From
                        ss_ondutyapp
                    Where
                        app_date >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And type In ('OD', 'IO')
                        And nvl(lead_apprl, 0) <> 2
                        And nvl(hod_apprl, 0) <> 2
                        And nvl(hrd_apprl, 0) <> 2
                        And to_char(pdate, 'yyyymm') = param_absent_yyyymm
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                    Union
                    Select
                        empno
                    From
                        ss_ondutyapp_deleted
                    Where
                        deleted_on >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And to_char(pdate, 'yyyymm') = param_absent_yyyymm
                        And type In ('OD', 'IO')
                    Union
                    Select
                        empno
                    From
                        ss_ondutyapp_rejected
                    Where
                        rejected_on >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And to_char(pdate, 'yyyymm') = param_absent_yyyymm
                        And type In ('OD', 'IO')
                );

        Cursor cur_depu(
            pc_list_keyid Varchar2,
            pc_list_date  Date
        ) Is
            With
                absent_list As (
                    Select
                        empno
                    From
                        ss_absent_detail
                    Where
                        absent_yyyymm      = param_absent_yyyymm
                        And payslip_yyyymm = param_payslip_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_absent_lop
                    Where
                        payslip_yyyymm = param_payslip_yyyymm
                )
            Select
            Distinct
                empno
            From
                (
                    Select
                        empno
                    From
                        ss_depu
                    Where
                        (app_date >= get_emp_absent_update_date(
                                empno, pc_list_keyid, pc_list_date
                            )
                            Or chg_date >= get_emp_absent_update_date(
                                empno, pc_list_keyid, pc_list_date
                            ))
                        And type In ('TR', 'DP')
                        And nvl(hod_apprl, 0) <> 2
                        And nvl(hrd_apprl, 0) <> 2
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                    Union
                    Select
                        empno
                    From
                        ss_depu_deleted
                    Where
                        deleted_on >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And type In ('TR', 'DP')
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    Select
                        empno
                    From
                        ss_depu_rejected
                    Where
                        rejected_on >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And type In ('TR', 'DP')
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    Select
                        empno
                    From
                        ss_depu_hist
                    Where
                        empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                        And type In ('TR', 'DP')
                        And chg_date >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                );

        Cursor cur_leave(
            pc_list_keyid Varchar2,
            pc_list_date  Date
        ) Is
            With
                absent_list As (
                    Select
                        empno
                    From
                        ss_absent_detail
                    Where
                        absent_yyyymm      = param_absent_yyyymm
                        And payslip_yyyymm = param_payslip_yyyymm
                    Union
                    Select
                        empno
                    From
                        ss_absent_lop
                    Where
                        payslip_yyyymm = param_payslip_yyyymm
                )
            Select
            Distinct
                empno
            From
                (
                    Select
                        empno
                    From
                        ss_leaveapp
                    Where
                        (app_date >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        ))
                        And nvl(lead_apprl, 0) <> 2
                        And nvl(hod_apprl, 0) <> 2
                        And nvl(hrd_apprl, 0) <> 2
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                        And empno In (
                            Select
                                empno
                            From
                                absent_list
                        )
                    Union
                    Select
                        empno
                    From
                        ss_leaveapp_deleted
                    Where
                        deleted_on >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                    Union
                    Select
                        empno
                    From
                        ss_leaveapp_rejected
                    Where
                        rejected_on >= get_emp_absent_update_date(
                            empno, pc_list_keyid, pc_list_date
                        )
                        And (to_char(bdate, 'yyyymm')               = param_absent_yyyymm
                            Or to_char(nvl(edate, bdate), 'yyyymm') = param_absent_yyyymm)
                );
        v_sysdate           Date := sysdate;
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Begin
            Select
                trunc(nvl(refreshed_on, modified_on)),
                key_id
            Into
                v_absent_list_date,
                v_absent_list_keyid
            From
                ss_absent_master
            Where
                absent_yyyymm      = param_absent_yyyymm
                And payslip_yyyymm = param_payslip_yyyymm;

        Exception
            When Others Then
                param_success := 'KO';
                param_message := 'Absent list not yet generated for the said period.';
                Return;
        End;

        For c_empno In cur_onduty(v_absent_list_keyid, v_absent_list_date)
        Loop
            Null;
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                c_empno.empno,
                param_requester,
                param_success,
                param_message
            );
        End Loop;

        For c_empno In cur_depu(v_absent_list_keyid, v_absent_list_date)
        Loop
            Null;
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                c_empno.empno,
                param_requester,
                param_success,
                param_message
            );
        End Loop;

        For c_empno In cur_leave(v_absent_list_keyid, v_absent_list_date)
        Loop
            Null;
            regenerate_list_4_one_emp(
                param_absent_yyyymm,
                param_payslip_yyyymm,
                c_empno.empno,
                param_requester,
                param_success,
                param_message
            );
        End Loop;

        Update
            ss_absent_master
        Set
            refreshed_on = v_sysdate
        Where
            absent_yyyymm      = param_absent_yyyymm
            And payslip_yyyymm = param_payslip_yyyymm;

        Commit;
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure reverse_lop_4_emp(
        param_empno          Varchar2,
        param_payslip_yyyymm Varchar2,
        param_lop_val        Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As

        Cursor c1 Is
            Select
                column_value
            From
                Table (ss.csv_to_table(param_lop_val));

        Type typ_tab Is
            Table Of c1%rowtype Index By Binary_Integer;
        v_tab  typ_tab;
        v_day  Varchar2(8);
        v_lop  Varchar2(5);
        v_cntr Number;
        v_date Date;
    Begin
        check_payslip_month_isopen(
            param_payslip_yyyymm,
            param_success,
            param_message
        );
        If param_success = 'KO' Then
            Return;
        End If;
        Begin
            v_date := to_date(param_payslip_yyyymm, 'yyyymm');
        Exception
            When Others Then
                param_success := 'KO';
                param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
                Return;
        End;

        param_success := 'KO';
        v_cntr        := 0;
        For c2 In c1
        Loop
            v_cntr := v_cntr + 1;
            v_day  := substr(c2.column_value, 1, instr(c2.column_value, '-') - 1);

            v_lop  := substr(c2.column_value, instr(c2.column_value, '-') + 1);

            Insert Into ss_absent_lop_reverse (
                empno,
                lop_4_date,
                payslip_yyyymm,
                half_full,
                entry_date
            )
            Values (
                param_empno,
                to_date(v_day, 'yyyymmdd'),
                to_char(v_date, 'yyyymm'),
                v_lop,
                sysdate
            );

        End Loop;

        If v_cntr = 0 Then
            param_success := 'KO';
            param_message := 'Err - Zero rows updated.';
        Else
            param_success := 'OK';
        End If;

    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
            Rollback;
    End;

    Function get_payslip_month Return Varchar2 Is
        v_payslip_month_rec ss_absent_payslip_period%rowtype;
        v_ret_val           Varchar2(7);
    Begin
        Select
            *
        Into
            v_payslip_month_rec
        From
            ss_absent_payslip_period
        Where
            is_open = 'OK';
        --v_ret_val := substr(v_payslip_month_rec.period,1,4) || '-' || substr(v_payslip_month_rec.period,5,2);

        Return v_payslip_month_rec.period;
    Exception
        When Others Then
            Return 'ERR';
    End;

    Procedure delete_user_lop(
        param_empno          Varchar2,
        param_payslip_yyyymm Varchar2,
        param_absent_yyyymm  Varchar2,
        param_requester      Varchar2,
        param_success Out    Varchar2,
        param_message Out    Varchar2
    ) As
    Begin
        Delete
            From ss_absent_lop
        Where
            empno                             = param_empno
            And payslip_yyyymm                = param_payslip_yyyymm
            And to_char(lop_4_date, 'yyyymm') = param_absent_yyyymm;

        Commit;
        regenerate_list_4_one_emp(
            param_absent_yyyymm,
            param_payslip_yyyymm,
            param_empno,
            param_requester,
            param_success,
            param_message
        );
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Function get_pending_app_4_month(
        param_yyyymm Varchar2
    ) Return typ_tab_pending_app
        Pipelined
    As

        Cursor cur_pending_apps Is
            Select
                empno                        empno,
                emp_name                     emp_name,
                parent                       parent,
                app_no                       app_no,
                bdate                        bdate,
                edate                        edate,
                leavetype                    leavetype,
                ss.approval_text(hrd_apprl)  hrd_apprl_txt,
                ss.approval_text(hod_apprl)  hod_apprl_txt,
                ss.approval_text(lead_apprl) lead_apprl_txt
            From
                (
                    With
                        emp_list As (
                            Select
                                empno As emp_num,
                                name  As emp_name,
                                parent
                            From
                                ss_emplmast
                            Where
                                status = 1
                                And emptype In (
                                    'R', 'F'
                                )
                        ), dates As (
                            Select
                                to_date(param_yyyymm, 'yyyymm')           As first_day,
                                last_day(to_date(param_yyyymm, 'yyyymm')) As last_day
                            From
                                dual
                        )
                    Select
                        empno,
                        emp_name,
                        parent,
                        app_no,
                        bdate,
                        edate,
                        leavetype,
                        hrd_apprl,
                        hod_apprl,
                        lead_apprl
                    From
                        ss_leaveapp a,
                        emp_list    b,
                        dates       c
                    Where
                        a.empno = b.emp_num
                        And nvl(lead_apprl, ss.pending) In (
                            ss.pending, ss.approved, ss.apprl_none
                        )
                        And nvl(hod_apprl, ss.pending) In (
                            ss.pending, ss.approved
                        )
                        And nvl(hrd_apprl, ss.pending) In (
                            ss.pending
                        )
                        And (bdate Between first_day And last_day
                            Or nvl(bdate, edate) Between first_day And last_day
                            Or first_day Between bdate And nvl(bdate, edate))
                    Union
                    Select
                        empno,
                        emp_name,
                        parent,
                        app_no,
                        pdate,
                        Null,
                        type As od_type,
                        hrd_apprl,
                        hod_apprl,
                        lead_apprl
                    From
                        ss_ondutyapp a,
                        emp_list     b,
                        dates
                    Where
                        a.empno = b.emp_num
                        And type In (
                            'IO', 'OD'
                        )
                        And nvl(lead_apprl, ss.pending) In (
                            ss.pending, ss.approved, ss.apprl_none
                        )
                        And nvl(hod_apprl, ss.pending) In (
                            ss.pending, ss.approved
                        )
                        And nvl(hrd_apprl, ss.pending) In (
                            ss.pending
                        )
                        And (pdate Between first_day And last_day)
                    Union
                    Select
                        empno,
                        emp_name,
                        parent,
                        app_no,
                        bdate,
                        edate,
                        type As depu_type,
                        hrd_apprl,
                        hod_apprl,
                        lead_apprl
                    From
                        ss_depu  a,
                        emp_list b,
                        dates
                    Where
                        a.empno = b.emp_num
                        And type In (
                            'HT', 'VS', 'TR', 'DP'
                        )
                        And nvl(lead_apprl, ss.pending) In (
                            ss.pending, ss.approved, ss.apprl_none
                        )
                        And nvl(hod_apprl, ss.pending) In (
                            ss.pending, ss.approved
                        )
                        And nvl(hrd_apprl, ss.pending) In (
                            ss.pending
                        )
                        And (bdate Between first_day And last_day
                            Or nvl(bdate, edate) Between first_day And last_day
                            Or first_day Between bdate And nvl(bdate, edate))
                /*union
                select
                    empno,
                    emp_name,
                    parent,
                    app_no,
                    bdate,
                    edate,
                    type,
                    hrd_apprl,
                    hod_apprl,
                    lead_apprl
                from
                    ss_depu a,
                    emp_list b,
                    dates
                where
                    a.empno = b.emp_num
                    and type in (
                        'HT',
                        'VS',
                        'TR',
                        'DP'
                    )
                    and nvl(lead_apprl,ss.pending) in (
                        ss.pending,
                        ss.approved,
                        ss.apprl_none
                    )
                    and nvl(hod_apprl,ss.pending) in (
                        ss.pending,
                        ss.approved
                    )
                    and nvl(hrd_apprl,ss.pending) in (
                        ss.pending
                    )
                    and ( bdate between first_day and last_day
                          or nvl(bdate,edate) between first_day and last_day
                          or first_day between bdate and nvl(bdate,edate) )*/
                );

        v_rec      typ_rec_pending_app;
        v_tab      typ_tab_pending_app;
        v_tab_null typ_tab_pending_app;
    Begin
        Open cur_pending_apps;
        Loop
            Fetch cur_pending_apps Bulk Collect Into v_tab Limit 50;
            For i In 1..v_tab.count
            Loop
                Pipe Row (v_tab(i));
            End Loop;

            v_tab := v_tab_null;
            Exit When cur_pending_apps%notfound;
        End Loop;
        --pipe row ( v_rec );

    End;

    Procedure send_absent_email(
        p_payslip_yyyymm Varchar2,
        p_absent_yyyymm  Varchar2,
        p_success Out    Varchar2,
        p_message Out    Varchar2
    ) As
        Cursor cur_mail_list Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        e.empno,
                        replace(e.email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.empno)) / 50) group_id
                    From
                        ss_emplmast e
                    Where
                        e.empno In (
                            Select
                                empno
                            From
                                ss_absent_detail
                            Where
                                absent_yyyymm          = p_absent_yyyymm
                                And payslip_yyyymm     = p_payslip_yyyymm
                                And nvl(no_mail, 'KO') = 'KO'
                                And empno Not In ('04600', '04132')
                        )
                        And email Is Not Null
                    Order By e.empno
                )
            Group By
                group_id;

        v_subject           Varchar2(1000);
        v_msg_body          Varchar2(2000);
        v_mail_csv          Varchar2(2000);
        v_success           Varchar2(100);
        v_message           Varchar2(500);
        v_absent_month_date Date;
        v_absent_month_text Varchar2(30);
    Begin
        Begin
            v_absent_month_date := to_date(p_absent_yyyymm, 'yyyymm');
            v_absent_month_text := regexp_replace(to_char(v_absent_month_date, 'Month-yyyy'), '\s{2,}', ' ');
        Exception
            When Others Then
                p_success := 'KO';
                p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
                Return;
        End;
        v_msg_body := replace(c_absent_mail_body, '!@MONTH@!', v_absent_month_text);
        v_subject  := 'SELFSERVICE : ' || replace(c_absent_mail_sub, '!@MONTH@!', v_absent_month_text);

        For email_csv_row In cur_mail_list
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => 'a.kotian@tecnimont.in;',
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;
        p_success  := 'OK';
        p_message  := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;


    Procedure send_hod_approval_pending_mail(
        p_success Out    Varchar2,
        p_message Out    Varchar2
    ) As
        Cursor cur_mail_list Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        emp_no) email_csv_list
            From
                (
                    Select
                        e.emp_no,
                        replace(e.emp_email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.emp_no)) / 50) group_id
                    From
                        table( pending_approvals.list_of_hod_not_approving() ) e
                )
            Group By
                group_id;

        v_subject           Varchar2(1000);
        v_msg_body          Varchar2(2000);
        v_mail_csv          Varchar2(2000);
        v_success           Varchar2(100);
        v_message           Varchar2(500);
        v_absent_month_date Date;
        v_absent_month_text Varchar2(30);
    Begin
        v_msg_body := c_pending_approval_body;
        v_subject  := 'SELFSERVICE : ' || c_pending_approval_sub;

        For email_csv_row In cur_mail_list
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => 'a.kotian@tecnimont.in;',
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;
        p_success  := 'OK';
        p_message  := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure send_leadapproval_pending_mail(
        p_success Out    Varchar2,
        p_message Out    Varchar2
    ) As
        Cursor cur_mail_list Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        emp_no) email_csv_list
            From
                (
                    Select
                        e.emp_no,
                        replace(e.emp_email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By e.emp_no)) / 50) group_id
                    From
                        table( pending_approvals.list_of_leads_not_approving() ) e
                )
            Group By
                group_id;

        v_subject           Varchar2(1000);
        v_msg_body          Varchar2(2000);
        v_mail_csv          Varchar2(2000);
        v_success           Varchar2(100);
        v_message           Varchar2(500);
        v_absent_month_date Date;
        v_absent_month_text Varchar2(30);
    Begin
        v_msg_body := c_pending_approval_body;
        v_subject  := 'SELFSERVICE : ' || c_pending_approval_sub;

        For email_csv_row In cur_mail_list
        Loop
            v_mail_csv := email_csv_row.email_csv_list;
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => 'a.kotian@tecnimont.in;',
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );

        End Loop;
        p_success  := 'OK';
        p_message  := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;



End pkg_absent;
/
---------------------------
--Changed PACKAGE BODY
--PKG_09794
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PKG_09794" As

    Procedure normalize_punch_data As
    Begin
        --return;
        Delete From ss_9794_punch_temp
        Where
            emp_code Not In (
                Select
                    Lpad(empno, 8, '0') emp_code
                From
                    ss_9794_emp_list
            );

        Commit;
        Delete From ss_9794_punch
        Where
            ( empno,
              pdate ) In (
                Select
                    Substr('00000000' || Trim(emp_code), - 5, 5),
                    Trunc(pdate)
                From
                    ss_9794_punch_temp
            );

        Commit;
        Insert Into ss_9794_punch (
            empno,
            hh,
            mm,
            pdate,
            dd,
            mon,
            yyyy,
            ss
        )
            Select
                Substr('00000000' || Trim(emp_code), - 5, 5),
                To_Char(pdate, 'hh24'),
                To_Char(pdate, 'mi'),
                Trunc(pdate),
                To_Char(pdate, 'dd'),
                To_Char(pdate, 'MM'),
                To_Char(pdate, 'yyyy'),
                To_Char(pdate, 'ss')
            From
                ss_9794_punch_temp;

        Commit;
    /*exception
    when others then null;*/
    End;

    Function emp_ts Return typ_tab_emp_ts
        Pipelined
    As

        Cursor cur_ts_4_9794 Is
        Select
            *
        From
            ss_9794_vu_ts;

        rec_emp_ts_singel_day        typ_rec_emp_ts_singel_day;
        rec_emp_ts_singel_day_null   typ_rec_emp_ts_singel_day;
        tbl_emp_ts                   typ_tab_emp_ts;
        Type typ_tbl_ts_9794 Is
            Table Of cur_ts_4_9794%rowtype Index By Pls_Integer;
        tbl_ts_p9794                 typ_tbl_ts_9794;
    Begin
    -- TODO: Implementation required for Function PKG_09794.emp_ts
        Open cur_ts_4_9794;
        Loop
            Fetch cur_ts_4_9794 Bulk Collect Into tbl_ts_p9794 Limit 50;
            For indx In 1..tbl_ts_p9794.count Loop
                rec_emp_ts_singel_day.empno    := tbl_ts_p9794(indx).empno;
                rec_emp_ts_singel_day.yyyymm   := tbl_ts_p9794(indx).yymm;
                --rec_emp_ts_singel_day.projno        := tbl_ts_p9794(indx).projno;
                If Nvl(tbl_ts_p9794(indx).d1, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '01', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d1;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d2, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '02', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d2;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d3, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '03', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d3;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d4, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '04', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d4;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d5, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '05', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d5;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d6, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '06', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d6;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d7, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '07', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d7;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d8, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '08', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d8;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d9, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '09', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d9;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d10, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '10', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d10;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d11, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '11', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d11;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d12, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '12', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d12;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d13, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '13', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d13;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d14, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '14', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d14;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d15, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '15', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d15;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d16, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '16', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d16;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d17, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '17', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d17;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d18, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '18', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d18;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d19, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '19', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d19;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d20, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '20', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d20;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d21, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '21', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d21;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d22, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '22', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d22;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d23, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '23', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d23;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d24, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '24', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d24;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d25, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '25', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d25;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d26, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '26', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d26;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d27, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '27', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d27;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d28, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '28', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d28;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d29, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '29', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d29;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d30, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '30', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d30;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d31, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date           := To_Date(tbl_ts_p9794(indx).yymm || '31', 'yyyymmdd');

                    rec_emp_ts_singel_day.work_hours        := tbl_ts_p9794(indx).d31;
                    rec_emp_ts_singel_day.first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                rec_emp_ts_singel_day          := rec_emp_ts_singel_day_null;
            End Loop;

            Exit When cur_ts_4_9794%notfound;
        End Loop;

    End emp_ts;

    Function emp_ts_4_month (
        param_yyyymm Varchar2
    ) Return typ_tab_emp_ts_ac
        Pipelined
    As

        Cursor cur_ts_4_9794 Is
        Select
            *
        From
            ss_9794_vu_ts
        Where
            yymm = param_yyyymm
        Order By
            empno;--and empno='03455';

        rec_emp_ts_singel_day        typ_rec_emp_ts_ac_singel_day;
        rec_emp_ts_singel_day_null   typ_rec_emp_ts_ac_singel_day;
        tbl_emp_ts                   typ_tab_emp_ts_ac;
        Type typ_tbl_ts_9794 Is
            Table Of cur_ts_4_9794%rowtype Index By Pls_Integer;
        tbl_ts_p9794                 typ_tbl_ts_9794;
    Begin
    -- TODO: Implementation required for Function PKG_09794.emp_ts
        Open cur_ts_4_9794;
        Loop
            Fetch cur_ts_4_9794 Bulk Collect Into tbl_ts_p9794 Limit 50;
            For indx In 1..tbl_ts_p9794.count Loop
                rec_emp_ts_singel_day.empno    := tbl_ts_p9794(indx).empno;
                rec_emp_ts_singel_day.yyyymm   := tbl_ts_p9794(indx).yymm;
                Select
                    name,
                    parent
                Into
                        rec_emp_ts_singel_day
                    .emp_name,
                    rec_emp_ts_singel_day.parent
                From
                    ss_emplmast
                Where
                    empno = rec_emp_ts_singel_day.empno;
                --rec_emp_ts_singel_day.projno        := tbl_ts_p9794(indx).projno;

                If Nvl(tbl_ts_p9794(indx).d1, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '01', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d1;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d2, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '02', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d2;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d3, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '03', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d3;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d4, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '04', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d4;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d5, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '05', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d5;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d6, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '06', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d6;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d7, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '07', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d7;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d8, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '08', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d8;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d9, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '09', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d9;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d10, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '10', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d10;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d11, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '11', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d11;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d12, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '12', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d12;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d13, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '13', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d13;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d14, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '14', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d14;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d15, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '15', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d15;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d16, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '16', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d16;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d17, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '17', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d17;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d18, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '18', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d18;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d19, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '19', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d19;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d20, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '20', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d20;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d21, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '21', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d21;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d22, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '22', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d22;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d23, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '23', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d23;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d24, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '24', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d24;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d25, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '25', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d25;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d26, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '26', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d26;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d27, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '27', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d27;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d28, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '28', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d28;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d29, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '29', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d29;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d30, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '30', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d30;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d31, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date              := To_Date(tbl_ts_p9794(indx).yymm || '31', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours             := tbl_ts_p9794(indx).d31;
                    rec_emp_ts_singel_day.ss_first_punch       := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch        := get_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_first_punch_sec   := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.ss_last_punch_sec    := get_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch       := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch        := get_access_control_punch(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.bt_first_punch_sec   := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'OK'
                    );
                    rec_emp_ts_singel_day.bt_last_punch_sec    := get_access_control_punch_sec(
                        rec_emp_ts_singel_day.empno,
                        rec_emp_ts_singel_day.ts_date,
                        'KO'
                    );
                    rec_emp_ts_singel_day.ss_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.ss_last_punch_sec - rec_emp_ts_singel_day
                    .ss_first_punch_sec) / 60));

                    rec_emp_ts_singel_day.bt_work_hrs          := to_hrs(Trunc((rec_emp_ts_singel_day.bt_last_punch_sec - rec_emp_ts_singel_day
                    .bt_first_punch_sec) / 60));

                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                rec_emp_ts_singel_day          := rec_emp_ts_singel_day_null;
            End Loop;

            Exit When cur_ts_4_9794%notfound;
        End Loop;

    End emp_ts_4_month;

    Function get_emp_ts_4_month (
        param_empno Varchar2,
        param_yyyymm Varchar2
    ) Return typ_tab_emp_time_sheet
        Pipelined
    Is

        Cursor cur_ts_4_9794 Is
        Select
            *
        From
            ss_9794_vu_ts
        Where
            yymm = param_yyyymm
            And empno = param_empno;

        rec_emp_ts_singel_day        typ_rec_emp_timesheet;
        rec_emp_ts_singel_day_null   typ_rec_emp_timesheet;
        tbl_emp_ts                   typ_rec_emp_timesheet;
        Type typ_tbl_ts_9794 Is
            Table Of cur_ts_4_9794%rowtype Index By Pls_Integer;
        tbl_ts_p9794                 typ_tbl_ts_9794;
    Begin
        Open cur_ts_4_9794;
        Loop
            Fetch cur_ts_4_9794 Bulk Collect Into tbl_ts_p9794 Limit 50;
            For indx In 1..tbl_ts_p9794.count Loop
                rec_emp_ts_singel_day.empno    := tbl_ts_p9794(indx).empno;
                rec_emp_ts_singel_day.yyyymm   := tbl_ts_p9794(indx).yymm;
                If Nvl(tbl_ts_p9794(indx).d1, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '01', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d1;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d2, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '02', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d2;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d3, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '03', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d3;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d4, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '04', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d4;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d5, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '05', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d5;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d6, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '06', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d6;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d7, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '07', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d7;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d8, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '08', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d8;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d9, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '09', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d9;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d10, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '10', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d10;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d11, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '11', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d11;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d12, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '12', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d12;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d13, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '13', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d13;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d14, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '14', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d14;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d15, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '15', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d15;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d16, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '16', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d16;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d17, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '17', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d17;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d18, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '18', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d18;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d19, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '19', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d19;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d20, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '20', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d20;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d21, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '21', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d21;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d22, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '22', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d22;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d23, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '23', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d23;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d24, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '24', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d24;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d25, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '25', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d25;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d26, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '26', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d26;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d27, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '27', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d27;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d28, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '28', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d28;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d29, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '29', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d29;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d30, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '30', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d30;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                If Nvl(tbl_ts_p9794(indx).d31, 0) > 0 Then
                    rec_emp_ts_singel_day.ts_date    := To_Date(tbl_ts_p9794(indx).yymm || '31', 'yyyymmdd');

                    rec_emp_ts_singel_day.ts_hours   := tbl_ts_p9794(indx).d31;
                    Pipe Row ( rec_emp_ts_singel_day );
                End If;

                rec_emp_ts_singel_day          := rec_emp_ts_singel_day_null;
            End Loop;

            Exit When cur_ts_4_9794%notfound;
        End Loop;

    End;

    Function get_punch (
        param_empno         Varchar2,
        param_date          Date,
        param_first_punch   Varchar2
    ) Return Varchar2 As
        rec_punch_data   selfservice.ss_integratedpunch%rowtype;
        v_ret_val        Varchar2(13);
        v_count          Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_integratedpunch
        Where
            empno = param_empno
            And pdate = param_date;

        If param_first_punch = 'OK' Then
            If v_count = 0 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        selfservice.ss_integratedpunch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh,
                        mm,
                        ss
                )
            Where
                Rownum = 1;

        Elsif param_first_punch = 'KO' Then
            If v_count < 2 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        selfservice.ss_integratedpunch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh Desc,
                        mm Desc,
                        ss Desc
                )
            Where
                Rownum = 1;

        Else
            Return '';
        End If;

        v_ret_val := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00');

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_access_control_punch (
        param_empno         Varchar2,
        param_date          Date,
        param_first_punch   Varchar2
    ) Return Varchar2 As
        rec_punch_data   ss_9794_punch%rowtype;
        v_ret_val        Varchar2(13);
        v_count          Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_9794_punch
        Where
            empno = param_empno
            And pdate = param_date;

        If param_first_punch = 'OK' Then
            If v_count = 0 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        ss_9794_punch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh,
                        mm,
                        ss
                )
            Where
                Rownum = 1;

        Elsif param_first_punch = 'KO' Then
            If v_count < 2 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        ss_9794_punch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh Desc,
                        mm Desc,
                        ss Desc
                )
            Where
                Rownum = 1;

        Else
            Return '';
        End If;

        v_ret_val := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00');

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_punch_adjusted (
        param_empno         Varchar2,
        param_date          Date,
        param_first_punch   Varchar2
    ) Return Varchar2 As

        rec_punch_data   selfservice.ss_integratedpunch%rowtype;
        v_ret_val        Varchar2(13);
        v_ss             Number(6);
        v_random_num     Number(6);
    Begin
        If param_first_punch = 'OK' Then
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        selfservice.ss_integratedpunch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh,
                        mm,
                        ss
                )
            Where
                Rownum = 1;

            v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

            v_random_num        := Round(dbms_random.Value(
                150,
                270
            )); -- 2.5min , 4.5min
            v_ss                := v_ss + v_random_num;
            rec_punch_data.hh   := Trunc(v_ss / 3600);
            rec_punch_data.mm   := Trunc(Mod(
                v_ss,
                3600
            ) / 60);
            rec_punch_data.ss   := Mod(
                Mod(
                    v_ss,
                    3600
                ),
                60
            );
        Elsif param_first_punch = 'KO' Then
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        selfservice.ss_integratedpunch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh Desc,
                        mm Desc,
                        ss Desc
                )
            Where
                Rownum = 1;

            v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

            v_random_num        := Round(dbms_random.Value(
                150,
                270
            )); -- 2.5min , 4.5min
            v_ss                := v_ss - v_random_num;
            rec_punch_data.hh   := Trunc(v_ss / 3600);
            rec_punch_data.mm   := Trunc(Mod(
                v_ss,
                3600
            ) / 60);
            rec_punch_data.ss   := Mod(
                Mod(
                    v_ss,
                    3600
                ),
                60
            );
        Else
            Return '';
        End If;

        v_ret_val := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00') || '.000';

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_punch_tea (
        param_empno Varchar2,
        param_date Date
    ) Return Varchar2 As

        rec_punch_data   selfservice.ss_integratedpunch%rowtype;
        v_ret_val        Varchar2(50);
        v_ss             Number(6);
        v_random_num     Number(6);
    Begin
        Select
            *
        Into rec_punch_data
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh,
                    mm,
                    ss
            )
        Where
            Rownum = 1;

        v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

        v_random_num        := Round(dbms_random.Value(
            5400,
            5400 + 900
        )); -- InTime + 1.5Hrs , InTime + 1.5Hrs + 15Mns
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out for Tea
        v_ret_val           := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00') || '.000';

            --In From Tea

        v_random_num        := Round(dbms_random.Value(
            600,
            900
        )); -- 10Min , 15Min
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out - IN ffrom Tea
        v_ret_val           := v_ret_val || ' - ' || To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') --
         || ':' || To_Char(rec_punch_data.ss, 'FM00') || '.000';

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_lunch (
        param_empno   Varchar2,
        param_date    Date,
        param_ok      Varchar2
    ) Return Varchar2 As

        rec_punch_data        selfservice.ss_integratedpunch%rowtype;
        v_ret_val             Varchar2(50);
        v_ss                  Number(6);
        v_random_num          Number(6);
        rec_punch_data_last   selfservice.ss_integratedpunch%rowtype;
        v_ss_last             Number(6);
    Begin
        Select
            *
        Into rec_punch_data
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh,
                    mm,
                    ss
            )
        Where
            Rownum = 1;

        Select
            *
        Into rec_punch_data_last
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh Desc,
                    mm Desc,
                    ss Desc
            )
        Where
            Rownum = 1;

        v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

        v_ss_last           := ( rec_punch_data_last.hh * 60 * 60 ) + ( rec_punch_data_last.mm * 60 ) + ( rec_punch_data_last.ss );

        If v_ss_last - v_ss < 19000 Then
            Return '0';
        End If;
        v_random_num        := Round(dbms_random.Value(
            15300,
            15900
        )); -- InTime + 4.25Hrs , InTime + 1.5Hrs + 10Mns
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out for Lunch
        v_ret_val           := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00') || '.000';

            --In From Lunch

        v_random_num        := Round(dbms_random.Value(
            2100,
            2700
        )); -- 35Min , 45Min
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out - IN ffrom Tea
        v_ret_val           := v_ret_val || ' - ' || To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') --
         || ':' || To_Char(rec_punch_data.ss, 'FM00') || '.000';

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_evening_tea (
        param_empno   Varchar2,
        param_date    Date,
        param_ok      Varchar2
    ) Return Varchar2 As

        rec_punch_data        selfservice.ss_integratedpunch%rowtype;
        rec_punch_data_last   selfservice.ss_integratedpunch%rowtype;
        v_ret_val             Varchar2(50);
        v_ss                  Number(6);
        v_ss_last             Number(6);
        v_random_num          Number(6);
    Begin
        Select
            *
        Into rec_punch_data
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh,
                    mm,
                    ss
            )
        Where
            Rownum = 1;

        Select
            *
        Into rec_punch_data_last
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh Desc,
                    mm Desc,
                    ss Desc
            )
        Where
            Rownum = 1;

        v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

        v_ss_last           := ( rec_punch_data_last.hh * 60 * 60 ) + ( rec_punch_data_last.mm * 60 ) + ( rec_punch_data_last.ss );

        If v_ss_last - v_ss < 25000 Then
            Return '0';
        End If;
        v_random_num        := Round(dbms_random.Value(
            23400,
            23400 + 600
        )); -- InTime + 6.5Hrs , InTime + 6.5Hrs + 10Mns
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out for Lunch
        v_ret_val           := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00') || '.000';

            --In From Lunch

        v_random_num        := Round(dbms_random.Value(
            600,
            900
        )); -- 35Min , 45Min
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out - IN ffrom Tea
        v_ret_val           := v_ret_val || ' - ' || To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') --
         || ':' || To_Char(rec_punch_data.ss, 'FM00') || '.000';

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_evening_break (
        param_empno   Varchar2,
        param_date    Date,
        param_ok      Varchar2
    ) Return Varchar2 As

        rec_punch_data        selfservice.ss_integratedpunch%rowtype;
        rec_punch_data_last   selfservice.ss_integratedpunch%rowtype;
        v_ret_val             Varchar2(50);
        v_ss                  Number(6);
        v_ss_last             Number(6);
        v_random_num          Number(6);
    Begin
        Select
            *
        Into rec_punch_data
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh,
                    mm,
                    ss
            )
        Where
            Rownum = 1;

        Select
            *
        Into rec_punch_data_last
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh Desc,
                    mm Desc,
                    ss Desc
            )
        Where
            Rownum = 1;

        v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

        v_ss_last           := ( rec_punch_data_last.hh * 60 * 60 ) + ( rec_punch_data_last.mm * 60 ) + ( rec_punch_data_last.ss );

        If v_ss_last - v_ss < 25000 Then
            Return '0';
        End If;
        v_random_num        := Round(dbms_random.Value(
            26100,
            26100 + 600
        )); -- InTime + 6.5Hrs , InTime + 6.5Hrs + 10Mns
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out for Lunch
        v_ret_val           := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00') || '.000';

            --In From Lunch

        v_random_num        := Round(dbms_random.Value(
            540,
            780
        )); -- 9Min , 13Min
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out - IN ffrom Tea
        v_ret_val           := v_ret_val || ' - ' || To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') --
         || ':' || To_Char(rec_punch_data.ss, 'FM00') || '.000';

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_afternoon_break (
        param_empno   Varchar2,
        param_date    Date,
        param_ok      Varchar2
    ) Return Varchar2 As

        rec_punch_data        selfservice.ss_integratedpunch%rowtype;
        rec_punch_data_last   selfservice.ss_integratedpunch%rowtype;
        v_ret_val             Varchar2(50);
        v_ss                  Number(6);
        v_ss_last             Number(6);
        v_random_num          Number(6);
    Begin
        Select
            *
        Into rec_punch_data
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh,
                    mm,
                    ss
            )
        Where
            Rownum = 1;

        Select
            *
        Into rec_punch_data_last
        From
            (
                Select
                    *
                From
                    selfservice.ss_integratedpunch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh Desc,
                    mm Desc,
                    ss Desc
            )
        Where
            Rownum = 1;

        v_ss                := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + ( rec_punch_data.ss );

        v_ss_last           := ( rec_punch_data_last.hh * 60 * 60 ) + ( rec_punch_data_last.mm * 60 ) + ( rec_punch_data_last.ss );

        If v_ss_last - v_ss < 25000 Then
            Return '0';
        End If;
        v_random_num        := Round(dbms_random.Value(
            9000,
            9000 + 600
        )); -- InTime + 6.5Hrs , InTime + 6.5Hrs + 10Mns
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out for Lunch
        v_ret_val           := To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') || ':' || To_Char(rec_punch_data
        .ss, 'FM00') || '.000';

            --In From Lunch

        v_random_num        := Round(dbms_random.Value(
            540,
            780
        )); -- 9Min , 13Min
        v_ss                := v_ss + v_random_num;
        rec_punch_data.hh   := Trunc(v_ss / 3600);
        rec_punch_data.mm   := Trunc(Mod(
            v_ss,
            3600
        ) / 60);
        rec_punch_data.ss   := Mod(
            Mod(
                v_ss,
                3600
            ),
            60
        );
            
            --Out - IN ffrom Tea
        v_ret_val           := v_ret_val || ' - ' || To_Char(rec_punch_data.hh, 'FM00') || ':' || To_Char(rec_punch_data.mm, 'FM00') --
         || ':' || To_Char(rec_punch_data.ss, 'FM00') || '.000';

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_empno (
        param_username Varchar2
    ) Return Varchar2 As

        v_empno         Varchar2(5);
        v_ret_val       Varchar2(60);
        v_emp_count     Number;
        v_user_domain   Varchar2(30);
        v_user_id       Varchar2(30);
    Begin
        v_user_domain   := Substr(param_username, 1, Instr(param_username, '\') - 1);

        v_user_id       := Substr(param_username, Instr(param_username, '\') + 1);
        Select
            a.empno
        Into v_empno
        From
            userids       a,
            ss_emplmast   b
        Where
            a.empno = b.empno
            And userid    = Upper(Trim(v_user_id))
            And domain    = Upper(Trim(v_user_domain))
            And b.status  = 1;

        If v_empno = '02320' Then
            --v_empno := '01773';
            v_empno := '02320';
        End If;
        v_ret_val       := v_empno;
        Return v_ret_val;
    Exception
        When Others Then
            Return 'NONE';
    End get_empno;
 /*=======================================================================*/

    Function check_user_in_role (
        param_username Varchar2,
        param_role Varchar2
    ) Return Varchar2 As

        v_empno       Varchar2(5) := 'XXZZ!';
        v_count       Number;
        v_ret_val     Varchar2(10);
        v_emp_found   Number := 1;
    Begin
        Begin
            Select
                a.empno
            Into v_empno
            From
                userids       a,
                ss_emplmast   b
            Where
                a.empno = b.empno
                And userid    = Upper(Trim(Substr(param_username, 6, 50)))
                And domain    = Upper(Substr(param_username, 1, 4))
                And b.status  = 1;

        Exception
            When Others Then
                Return 'FALSE';
        End;

        If ( Nvl(v_empno, 'XXZZ!') != 'XXZZ!' ) Then
            Select
                Count(*)
            Into v_count
            From
                ss_emplmast
            Where
                empno = v_empno
                And status = 1;

            If ( v_count > 0 ) Then
                v_emp_found := 1;
            End If;
        Else
            v_emp_found := 0;
        End If;
    /*-GENSE
HR
AFC
CONSTLOG
PROJECTS-*/

        If ( v_emp_found = 1 ) Then
            If ( param_role = 'GENSE' ) Then
                Select
                    Count(*)
                Into v_count
                From
                    ss_9794_emp_roles
                Where
                    empno = v_empno;

                If ( v_count > 0 ) Then
                    v_ret_val := 'TRUE';
                    Return v_ret_val;
                Else
                    v_ret_val := 'FALSE';
                    Return v_ret_val;
                End If;

            Elsif ( param_role = 'HR' ) Then
                Select
                    Count(*)
                Into v_count
                From
                    ss_9794_emp_roles
                Where
                    empno = v_empno;

                If ( v_count > 0 ) Then
                    v_ret_val := 'TRUE';
                    Return v_ret_val;
                Else
                    v_ret_val := 'FALSE';
                    Return v_ret_val;
                End If;

            Elsif ( param_role = 'PROJECTS' ) Then
                Select
                    Count(*)
                Into v_count
                From
                    ss_9794_emp_roles
                Where
                    empno = v_empno;

                If ( v_count > 0 ) Then
                    v_ret_val := 'TRUE';
                    Return v_ret_val;
                Else
                    v_ret_val := 'FALSE';
                    Return v_ret_val;
                End If;

            Elsif ( param_role = 'CONSTLOG' ) Then
                Select
                    Count(*)
                Into v_count
                From
                    ss_9794_emp_roles
                Where
                    empno = v_empno;

                If ( v_count > 0 ) Then
                    v_ret_val := 'TRUE';
                    Return v_ret_val;
                Else
                    v_ret_val := 'FALSE';
                    Return v_ret_val;
                End If;

            Elsif ( param_role = 'AFC' ) Then
                Select
                    Count(*)
                Into v_count
                From
                    ss_9794_emp_roles
                Where
                    empno = v_empno;

                If ( v_count > 0 ) Then
                    v_ret_val := 'TRUE';
                    Return v_ret_val;
                Else
                    v_ret_val := 'FALSE';
                    Return v_ret_val;
                End If;

            Else
                v_ret_val := 'Role Not Found';
                Return v_ret_val;
            End If;
        End If;

    Exception
        When Others Then
            Return 'Error - ' || Sqlcode || ' -- ' || Sqlerrm;
    End check_user_in_role;
/*=======================================================================*/

    Function get_role_for_user (
        param_username Varchar2
    ) Return Varchar2 As

        v_empno       Varchar2(5);
        v_count       Number;
        v_ret_val     Varchar2(2100);
        v_emp_count   Number;
        v_csv_roles   Varchar2(2000);
    Begin
        v_empno     := get_empno(param_username);
        If v_empno = 'NONE' Then
            Return 'None';
        End If;
        With emp_list As (
            Select
                empno
            From
                ss_9794_emp_list
            Union
            Select
                empno
            From
                ss_9794_emp_roles
        )
        Select
            Count(b.empno)
        Into v_emp_count
        From
            ss_emplmast   b,
            emp_list      c
        Where
            b.empno = v_empno
            And b.empno   = c.empno
            And b.status  = 1;
        if v_emp_count > 0 Then
            v_ret_val := '9794User';
        end if;
        Select
            Count(*)
        Into v_count
        From
            ss_costmast
        Where
            hod = v_empno;

        If v_ret_val Is Not Null and v_count > 0 Then
            v_ret_val := v_ret_val || ',HOD';
        --Else
            --v_ret_val := 'HOD';
        End If;
        
        --
        If v_emp_count = 0 And v_count = 0 Then
            Select
                Count(*)
            Into v_emp_count
            From
                ss_9794_emp_roles
            Where
                empno = get_empno(param_username);

            If v_emp_count = 0 Then
                Return 'NONE';
            End If;
        End If;


        Begin
            Select
                csv
            Into v_csv_roles
            From
                (
                    Select
                        Substr(sys_connect_by_path(
                            role_name,
                            ','
                        ), 2) csv
                    From
                        (
                            Select
                                role_name,
                                Row_Number() Over(
                                    Order By
                                        role_name
                                ) rn,
                                Count(*) Over() cnt
                            From
                                (
                                    Select Distinct
                                        b.role_name
                                    From
                                        ss_9794_emp_roles     a,
                                        ss_9794_role_master   b
                                    Where
                                        a.role_id = b.role_id
                                        And empno = v_empno
                                )
                        )
                    Where
                        rn = cnt
                    Start With
                        rn = 1
                    Connect By
                        rn = Prior rn + 1
                );

        Exception
            When Others Then
                v_csv_roles := '';
        End;

        v_ret_val   := v_ret_val || ',' || v_csv_roles;
        Return Trim(Both ',' From v_ret_val);
    Exception
        When Others Then
            Return 'Error - ' || Sqlcode || ' -- ' || Sqlerrm;
    End get_role_for_user;
/*=======================================================================*/

    Function get_emp_name (
        param_empno Varchar2
    ) Return Varchar2 As
        v_ret_val   Varchar2(2000);
        v_count     Number;
    Begin
        Select
            Count(name)
        Into v_count
        From
            ss_emplmast
        Where
            empno = Upper(param_empno)
            And status = 1;

        If ( v_count > 0 ) Then
            Select
                name
            Into v_ret_val
            From
                ss_emplmast
            Where
                empno = Upper(param_empno)
                And status = 1;

            If ( v_ret_val = Null ) Then
                v_ret_val := 'Error';
            End If;
            Return v_ret_val;
        Else
            Return 'Error';
        End If;

    Exception
        When Others Then
            Return 'Error - ' || Sqlcode || ' -- ' || Sqlerrm;
    End get_emp_name;

    Function get_work_hrs_char (
        param_empno Varchar2,
        param_date Date
    ) Return Varchar2 Is
        v_count         Number;
        v_wrk_hrs_num   Number;
        v_ret_val       Varchar2(10);
    Begin
        If Trim(param_empno) Is Null Then
            Return Null;
        End If;
        v_wrk_hrs_num   := get_work_hrs_num(
            param_empno,
            param_date
        );
        If Nvl(v_wrk_hrs_num, 0) = 0 Then
            Return Null;
        End If;
        v_ret_val       := to_hrs(v_wrk_hrs_num);
        Return v_ret_val;
    Exception
        When Others Then
            Return Null;
    End;

    Function get_work_hrs_num (
        param_empno Varchar2,
        param_date Date
    ) Return Number Is
        v_count           Number;
        rec_first_punch   ss_9794_punch%rowtype;
        rec_last_punch    ss_9794_punch%rowtype;
        v_worked_min      Number;
    Begin
        If Trim(param_empno) Is Null Then
            Return Null;
        End If;
        Select
            Count(*)
        Into v_count
        From
            ss_9794_punch
        Where
            empno = param_empno
            And pdate = Trunc(param_date);

        If v_count < 1 Then
            Return Null;
        End If;
        Select
            *
        Into rec_first_punch
        From
            (
                Select
                    *
                From
                    ss_9794_punch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh,
                    mm,
                    ss
            )
        Where
            Rownum = 1;

        Select
            *
        Into rec_last_punch
        From
            (
                Select
                    *
                From
                    ss_9794_punch
                Where
                    empno = param_empno
                    And pdate = param_date
                Order By
                    hh Desc,
                    mm Desc,
                    ss Desc
            )
        Where
            Rownum = 1;

        v_worked_min := ( ( rec_last_punch.hh * 60 ) + rec_last_punch.mm ) - ( ( rec_first_punch.hh * 60 ) + rec_first_punch.mm )
        ;

        Return v_worked_min;
    Exception
        When Others Then
            Return Null;
    End;

    Function get_punch_sec (
        param_empno         Varchar2,
        param_date          Date,
        param_first_punch   Varchar2
    ) Return Number As
        rec_punch_data   selfservice.ss_integratedpunch%rowtype;
        v_ret_val        Number;
        v_count          Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_integratedpunch
        Where
            empno = param_empno
            And pdate = param_date;

        If param_first_punch = 'OK' Then
            If v_count = 0 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        selfservice.ss_integratedpunch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh,
                        mm,
                        ss
                )
            Where
                Rownum = 1;

        Elsif param_first_punch = 'KO' Then
            If v_count < 2 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        selfservice.ss_integratedpunch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh Desc,
                        mm Desc,
                        ss Desc
                )
            Where
                Rownum = 1;

        Else
            Return '';
        End If;

        v_ret_val := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + rec_punch_data.ss;

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_access_control_punch_sec (
        param_empno         Varchar2,
        param_date          Date,
        param_first_punch   Varchar2
    ) Return Number As
        rec_punch_data   ss_9794_punch%rowtype;
        v_ret_val        Number;
        v_count          Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_9794_punch
        Where
            empno = param_empno
            And pdate = param_date;

        If param_first_punch = 'OK' Then
            If v_count = 0 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        ss_9794_punch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh,
                        mm,
                        ss
                )
            Where
                Rownum = 1;

        Elsif param_first_punch = 'KO' Then
            If v_count < 2 Then
                Return ' ';
            End If;
            Select
                *
            Into rec_punch_data
            From
                (
                    Select
                        *
                    From
                        ss_9794_punch
                    Where
                        empno = param_empno
                        And pdate = param_date
                    Order By
                        hh Desc,
                        mm Desc,
                        ss Desc
                )
            Where
                Rownum = 1;

        Else
            Return '';
        End If;

        --v_ret_val   := To_Char(rec_punch_data.hh, 'FM00') ||':' ||To_Char(rec_punch_data.mm, 'FM00') ||':' ||To_Char(rec_punch_data.ss, 'FM00');

        v_ret_val := ( rec_punch_data.hh * 60 * 60 ) + ( rec_punch_data.mm * 60 ) + rec_punch_data.ss;

        Return v_ret_val;
    Exception
        When Others Then
            Return '0';
    End;

    Function get_bt_work_hrs_actual (
        param_empno Varchar2,
        param_date Date
    ) Return Number Is

        v_count      Number;
        v_tot_mns    Number;
        v_in_time    Number;
        v_out_time   Number;
        v_row_num    Number;
        Cursor c1 Is
        Select
            *
        From
            ss_9794_punch
        Where
            empno = param_empno
            And pdate = param_date
        Order By
            hh,
            mm,
            ss;

    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_9794_punch
        Where
            empno = param_empno
            And pdate = param_date;

        If v_count = 0 Or Mod(
            v_count,
            2
        ) <> 0 Then
            Return Null;
        End If;

        v_row_num    := 0;
        v_in_time    := 0;
        v_out_time   := 0;
        v_tot_mns    := 0;
        For c2 In c1 Loop
            v_row_num := v_row_num + 1;
            If Mod(
                v_row_num,
                2
            ) <> 0 Then
                v_in_time := ( c2.hh * 60 ) + c2.mm;
            Else
                v_out_time   := ( c2.hh * 60 ) + c2.mm;
                v_tot_mns    := v_tot_mns + ( v_out_time - v_in_time );
            End If;

        End Loop;

        Return v_tot_mns;
    End get_bt_work_hrs_actual;

End pkg_09794;
/
---------------------------
--Changed PACKAGE BODY
--PENDING_APPROVALS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."PENDING_APPROVALS" As

    Function list_of_leads_not_approving Return typ_tab_emp_email
        Pipelined
    As

        Cursor cur_lead Is
        Select
            substr(empno, 1, 5) emp_no,
            substr(name, 1, 100) emp_name,
            substr(email, 1,100) emp_email
          From
            ss_emplmast
         Where
            empno In (
                Select
                    a.lead_apprl_empno
                  From
                    ss_ondutyapp a
                 Where
                    nvl(lead_apprl, ss.ot_pending) = ss.ot_pending And to_number(To_Char(a.app_date, 'yyyymm')) >= to_number(To_Char
                    (add_months(Sysdate, - 3), 'YYYYMM'))
                Union
                Select
                    a.lead_apprl_empno
                  From
                    ss_leaveapp a
                 Where
                    nvl(lead_apprl, ss.ot_pending) = ss.ot_pending And to_number(To_Char(a.app_date, 'yyyymm')) >= to_number(To_Char
                    (add_months(Sysdate, - 3), 'YYYYMM'))
                Union
                Select
                    a.lead_apprl_empno
                  From
                    ss_otmaster a
                 Where
                    nvl(lead_apprl, ss.ot_pending) = ss.ot_pending And to_number(a.yyyy || a.mon) >= to_number(To_Char(add_months
                    (Sysdate, - 24), 'YYYYMM'))
            ) And status = 1 and empno not in ('04600', '04132') and email is not null;

        tab_lead typ_tab_emp_email;
    Begin
        Open cur_lead;
        Fetch cur_lead Bulk Collect Into tab_lead Limit 50;
        Loop
            For i In 1..tab_lead.count Loop Pipe Row ( tab_lead(i) );
            End Loop;

            Exit When cur_lead%notfound;
            tab_lead := Null;
            Fetch cur_lead Bulk Collect Into tab_lead Limit 50;
        End Loop;
        --Return Null;

    End list_of_leads_not_approving;

    Function list_of_hod_not_approving Return typ_tab_emp_email
        Pipelined
    As

        Cursor cur_hod Is
        Select
            substr(empno, 1, 5) emp_no,
            substr(name, 1, 100) emp_name,
            substr(email, 1, 100) emp_email
          From
            ss_emplmast
         Where
            empno In (
                Select
                    mngr As approver
                  From
                    ss_emplmast
                 Where
                    empno In (
                        Select
                            empno
                          From
                            ss_otmaster a
                         Where
                            nvl(lead_apprl, ss.ot_pending) <> ss.ot_pending And nvl(hod_apprl, ss.ot_pending) = ss.ot_pending
                             And to_number(a.yyyy || a.mon) >= to_number(To_Char(add_months (Sysdate, - 24), 'YYYYMM'))
                        Union
                        Select
                            empno
                          From
                            ss_ondutyapp a
                         Where
                            nvl(lead_apprl, ss.ot_pending) <> ss.ot_pending And nvl(hod_apprl, ss.ot_pending) = ss.ot_pending
                            And to_number(To_Char(a.app_date, 'yyyymm')) >= to_number(To_Char (add_months(Sysdate, - 3), 'YYYYMM'))
                        Union
                        Select
                            empno
                          From
                            ss_leaveapp a
                         Where
                            nvl(lead_apprl, ss.ot_pending) <> ss.ot_pending And nvl(hod_apprl, ss.ot_pending) = ss.ot_pending
                            And to_number(To_Char(a.app_date, 'yyyymm')) >= to_number(To_Char (add_months(Sysdate, - 3), 'YYYYMM'))
                    ) and empno not in ('04600', '04132') and status=1
            ) and empno not in ('04600', '04132') and email is not null;

        tab_hod typ_tab_emp_email;
    Begin
        Open cur_hod;
        Fetch cur_hod Bulk Collect Into tab_hod Limit 50;
        Loop
            For i In 1..tab_hod.count Loop Pipe Row ( tab_hod(i) );
            End Loop;

            Exit When cur_hod%notfound;
            tab_hod := Null;
            Fetch cur_hod Bulk Collect Into tab_hod Limit 50;
        End Loop;
        --Return Null;

    End list_of_hod_not_approving;

End pending_approvals;
/
---------------------------
--Changed PACKAGE BODY
--OD
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."OD" As

    Procedure add_to_depu (
        p_empno            Varchar2,
        p_depu_type        Varchar2,
        p_bdate            Date,
        p_edate            Date,
        p_entry_by_empno   Varchar2,
        p_lead_approver    Varchar2,
        p_user_ip          Varchar2,
        p_reason           Varchar2,
        p_success          Out                Varchar2,
        p_message          Out                Varchar2
    );

    Procedure set_variables_4_entry_by (
        p_entry_by_empno       Varchar2,
        p_entry_by_hr          Varchar2,
        p_entry_by_hr_4_self   Varchar2,
        p_lead_empno           In Out                 Varchar2,
        p_lead_apprl           Out                    Varchar2,
        p_hod_empno            Out                    Varchar2,
        p_hod_apprl            Out                    Varchar2,
        p_hod_ip               Out                    Varchar2,
        p_hrd_empno            Out                    Varchar2,
        p_hrd_apprl            Out                    Varchar2,
        p_hrd_ip               In Out                 Varchar2,
        p_hod_apprl_dt         Out                    Date,
        p_hrd_apprl_dt         Out                    Date
    ) As
        v_hr_ip      Varchar2(20);
        v_hr_empno   Varchar2(5);
    Begin
        v_hr_ip          := p_hrd_ip;
        p_hod_apprl      := 0;
        p_hrd_apprl      := 0;
        p_lead_apprl     := 0;
        p_hrd_ip         := Null;
        --
        If Lower(p_lead_empno) = 'none' Then
            p_lead_apprl := ss.apprl_none;
        End If;
        If Nvl(p_entry_by_hr, 'KO') != 'OK' Or Nvl(p_entry_by_hr_4_self, 'KO') = 'OK' Then
            return;
        End If;
        --

        p_lead_empno     := 'None';
        p_lead_apprl     := ss.apprl_none;
        --
        p_hod_empno      := p_entry_by_empno;
        p_hrd_empno      := p_entry_by_empno;
            --
        p_hod_apprl      := ss.approved;
        p_hrd_apprl      := ss.approved;
            --p_lead_apprl   := 0;
        p_hod_ip         := v_hr_ip;
        p_hrd_ip         := v_hr_ip;
            --
        p_hod_apprl_dt   := Sysdate;
        p_hrd_apprl_dt   := Sysdate;
    End;

    Procedure nu_app_send_mail (
        param_app_no    Varchar2,
        param_success   Out             Number,
        param_message   Out             Varchar2
    ) As

        v_count        Number;
        v_lead_code    Varchar2(5);
        v_lead_apprl   Number;
        v_empno        Varchar2(5);
        v_email_id     Varchar2(60);
        vsubject       Varchar2(100);
        vbody          Varchar2(5000);
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_ondutyapp
        Where
            Trim(app_no) = Trim(param_app_no);

        If v_count <> 1 Then
            return;
        End If;
        Select
            lead_code,
            lead_apprl,
            empno
        Into
            v_lead_code,
            v_lead_apprl,
            v_empno
        From
            ss_ondutyapp
        Where
            Trim(app_no) = Trim(param_app_no);

        If Trim(Nvl(v_lead_code, ss.lead_none)) = Trim(ss.lead_none) Then
            Select
                email
            Into v_email_id
            From
                ss_emplmast
            Where
                empno = (
                    Select
                        mngr
                    From
                        ss_emplmast
                    Where
                        empno = v_empno
                );

        Else
            Select
                email
            Into v_email_id
            From
                ss_emplmast
            Where
                empno = v_lead_code;

        End If;

        If v_email_id Is Null Then
            param_success   := ss.failure;
            param_message   := 'Email Id of the approver found blank. Cannot send email.';
            return;
        End If;
        --v_email_id := 'd.bhavsar@ticb.com';

        vsubject   := 'Application of ' || v_empno;
        vbody      := 'There is ' || vsubject || '. Kindly click the following URL to do the needful.';
        vbody      := vbody || '!nuLine!' || ss.application_url || '/SS_OD.asp?App_No=' || param_app_no;

        vbody      := vbody || '!nuLine!' || '!nuLine!' || '!nuLine!' || '!nuLine!' || 'Note : This is a system generated message.';

        ss_mail.send_mail(
            v_email_id,
            vsubject,
            vbody,
            param_success,
            param_message
        );
    End nu_app_send_mail;

    Procedure approve_od (
        param_array_app_no       Varchar2,
        param_array_rem          Varchar2,
        param_array_od_type      Varchar2,
        param_array_apprl_type   Varchar2,
        param_approver_profile   Number,
        param_approver_code      Varchar2,
        param_approver_ip        Varchar2,
        param_success            Out                      Varchar2,
        param_message            Out                      Varchar2
    ) As

        onduty        Constant Number := 2;
        deputation    Constant Number := 3;
        v_count       Number;
        Type type_app Is
            Table Of Varchar2(30) Index By Binary_Integer;
        Type type_rem Is
            Table Of Varchar2(31) Index By Binary_Integer;
        Type type_od Is
            Table Of Varchar2(3) Index By Binary_Integer;
        Type type_apprl Is
            Table Of Varchar2(3) Index By Binary_Integer;
        tab_app       type_app;
        tab_rem       type_rem;
        tab_od        type_od;
        tab_apprl     type_apprl;
        v_rec_count   Number;
        sqlpartod     Varchar2(60) := 'Update SS_OnDutyApp ';
        sqlpartdp     Varchar2(60) := 'Update SS_Depu ';
        sqlpart2      Varchar2(500);
        strsql        Varchar2(600);
    Begin
        sqlpart2        := ' set ApproverProfile_APPRL = :Approval, ApproverProfile_Code = :Approver_EmpNo, ApproverProfile_APPRL_DT = Sysdate,
                    ApproverProfile_TCP_IP = :User_TCP_IP , ApproverProfileREASON = :Reason where App_No = :paramAppNo'
        ;
        If param_approver_profile = user_profile.type_hod Or param_approver_profile = user_profile.type_sec Then
            sqlpart2 := Replace(sqlpart2, 'ApproverProfile', 'HOD');
        Elsif param_approver_profile = user_profile.type_hrd Then
            sqlpart2 := Replace(sqlpart2, 'ApproverProfile', 'HRD');
        Elsif param_approver_profile = user_profile.type_lead Then
            sqlpart2 := Replace(sqlpart2, 'ApproverProfile', 'LEAD');
        End If;

        With tab As (
            Select
                param_array_app_no As txt_app
            From
                dual
        )
        Select
            Regexp_Substr(txt_app, '[^,]+', 1, Level)
        Bulk Collect
        Into tab_app
        From
            tab
        Connect By
            Level <= Length(Regexp_Replace(txt_app, '[^,]*'));

        v_rec_count     := Sql%rowcount;
        With tab As (
            Select
                '  ' || param_array_rem As txt_rem
            From
                dual
        )
        Select
            Regexp_Substr(txt_rem, '[^,]+', 1, Level)
        Bulk Collect
        Into tab_rem
        From
            tab
        Connect By
            Level <= Length(Regexp_Replace(txt_rem, '[^,]*')) + 1;

        With tab As (
            Select
                param_array_od_type As txt_od
            From
                dual
        )
        Select
            Regexp_Substr(txt_od, '[^,]+', 1, Level)
        Bulk Collect
        Into tab_od
        From
            tab
        Connect By
            Level <= Length(Regexp_Replace(txt_od, '[^,]*')) + 1;

        With tab As (
            Select
                param_array_apprl_type As txt_apprl
            From
                dual
        )
        Select
            Regexp_Substr(txt_apprl, '[^,]+', 1, Level)
        Bulk Collect
        Into tab_apprl
        From
            tab
        Connect By
            Level <= Length(Regexp_Replace(txt_apprl, '[^,]*')) + 1;

        For indx In 1..tab_app.count Loop
            If To_Number(tab_od(indx)) = deputation Then
                strsql := sqlpartdp || ' ' || sqlpart2;
            Elsif To_Number(tab_od(indx)) = onduty Then
                strsql := sqlpartod || ' ' || sqlpart2;
            End If;

            Execute Immediate strsql
                Using Trim(tab_apprl(indx)), param_approver_code, param_approver_ip, Trim(tab_rem(indx)), Trim(tab_app(indx));

            If tab_od(indx) = onduty Then
            --IF 1=2 Then
                Insert Into ss_onduty Value
                    ( Select
                        empno,
                        hh,
                        mm,
                        pdate,
                        0,
                        dd,
                        mon,
                        yyyy,
                        type,
                        app_no,
                        description,
                        getodhh(
                            app_no,
                            1
                        ),
                        getodmm(
                            app_no,
                            1
                        ),
                        app_date,
                        reason,
                        odtype
                    From
                        ss_ondutyapp
                    Where
                        Trim(app_no) = Trim(tab_app(indx))
                        And Nvl(hrd_apprl, ss.pending) = ss.approved
                    );

                Insert Into ss_onduty Value
                    ( Select
                        empno,
                        hh1,
                        mm1,
                        pdate,
                        0,
                        dd,
                        mon,
                        yyyy,
                        type,
                        app_no,
                        description,
                        getodhh(
                            app_no,
                            2
                        ),
                        getodmm(
                            app_no,
                            2
                        ),
                        app_date,
                        reason,
                        odtype
                    From
                        ss_ondutyapp
                    Where
                        Trim(app_no) = Trim(tab_app(indx))
                        And ( type = 'OD'
                              Or type                        = 'IO' )
                        And Nvl(hrd_apprl, ss.pending) = ss.approved
                    );

                If param_approver_profile = user_profile.type_hrd And To_Number(tab_apprl(indx)) = ss.approved Then
                    generate_auto_punch_4od(Trim(tab_app(indx)));
                End If;

            End If;

        End Loop;

        Commit;
        param_success   := 'SUCCESS';
    Exception
        When Others Then
            param_success   := 'FAILURE';
            param_message   := 'ERR :- ' || Sqlcode || ' - ' || Sqlerrm;
    End;

    Procedure add_onduty_type_2 (
        p_empno           Varchar2,
        p_od_type         Varchar2,
        p_b_yyyymmdd      Varchar2,
        p_e_yyyymmdd      Varchar2,
        p_entry_by        Varchar2,
        p_lead_approver   Varchar2,
        p_user_ip         Varchar2,
        p_reason          Varchar2,
        p_success         Out               Varchar2,
        p_message         Out               Varchar2
    ) As

        v_count           Number;
        v_empno           Varchar2(5);
        v_entry_by        Varchar2(5);
        v_lead_approver   Varchar2(5);
        v_od_catg         Number;
        v_bdate           Date;
        v_edate           Date;
    Begin
    --Check Employee Exists
        v_empno           := Substr('0000' || p_empno, -5);
        v_entry_by        := Substr('0000' || p_entry_by, -5);
        v_lead_approver   :=
            Case Lower(p_lead_approver)
                When 'none' Then
                    'None'
                Else Lpad(p_lead_approver, 5, '0')
            End;

        Select
            Count(*)
        Into v_count
        From
            ss_emplmast
        Where
            empno = v_empno;

        If v_count = 0 Then
            p_success   := 'KO';
            p_message   := 'Employee not found in Database.' || v_empno || ' - ' || p_empno;
            return;
        End If;

        v_bdate           := To_Date(p_b_yyyymmdd, 'yyyymmdd');
        v_edate           := To_Date(p_e_yyyymmdd, 'yyyymmdd');
        If v_edate < v_bdate Then
            p_success   := 'KO';
            p_message   := 'Incorrect date range specified';
            return;
        End If;

        If v_lead_approver != 'None' Then
            Select
                Count(*)
            Into v_count
            From
                ss_emplmast
            Where
                empno = v_lead_approver;

            If v_count = 0 Then
                p_success   := 'KO';
                p_message   := 'Lead approver not found in Database.';
                return;
            End If;

        End If;

        Select
            tabletag
        Into v_od_catg
        From
            ss_ondutymast
        Where
            type = p_od_type;

        If v_od_catg In (
            - 1,
            3
        ) Then
            add_to_depu(
                p_empno            => v_empno,
                p_depu_type        => p_od_type,
                p_bdate            => v_bdate,
                p_edate            => v_edate,
                p_entry_by_empno   => v_entry_by,
                p_lead_approver    => v_lead_approver,
                p_user_ip          => p_user_ip,
                p_reason           => p_reason,
                p_success          => p_success,
                p_message          => p_message
            );
        Else
            p_success   := 'KO';
            p_message   := 'Invalid OnDuty Type.';
            return;
        End If;

    Exception
        When Others Then
            p_success   := 'KO';
            p_message   := 'ERR :- ' || Sqlcode || ' - ' || Sqlerrm;
    End;

    Procedure add_to_depu (
        p_empno            Varchar2,
        p_depu_type        Varchar2,
        p_bdate            Date,
        p_edate            Date,
        p_entry_by_empno   Varchar2,
        p_lead_approver    Varchar2,
        p_user_ip          Varchar2,
        p_reason           Varchar2,
        p_success          Out                Varchar2,
        p_message          Out                Varchar2
    ) As

        v_count                   Number;
        v_depu_row                ss_depu%rowtype;
        v_rec_no                  Number;
        v_app_no                  Varchar2(60);
        v_now                     Date;
        v_is_office_ip            Varchar2(10);
        v_entry_by_user_profile   Number;
        v_is_entry_by_hr          Varchar2(2);
        v_is_entry_by_hr_4_self   Varchar2(2);
        v_lead_approver           Varchar2(5);
        v_lead_approval           Number;
        v_hod_empno               Varchar2(5);
        v_hod_ip                  Varchar2(30);
        v_hod_apprl               Number;
        v_hod_apprl_dt            Date;
        v_hrd_empno               Varchar2(5);
        v_hrd_ip                  Varchar2(30);
        v_hrd_apprl               Number;
        v_hrd_apprl_dt            Date;
        v_appl_desc               Varchar2(60);
    Begin
        v_now                     := Sysdate;
        v_lead_approver           := p_lead_approver;
        v_hrd_ip                  := p_user_ip;
        Begin
            Select
                *
            Into v_depu_row
            From
                (
                    Select
                        *
                    From
                        ss_depu
                    Where
                        empno = p_empno
                        And app_date In (
                            Select
                                Max(app_date)
                            From
                                ss_depu
                            Where
                                empno = p_empno
                        )
                        And To_Char(app_date, 'yyyy') = To_Char(v_now, 'yyyy')
                    Order By
                        app_no Desc
                )
            Where
                Rownum = 1;

            v_rec_no := To_Number(Substr(v_depu_row.app_no, Instr(v_depu_row.app_no, '/', -1) + 1));

        Exception
            When Others Then
                p_message   := Sqlcode || ' - ' || Sqlerrm;
                v_rec_no    := 0;
        End;

        v_rec_no                  := v_rec_no + 1;
        /*
        If p_depu_type = 'WF' Then
            v_is_office_ip := self_attendance.valid_office_ip(p_user_ip);
            If v_is_office_ip = 'KO' Then
                p_success   := 'KO';
                p_message   := 'This utility is applicable from selected PC''s in TCMPL Mumbai Office';
                return;
            End If;

        End If;
        */
        v_entry_by_user_profile   := user_profile.get_profile(p_entry_by_empno);
        If v_entry_by_user_profile = user_profile.type_hrd Then
            v_is_entry_by_hr := 'OK';
            If p_entry_by_empno = p_empno Then
                v_is_entry_by_hr_4_self := 'OK';
            End If;
        End If;

        If p_depu_type = 'HT' Then --Home Town
            v_appl_desc := 'Punch HomeTown';
        Elsif p_depu_type = 'DP' Then --Deputation
            v_appl_desc := 'Punch Deputation';
        Elsif p_depu_type = 'TR' Then --ON Tour
            v_appl_desc := 'Punch Tour';
        Elsif p_depu_type = 'VS' Then --Visa Problem
            v_appl_desc := 'Punch Visa Problem';
        Elsif p_depu_type = 'RW' Then --Visa Problem
            v_appl_desc := 'Punch Remote Work';
        End If;

        v_appl_desc               := v_appl_desc || ' from ' || To_Char(p_bdate, 'dd-Mon-yyyy') || ' To ' || To_Char(p_edate, 'dd-Mon-yyyy');

        set_variables_4_entry_by(
            p_entry_by_empno       => p_entry_by_empno,
            p_entry_by_hr          => v_is_entry_by_hr,
            p_entry_by_hr_4_self   => v_is_entry_by_hr_4_self,
            p_lead_empno           => v_lead_approver,
            p_lead_apprl           => v_lead_approval,
            p_hod_empno            => v_hod_empno,
            p_hod_apprl            => v_hod_apprl,
            p_hod_ip               => v_hod_ip,
            p_hrd_empno            => v_hrd_empno,
            p_hrd_apprl            => v_hrd_apprl,
            p_hrd_ip               => v_hrd_ip,
            p_hod_apprl_dt         => v_hod_apprl_dt,
            p_hrd_apprl_dt         => v_hrd_apprl_dt
        );

        v_app_no                  := 'DP/' || p_empno || '/' || To_Char(v_now, 'yyyymmdd') || '/' || Lpad(v_rec_no, 4, '0');

        Insert Into ss_depu (
            empno,
            app_no,
            app_date,
            bdate,
            edate,
            description,
            type,
            reason,
            user_tcp_ip,
            hod_apprl,
            hod_apprl_dt,
            hod_code,
            hod_tcp_ip,
            hrd_apprl,
            hrd_apprl_dt,
            hrd_code,
            hrd_tcp_ip,
            lead_apprl,
            lead_apprl_empno
        ) Values (
            p_empno,
            v_app_no,
            v_now,
            p_bdate,
            p_edate,
            v_appl_desc,
            p_depu_type,
            p_reason,
            p_user_ip,
            v_hod_apprl,
            v_hod_apprl_dt,
            v_hod_empno,
            v_hod_ip,
            v_hrd_apprl,
            v_hrd_apprl_dt,
            v_hrd_empno,
            v_hrd_ip,
            v_lead_approval,
            v_lead_approver
        );

        p_success                 := 'OK';
        p_message                 := 'Your application has been saved successfull. Applicaiton Number :- ' || v_app_no;
    Exception
        When Others Then
            p_success   := 'KO';
            p_message   := 'ERR :- ' || Sqlcode || ' - ' || Sqlerrm;
    End;

    Procedure add_onduty_type_1 (
        p_empno           Varchar2,
        p_od_type         Varchar2,
        p_od_sub_type     Varchar2,
        p_pdate           Varchar2,
        p_hh              Number,
        p_mi              Number,
        p_hh1             Number,
        p_mi1             Number,
        p_lead_approver   Varchar2,
        p_reason          Varchar2,
        p_entry_by        Varchar2,
        p_user_ip         Varchar2,
        p_success         Out               Varchar2,
        p_message         Out               Varchar2
    ) As

        v_pdate                   Date;
        v_count                   Number;
        v_empno                   Varchar2(5);
        v_entry_by                Varchar2(5);
        v_od_catg                 Number;
        v_onduty_row              ss_vu_ondutyapp%rowtype;
        v_rec_no                  Number;
        v_app_no                  Varchar2(60);
        v_now                     Date;
        v_is_office_ip            Varchar2(10);
        v_entry_by_user_profile   Number;
        v_is_entry_by_hr          Varchar2(2);
        v_is_entry_by_hr_4_self   Varchar2(2);
        v_lead_approver           Varchar2(5);
        v_lead_approval           Number;
        v_hod_empno               Varchar2(5);
        v_hod_ip                  Varchar2(30);
        v_hod_apprl               Number;
        v_hod_apprl_dt            Date;
        v_hrd_empno               Varchar2(5);
        v_hrd_ip                  Varchar2(30);
        v_hrd_apprl               Number;
        v_hrd_apprl_dt            Date;
        v_appl_desc               Varchar2(60);
        v_dd                      Varchar2(2);
        v_mon                     Varchar2(2);
        v_yyyy                    Varchar2(4);
    Begin
        v_pdate                   := To_Date(p_pdate, 'yyyymmdd');
        v_dd                      := To_Char(v_pdate, 'dd');
        v_mon                     := To_Char(v_pdate, 'MM');
        v_yyyy                    := To_Char(v_pdate, 'YYYY');
    --Check Employee Exists
        v_empno                   := Substr('0000' || Trim(p_empno), -5);
        v_entry_by                := Substr('0000' || Trim(p_entry_by), -5);
        v_lead_approver           :=
            Case Lower(p_lead_approver)
                When 'none' Then
                    'None'
                Else Lpad(p_lead_approver, 5, '0')
            End;

        Select
            Count(*)
        Into v_count
        From
            ss_emplmast
        Where
            empno = v_empno;

        If v_count = 0 Then
            p_success   := 'KO';
            p_message   := 'Employee not found in Database.' || v_empno || ' - ' || p_empno;
            return;
        End If;

        If v_lead_approver != 'None' Then
            Select
                Count(*)
            Into v_count
            From
                ss_emplmast
            Where
                empno = v_lead_approver;

            If v_count = 0 Then
                p_success   := 'KO';
                p_message   := 'Lead approver not found in Database.';
                return;
            End If;

        End If;

        p_message                 := 'Debug - A1';
        Select
            tabletag
        Into v_od_catg
        From
            ss_ondutymast
        Where
            type = p_od_type;

        If v_od_catg != 2 Then
            p_success   := 'KO';
            p_message   := 'Invalid OnDuty Type.';
            return;
        End If;

        p_message                 := 'Debug - A2';
        --
        --  * * * * * * * * * * * 
        v_now                     := Sysdate;
        Begin
            Select
                *
            Into v_onduty_row
            From
                (
                    Select
                        *
                    From
                        ss_vu_ondutyapp
                    Where
                        empno = v_empno
                        And app_date In (
                            Select
                                Max(app_date)
                            From
                                ss_vu_ondutyapp
                            Where
                                empno = v_empno
                        )
                        And To_Char(app_date, 'yyyy') = To_Char(Sysdate, 'yyyy')
                    Order By
                        app_no Desc
                )
            Where
                Rownum = 1;

            v_rec_no := To_Number(Substr(v_onduty_row.app_no, Instr(v_onduty_row.app_no, '/', -1) + 1));
--p_message := 'Debug - A3';

        Exception
            When Others Then
                v_rec_no := 0;
        End;

        v_rec_no                  := v_rec_no + 1;
        v_app_no                  := 'OD/' || v_empno || '/' || To_Char(v_now, 'yyyymmdd') || '/' || Lpad(v_rec_no, 4, '0');

        Select
            Count(*)
        Into v_count
        From
            ss_vu_ondutyapp
        Where
            app_no = v_app_no;

        If v_count <> 0 Then
            p_success   := 'KO';
            p_message   := 'There was an unexpected error. Please contact SELFSERVICE-ADMINISTRATOR';
            return;
        End If;

        p_message                 := 'Debug - A3';
        v_entry_by_user_profile   := user_profile.get_profile(v_entry_by);
        If v_entry_by_user_profile = user_profile.type_hrd Then
            v_is_entry_by_hr   := 'OK';
            If v_entry_by = v_empno Then
                v_is_entry_by_hr_4_self := 'OK';
            End If;
            v_hrd_ip           := p_user_ip;
        Else
            v_is_entry_by_hr := 'KO';
        End If;
--p_message := 'Debug - A4';

        v_appl_desc               := 'Appl for Punch Entry of ' || To_Char(v_pdate, 'dd-Mon-yyyy') || ' Time ' || p_hh || ':' || p_mi;

        v_appl_desc               := v_appl_desc || ' - ' || p_hh1 || ':' || p_mi1;
        v_appl_desc               := Replace(Trim(v_appl_desc), ' - 0:0');
        set_variables_4_entry_by(
            p_entry_by_empno       => v_entry_by,
            p_entry_by_hr          => v_is_entry_by_hr,
            p_entry_by_hr_4_self   => v_is_entry_by_hr_4_self,
            p_lead_empno           => v_lead_approver,
            p_lead_apprl           => v_lead_approval,
            p_hod_empno            => v_hod_empno,
            p_hod_apprl            => v_hod_apprl,
            p_hod_ip               => v_hod_ip,
            p_hrd_empno            => v_hrd_empno,
            p_hrd_apprl            => v_hrd_apprl,
            p_hrd_ip               => v_hrd_ip,
            p_hod_apprl_dt         => v_hod_apprl_dt,
            p_hrd_apprl_dt         => v_hrd_apprl_dt
        );
--p_message := 'Debug - A5 - ' || v_empno || ' - ' || v_pdate || ' - ' || p_hh || ' - ' || p_mi || ' - ' || p_hh1 || ' - ' || p_mi1 || ' - ODSubType - ' || p_od_sub_type ;

        If p_od_type = 'LE' And v_is_entry_by_hr = 'KO' Then
            v_lead_approver   := 'None';
            v_lead_approval   := 4;
            v_hod_apprl       := 1;
            v_hod_apprl_dt    := v_now;
            v_hod_empno       := v_entry_by;
            v_hod_ip          := p_user_ip;
        End If;

        Insert Into ss_ondutyapp (
            empno,
            app_no,
            app_date,
            hh,
            mm,
            hh1,
            mm1,
            pdate,
            dd,
            mon,
            yyyy,
            type,
            description,
            odtype,
            reason,
            user_tcp_ip,
            hod_apprl,
            hod_apprl_dt,
            hod_tcp_ip,
            hod_code,
            lead_apprl_empno,
            lead_apprl,
            hrd_apprl,
            hrd_tcp_ip,
            hrd_code,
            hrd_apprl_dt
        ) Values (
            v_empno,
            v_app_no,
            v_now,
            p_hh,
            p_mi,
            p_hh1,
            p_mi1,
            v_pdate,
            v_dd,
            v_mon,
            v_yyyy,
            p_od_type,
            v_appl_desc,
            Nvl(p_od_sub_type, 0),
            p_reason,
            p_user_ip,
            v_hod_apprl,
            v_hod_apprl_dt,
            v_hod_ip,
            v_hod_empno,
            v_lead_approver,
            v_lead_approval,
            v_hrd_apprl,
            v_hrd_ip,
            v_hrd_empno,
            v_hrd_apprl_dt
        );

        p_success                 := 'OK';
        p_message                 := 'Your application has been saved successfull. Applicaiton Number :- ' || v_app_no;
        Commit;
        If v_entry_by_user_profile != user_profile.type_hrd Then
            return;
        End If;
        Insert Into ss_onduty Value
            ( Select
                empno,
                hh,
                mm,
                pdate,
                0,
                dd,
                mon,
                yyyy,
                type,
                app_no,
                description,
                getodhh(
                    app_no,
                    1
                ),
                getodmm(
                    app_no,
                    1
                ),
                app_date,
                reason,
                odtype
            From
                ss_ondutyapp
            Where
                app_no = v_app_no
            );
--p_message := 'Debug - A7';

        If p_od_type Not In (
            'IO',
            'OD'
        ) Then
            return;
        End If;
        Insert Into ss_onduty Value
            ( Select
                empno,
                hh1,
                mm1,
                pdate,
                0,
                dd,
                mon,
                yyyy,
                type,
                app_no,
                description,
                getodhh(
                    app_no,
                    2
                ),
                getodmm(
                    app_no,
                    2
                ),
                app_date,
                reason,
                odtype
            From
                ss_ondutyapp
            Where
                app_no = v_app_no
            );

        p_message                 := 'Debug - A8';
        generate_auto_punch_4od(v_app_no);
--p_message := 'Debug - A9';
        p_success                 := 'OK';
        p_message                 := 'Your application has been saved successfull. Applicaiton Number :- ' || v_app_no;
    Exception
        When dup_val_on_index Then
            p_success   := 'KO';
            p_message   := 'Duplicate values found cannot proceed.' || ' - ' || p_message;
        When Others Then
            p_success   := 'KO';
            p_message   := 'ERR :- ' || Sqlcode || ' - ' || Sqlerrm || ' - ' || p_message;
            --p_message := p_message || 

    End add_onduty_type_1;

    Procedure transfer_od_2_wfh (
        p_success   Out         Varchar2,
        p_message   Out         Varchar2
    ) As

        Cursor cur_od Is
        Select
            empno,
            'RW' od_type,
            To_Char(pdate, 'yyyymmdd') bdate,
            To_Char(pdate, 'yyyymmdd') edate,
            empno entry_by,
            lead_apprl_empno,
            user_tcp_ip,
            reason,
            app_no,
            To_Char(app_date, 'dd-Mon-yyyy') app_date1,
            To_Char(pdate, 'dd-Mon-yyyy') pdate1
        From
            ss_ondutyapp
        Where
            Nvl(hod_apprl, 0) = 1
            And Nvl(hrd_apprl, 0) = 0
            And yyyy In (
                '2021',
                '2022'
            )
            And type              = 'OD';

        Type typ_tab_od Is
            Table Of cur_od%rowtype;
        tab_od     typ_tab_od;
        v_app_no   Varchar2(30);
        v_is_err   Varchar2(10) := 'KO';
    Begin
        Open cur_od;
        Loop
            Fetch cur_od Bulk Collect Into tab_od Limit 50;
            For i In 1..tab_od.count Loop
                p_success   := Null;
                p_message   := Null;
                od.add_onduty_type_2(
                    p_empno           => tab_od(i).empno,
                    p_od_type         => tab_od(i).od_type,
                    p_b_yyyymmdd      => tab_od(i).bdate,
                    p_e_yyyymmdd      => tab_od(i).edate,
                    p_entry_by        => tab_od(i).entry_by,
                    p_lead_approver   => tab_od(i).lead_apprl_empno,
                    p_user_ip         => tab_od(i).user_tcp_ip,
                    p_reason          => tab_od(i).reason,
                    p_success         => p_success,
                    p_message         => p_message
                );

                If p_success = 'OK' Then
                    Delete From ss_ondutyapp
                    Where
                        Trim(app_no) = Trim(tab_od(i).app_no);

                Else
                    v_is_err := 'OK';
                End If;

            End Loop;

            Exit When cur_od%notfound;
        End Loop;

        Commit;
        Update ss_depu
        Set
            lead_code = 'Sys',
            lead_apprl_dt = Sysdate,
            lead_apprl = 1
        Where
            type = 'RW'
            And Trunc(app_date) = Trunc(Sysdate)
            And lead_apprl <> 4;

        Update ss_depu
        Set
            hod_apprl = 1,
            hod_code = 'Sys',
            hod_apprl_dt = Sysdate,
            hrd_apprl = 1,
            hrd_code = 'Sys',
            hrd_apprl_dt = Sysdate
        Where
            type = 'RW'
            And Trunc(app_date) = Trunc(Sysdate);

        Commit;
        If v_is_err = 'OK' Then
            p_success   := 'KO';
            p_message   := 'Err - Some OnDuty applicaitons were not transfered to WFH.';
        Else
            p_success   := 'OK';
            p_message   := 'OnDuty applications successfully transferd to WFH.';
        End If;

    Exception
        When Others Then
            Rollback;
            p_success   := 'OK';
            p_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End;

End od;
/
---------------------------
--Changed PACKAGE BODY
--NU_EMP
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."NU_EMP" AS
  --procedure assign_shift_4_mnth (param_empno varchar2, param_month varchar2 ) ;
  procedure process_nu_employee AS
      cursor cur_nu_emp is SELECT A.EMPNO,  A.EMP_NAME,  A.META_ID,  A.DOMAIN,  A.ACCOUNT_NAME,
          A.EMAIL_ID,  A.MODIFIED_ON,  B.NAME AS employee_name, B.DOJ FROM ss_fim_data A
          LEFT JOIN SS_EMPLMAST B ON A.EMPNO = B.EMPNO;
      v_count number;
      v_shift varchar2(62);
      v_start_day number;
      v_last_day number;
      v_na_shift varchar2(62);
  BEGIN
      for nu_emp in  cur_nu_emp loop
          select count(empno) into v_count from userids where empno = nu_emp.empno;
          If v_count = 0 Then
              insert into userids (empno, name, office, userid, 
                                  datetime, email, domain  )
                  values (nu_emp.empno, nvl(nu_emp.emp_name, nu_emp.employee_name), '', nu_emp.account_name, 
                                 sysdate, nu_emp.email_id, nu_emp.domain);
              commit;
              null;
          End If;
          /*
          assign_shift_4_mnth(to_char(nu_emp.doj,'yyyymm'), nu_emp.empno);
          
          If to_number(to_char(sysdate,'dd')) > 26 Then
              assign_shift_4_mnth(to_char(last_day(nu_emp.doj) + 1,'yyyymm'), nu_emp.empno);
          End If;
          */
      end loop;
  END process_nu_employee;

  procedure assign_shift_4_mnth ( param_empno varchar2 ,param_month varchar2 ) is
      v_last_day    number;
      v_shift       varchar2(62);
      v_hoilday     varchar2(2);
      v_doj         date;
      v_start_day   number;
      v_na_shift    varchar(62);
      v_count       number;
      cursor cur_holidays is select SRNO ,HOLIDAY ,YYYYMM ,WEEKDAY  from selfservice.ss_holidays where yyyymm = param_month;
  begin
      
      v_last_day := to_Number(to_char(last_day(to_date(param_month || '01','yyyymmdd')),'dd'));
      select count(empno) into v_count from selfservice.ss_emplmast where empno = param_empno and status = 1;
      If v_count = 0 then return; end if;
      
      select count(empno) into v_count from selfservice.SS_MUSTER where empno = param_empno
          and MNTH = param_month;
          
      If v_count > 0 Then          return;      end if;
          
      v_shift := rpad('GS',v_last_day * 2,'GS');

      Select doj into v_doj from selfservice.ss_emplmast where 
        empno = param_empno and status = 1;
      --v_last_day := to_number(last_day(to_date(param_month || '01','yyyymmdd')),'dd');
      
      if param_month = to_char(v_doj, 'yyyymm') then
        v_start_day := to_number(to_char(v_doj, 'dd'));
        v_na_shift := rpad('NA',(v_start_day-1) * 2,'NA');
        v_shift := trim(v_na_shift) || substr(v_shift, ((v_start_day-1) * 2) + 1);
      end if;
      
      for holiday_row in  cur_holidays loop
          case 
            when holiday_row.weekday in ('SAT' ,'SUN') then v_hoilday := 'OO';
            else v_hoilday := 'HH'; 
          end case;
          v_shift := substr(v_shift,1,(to_number(to_char(holiday_row.holiday,'dd'))-1)*2) || v_hoilday || substr(v_shift, to_number(to_char(holiday_row.holiday,'dd')) * 2 + 1);
      end loop;
      insert into selfservice.ss_muster (empno, mnth,s_mrk) values (trim(param_empno), trim(param_month), trim(v_shift));
      commit;
  exception
      when others then null;
  end assign_shift_4_mnth;

  procedure Assign_Shift_2_nu_emp is
      cursor cur_nu_emp is select empno, doj, emptype from TIMECURR.EMPLMAST_NEW_EMP_LOG where MODIFIED_ON >= sysdate - 15;
      v_date_4_shift date;
  begin
      v_date_4_shift :=  SelfService.NU_EMP.Get_assign_shift_run_date(to_char(add_months(sysdate,1), 'yyyymm'));
      If v_date_4_shift is null then return; end If;
      for nu_emp_row in cur_nu_emp loop
         assign_shift_4_mnth( nu_emp_row.empno, to_char(sysdate, 'yyyymm'));
         If sysdate >= v_date_4_shift Then
            assign_shift_4_mnth( nu_emp_row.empno, to_char(add_months(sysdate,1), 'yyyymm'));
         end if;
      end loop;
  end Assign_Shift_2_nu_emp;
  
  Procedure Auto_assign_Shift_2_All( param_yyyymm date) as
      v_count Number;
      Cursor cur_emp is Select Empno From ss_emplmast where status = 1;
      v_date_4_shift date;
  Begin
      v_date_4_shift :=  SelfService.NU_EMP.Get_assign_shift_run_date(param_yyyymm);
      If v_date_4_shift is null then return; end If;
      If Not (sysdate >= v_date_4_shift) Then
          Return;
      End If;
      Select count(yyyymm) into v_count from Selfservice.SS_SHIFT_AUTO_ASSIGN_LOG a where a.YYYYMM = param_yyyymm and nvl(a.SHIFT_ASSIGNED,0) = 1;
      If v_count >0 Then
          Return;
      End If;
      For emp_row in cur_emp loop
          assign_shift_4_mnth(emp_row.empno, param_yyyymm);
      end loop;
      Insert into ss_shift_auto_assign_log (yyyymm, modified_on, shift_assigned ) values (param_yyyymm, sysdate, 1);
      commit;
  Exception 
      When others then
          null;
  End Auto_assign_Shift_2_All;
  
  
  
  function Get_assign_shift_run_date(param_yyyymm varchar2) return date is
      TYPE MonthDays IS TABLE OF ss_days_details%ROWTYPE;
      TabMonthdays MonthDays;
  begin
      select D_DATE ,D_DD ,D_MM ,D_YYYY ,D_MON ,D_DAY ,WK_OF_YEAR BULK COLLECT INTO TabMonthDays  from (
          select D_DATE ,D_DD ,D_MM ,D_YYYY ,D_MON ,D_DAY ,WK_OF_YEAR from selfservice.SS_DAYS_DETAILS where d_mm = substr(param_yyyymm,5,2) 
          and d_yyyy = substr(param_yyyymm,1,4) and d_date not in 
            (select holiday from selfservice.ss_holidays where yyyymm = param_yyyymm )
          order by d_date desc ) 
        where rownum < c_5_working_days order by d_date ;
      return TabMonthDays(1).d_date;
      Exception
      When others then
        insert_dates(substr(param_yyyymm,1,4));
        return null;
  end Get_assign_shift_run_date;
END NU_EMP;
/
---------------------------
--Changed PACKAGE BODY
--MISC
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."MISC" As

    Function is_emp_present (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        v_count Number;
    Begin
        If p_date = To_Date('12-Jun-2021', 'dd-Mon-yyyy') Then
            Return 0;
        End If;
        Select
            Count(*)
        Into v_count
        From
            ss_punch
        Where
            empno = p_empno
            And pdate = Trunc(p_date);

        If v_count > 0 Then
            Return 1;
        End If;

        Select
            Count(*)
        Into v_count
        From
            ss_punch_manual
        Where
            empno = p_empno
            And pdate = Trunc(p_date);
        If v_count > 0 Then
            Return 1;
        End If;

        Select
            Count(*)
        Into v_count
        From
            ss_onduty
        Where
            empno = p_empno
            And pdate  = p_date
            And type   = 'IO';

        If v_count > 0 Then
            Return 1;
        Else
            Return 0;
        End If;
    Exception
        When Others Then
            Return 0;
    End is_emp_present;

    Function is_present_for_8days (
        p_empno   Varchar2,
        p_date1   Date,
        p_date2   Date
    ) Return Number As
        v_count Number;
    Begin
        Select
            Sum(present_days)
        Into v_count
        From
            (
                Select
                    is_emp_present(
                        p_empno,
                        d_date
                    ) present_days
                From
                    ss_days_details
                Where
                    d_date >= p_date1
                    And d_date <= p_date2
            );
        Return v_count;

        If v_count < 9 Then
            Return 0;
        Else
            Return v_count;
        End If;
    Exception
        When Others Then
            Return -1;
    End is_present_for_8days;

End misc;
/
---------------------------
--Changed PACKAGE BODY
--LESSON
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."LESSON" as

  procedure summary_result (p_cur out sys_refcursor) as
    begin
      open p_cur for 
        select distinct a.dept||' - '||b.abbr dept,lesson.get_org_total(a.dept) org_total,
          lesson.get_org_pending(a.dept) org_pending,
          lesson.get_org_rejected(a.dept) org_rejected,
          lesson.get_org_accepted(a.dept) org_accepted,
          lesson.get_cord_pending(a.dept) cord_pending,
          lesson.get_cord_recorded(a.dept) cord_recorded,
          lesson.get_hod_pending(a.dept) hod_pending,
          lesson.get_hod_rejected(a.dept) hod_rejeceted,
          lesson.get_hod_accepted(a.dept) hod_accepted,
          lesson.get_sp_pending(a.dept) sp_pending,
          lesson.get_sp_hosted(a.dept) sp_hosted,
          lesson.get_status_open(a.dept) status_open,
          lesson.get_status_close(a.dept) status_close from
          (select orgdept dept from ll_originator union
          select owndept dept from ll_recorded where llarchived <> 1) a,ss_costmast b
          where a.dept = b.costcode order by dept;
    end summary_result;
  
  function get_org_total(param_costcode varchar2) return number as
    vCount_org_total Number;
    begin
      select count(orgreqnum) into vCount_org_total from ll_originator 
        where orgdept = trim(param_costcode);   
      return vCount_org_total;    
    Exception
      When Others Then      
        return 0;    
    end get_org_total;
  
  function get_org_pending(param_costcode varchar2) return number as
    vCount_org_pending Number;
    begin
      select count(orgreqnum) into vCount_org_pending from ll_originator 
        where orgdept = trim(param_costcode) and (orgstatus is null or orgstatus = 0);   
      return vCount_org_pending;    
    Exception
      When Others Then      
        return 0; 
    end get_org_pending;
  
  function get_org_rejected(param_costcode varchar2) return number as
    vCount_org_rejected Number;
    begin
     select count(orgreqnum) into vCount_org_rejected from ll_originator 
        where orgdept = trim(param_costcode) and orgstatus = 2;   
      return vCount_org_rejected;    
    Exception
      When Others Then      
        return 0; 
    end get_org_rejected;
  
  function get_org_accepted(param_costcode varchar2) return number as
    vCount_org_accepted Number;
    begin
      select count(orgreqnum) into vCount_org_accepted from ll_originator 
        where orgdept = trim(param_costcode) and orgstatus = 1;   
      return vCount_org_accepted;    
    Exception
      When Others Then      
        return 0;
    end get_org_accepted;
  
  function get_cord_pending(param_costcode varchar2) return Number as
    vCount_cord_pending Number;
    begin
      select count(orgreqnum) into vCount_cord_pending from ll_originator
        where orgreqnum not in (select orgreqnum from ll_recorded)
        and orgdept = trim(param_costcode);   
      return vCount_cord_pending;    
    Exception
      When Others Then      
        return 0;
    end get_cord_pending;
  
  function get_cord_recorded(param_costcode varchar2) return number as
    vCount_cord_recorded Number;
    begin
      select count(llnum) into vCount_cord_recorded from ll_recorded
        where owndept = trim(param_costcode) and llarchived <> 1;   
      return vCount_cord_recorded;    
    Exception
      When Others Then      
        return 0;
    end get_cord_recorded;

  function get_hod_pending(param_costcode varchar2) return number as
    vCount_hod_pending Number;
    begin
      select count(llnum) into vCount_hod_pending from ll_recorded
        where owndept = trim(param_costcode) and llstatus = 'R' and llarchived <> 1;   
      return vCount_hod_pending;    
    Exception
      When Others Then      
        return 0;
    end get_hod_pending;
    
  function get_hod_rejected(param_costcode varchar2) return number as
    vCount_hod_rejected Number;
    begin
      select count(llnum) into vCount_hod_rejected from ll_recorded
        where owndept = trim(param_costcode) and llstatus = 'X' and llarchived <> 1;   
      return vCount_hod_rejected;    
    Exception
      When Others Then      
        return 0;
    end get_hod_rejected;
    
  function get_hod_accepted(param_costcode varchar2) return number as
    vCount_hod_accepted Number;
    begin
      select count(llnum) into vCount_hod_accepted from ll_recorded
        where owndept = trim(param_costcode) and llstatus in ('C','O') 
        and llarchived <> 1;   
      return vCount_hod_accepted;    
    Exception
      When Others Then      
        return 0;
    end get_hod_accepted;
  
  function get_sp_pending(param_costcode varchar2) return number as
    vCount_sp_pending Number;
    begin
      select count(llnum) into vCount_sp_pending from ll_recorded
        where owndept = trim(param_costcode) and tosharepoint = 1
        and llstatus in ('C','O') and llarchived <> 1;   
      return vCount_sp_pending;    
    Exception
      When Others Then      
        return 0;
    end get_sp_pending;
    
  function get_sp_hosted(param_costcode varchar2) return number as
    vCount_sp_hosted Number;
    begin
      select count(llnum) into vCount_sp_hosted from ll_recorded
        where owndept = trim(param_costcode) and tosharepoint = 0
        and llarchived <> 1;   
      return vCount_sp_hosted;    
    Exception
      When Others Then      
        return 0;
    end get_sp_hosted;
  
  function get_status_open(param_costcode varchar2) return number as
    vCount_status_open Number;
    begin
      select count(llnum) into vCount_status_open from ll_recorded
        where owndept = trim(param_costcode) and llstatus = 'C' 
        and openflag = 1 and llarchived <> 1;   
      return vCount_status_open;    
    Exception
      When Others Then      
        return 0;
    end get_status_open;
  
  function get_status_close(param_costcode varchar2) return number as
    vCount_status_close Number;
    begin
      select count(llnum) into vCount_status_close from ll_recorded
        where owndept = trim(param_costcode) and llstatus = 'C' 
        and hod_closeflag = 1 and llarchived <> 1;   
      return vCount_status_close;    
    Exception
      When Others Then      
        return 0;
    end get_status_close;
  
end lesson;
/
---------------------------
--Changed PACKAGE BODY
--LEAVE_MONTHLY_CREDIT
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."LEAVE_MONTHLY_CREDIT" As

    Procedure rollback_monthly_credit_old (
        p_from_date   Date,
        p_success     Out           Varchar2,
        p_message     Out           Varchar2
    ) As
        v_rec_monthly_cr_mast ss_monthly_credit_mast%rowtype;
    Begin
        Select
            *
        Into v_rec_monthly_cr_mast
        From
            ss_monthly_credit_mast
        Where
            from_date = Trunc(p_from_date);

        Delete From ss_monthly_credit_exception
        Where
            key_id = v_rec_monthly_cr_mast.key_id;

        Delete From ss_monthly_credit_mast
        Where
            key_id = v_rec_monthly_cr_mast.key_id;

        Delete From ss_leave_adj
        Where
            leavetype = c_cr_leave_type
            And adj_type  = c_cr_adjustment_type
            And bdate     = Trunc(p_from_date);

        Delete From ss_leaveledg
        Where
            leavetype = c_cr_leave_type
            And adj_type  = c_cr_adjustment_type
            And bdate     = Trunc(p_from_date);

        Delete From ss_batch_log_details
        Where
            batch_key_id = v_rec_monthly_cr_mast.key_id;

        Delete From ss_batch_log_mast
        Where
            batch_key_id = v_rec_monthly_cr_mast.key_id;

        Commit;
    Exception
        When no_data_found Then
            p_success := 'OK';
            Rollback;
        When Others Then
            Rollback;
            p_success   := 'KO';
            p_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End;

    Procedure schedule_batch (
        p_key_id    Varchar2,
        p_success   Out         Varchar2,
        p_message   Out         Varchar2
    ) As
        v_job_name   Varchar2(30) := 'MONTHLY_LEAVE_CREDIT_';
        v_count      Number;
    Begin
        If p_key_id Is Null Then
            p_success   := 'KO';
            p_message   := 'Err - KeyId  not found while shceduling the job.';
            return;
        End If;

        Select
            Count(*)
        Into v_count
        From
            user_scheduler_running_jobs
        Where
            job_name Like v_job_name || '%';

        If v_count <> 0 Then
            p_success   := 'KO';
            p_message   := 'Err - Previously scheduled job is already running. Cannot proceed.';
            return;
        End If;

        v_job_name   := v_job_name || p_key_id;
        dbms_scheduler.create_job(
            job_name              => v_job_name,
            job_type              => 'STORED_PROCEDURE',
            job_action            => 'leave_monthly_credit.do_batch_process',
            number_of_arguments   => 1,
            enabled               => false,
            job_class             => 'TCMPL_JOB_CLASS',
            comments              => 'To credit monthly leave to Employee Account.'
        );

        dbms_scheduler.set_job_argument_value(
            job_name            => v_job_name,
            argument_position   => 1,
            argument_value      => p_key_id
        );

        dbms_scheduler.enable(v_job_name);
        p_success    := 'OK';
    End schedule_batch;
    --*******XXXXXXXXX**********
    
    
    --*******PUT DATA in PROD TAB**********

    Procedure put_xl_data_in_prod_table (
        p_key_id Varchar2,
        p_success Out Varchar
    ) As

        v_now                    Date;
        v_success                Varchar2(10);
        v_message                Varchar2(1000);
        v_sheet_1                Number(1) := 1;
        Cursor cur_unique_rows Is
        Select Distinct
            row_nr
        From
            ss_xl_blob_data
        Where
            key_id = p_key_id
            And sheet_nr = v_sheet_1
            And row_nr Not In (
                Select
                    row_nr
                From
                    ss_xl_blob_data
                Where
                    key_id = p_key_id
                    And sheet_nr = v_sheet_1
                    And err_code Is Not Null
            );

        Cursor cur_row_data (
            pc_row_nr Number
        ) Is
        Select
            *
        From
            ss_xl_blob_data
        Where
            key_id = p_key_id
            And sheet_nr  = v_sheet_1
            And row_nr    = pc_row_nr;

        Type typ_tab_row Is
            Table Of cur_unique_rows%rowtype;
        tab_rows                 typ_tab_row;
        Type typ_tab_xl_data Is
            Table Of ss_xl_blob_data%rowtype;
        tab_xl_data              typ_tab_xl_data;
        v_count                  Number;
        v_row_monthly_cr_excep   ss_monthly_credit_exception%rowtype;
        v_row_monthly_cr_mast    ss_monthly_credit_mast%rowtype;
    Begin
        v_now       := Sysdate;
        Begin
            Select
                *
            Into v_row_monthly_cr_mast
            From
                ss_monthly_credit_mast
            Where
                key_id = p_key_id;

        Exception
            When Others Then
                pkg_batch_log.do_write_log(
                    param_batch_id   => p_key_id,
                    param_log_msg    => 'Err - Master Data not found',
                    param_success    => v_success,
                    param_message    => v_message
                );
        End;

        Open cur_unique_rows;
        Loop
            Fetch cur_unique_rows Bulk Collect Into tab_rows Limit 50;
            For i In 1..tab_rows.count Loop
                Open cur_row_data(tab_rows(i).row_nr);
                Fetch cur_row_data Bulk Collect Into tab_xl_data Limit 100;
                Close cur_row_data;
                For cntr In 1..tab_xl_data.count Loop
                    If tab_rows(i).row_nr = 164 Then
                        v_count := 0;
                    End If;
                    v_row_monthly_cr_excep.key_id        := p_key_id;
                    v_row_monthly_cr_excep.from_date     := v_row_monthly_cr_mast.from_date;
                    v_row_monthly_cr_excep.modified_on   := v_now;
                    v_row_monthly_cr_excep.xl_row_nr     := tab_rows(i).row_nr;
                    If tab_xl_data(cntr).col_nr = c_col_no_empno Then
                        v_row_monthly_cr_excep.empno := Nvl(Trim(tab_xl_data(cntr).string_val), tab_xl_data(cntr).number_val);
                    End If;

                    If tab_xl_data(cntr).col_nr = c_col_no_leaveperiod Then
                        v_row_monthly_cr_excep.leave_period := Nvl(tab_xl_data(cntr).string_val, tab_xl_data(cntr).number_val);
                    End If;

                End Loop;

                Insert Into ss_monthly_credit_exception Values v_row_monthly_cr_excep;

                v_row_monthly_cr_excep := Null;
            End Loop;

            Exit When cur_unique_rows%notfound;
        End Loop;

        Close cur_unique_rows;
        Commit;
        p_success   := 'OK';
    Exception
        When Others Then
            pkg_batch_log.do_end_log_with_error(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Err - TRNSFR2PROD1 - ' || Sqlcode || ' - ' || Sqlerrm,
                param_success    => v_success,
                param_message    => v_message
            );

            p_success := 'KO';
    End;
    --*******XXXXXXXXX**********
    
    
    --*******DELETE UNWANTED**********

    Procedure delete_unwanted_data (
        p_key_id    Varchar2,
        p_success   Out         Varchar,
        p_message   Out         Varchar2
    ) As
        v_count Number;
    Begin
        Select
            Count(*)
        Into v_count
        From
            ss_xl_blob_data
        Where
            key_id = p_key_id;

        If v_count = 0 Then
            pkg_batch_log.do_end_log_with_error(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Err - Data not found for normalization',
                param_success    => p_success,
                param_message    => p_message
            );

            return;
        End If;
        
        --Consider only Sheet 1 data

        Delete From ss_xl_blob_data
        Where
            key_id = p_key_id
            And sheet_nr <> 1;

        --Keep only Empno and Leave Period

        Delete From ss_xl_blob_data
        Where
            key_id = p_key_id
            And col_nr Not In (
                c_col_no_empno,
                c_col_no_leaveperiod
            );

        --Delete where Empno is null

        Delete From ss_xl_blob_data
        Where
            key_id = p_key_id
            And col_nr = c_col_no_empno
            And Nvl(Trim(string_val), number_val) Is Null;

        --Delete Header Row

        Delete From ss_xl_blob_data
        Where
            key_id = p_key_id
            And row_nr < 4;

        Commit;
        p_success := 'OK';
    Exception
        When Others Then
            p_success   := 'KO';
            p_message   := 'Err - NORMALIZE - ' || Sqlcode || ' - ' || Sqlerrm;
    End;
    --*******XXXXXXXXX**********
    
    
    --*******VALIDATE**********

    Procedure validate_data (
        p_key_id Varchar2,
        p_success Out Varchar2
    ) As

        v_col_empno         Number := 1;
        v_col_leaveperiod   Number := 5;
        v_success           Varchar2(10);
        v_message           Varchar2(1000);
        v_count             Number;
    Begin
        Update ss_xl_blob_data
        Set
            string_val = Lpad(Nvl(Trim(string_val), number_val), 5, '0')
        Where
            key_id = p_key_id
            And col_nr = v_col_empno;

        Update ss_xl_blob_data
        Set
            string_val = Nvl(string_val, number_val)
        Where
            key_id = p_key_id
            And col_nr = v_col_leaveperiod;

        Commit;
        
        --In correct EMPNO
        Update ss_xl_blob_data
        Set
            err_code = 'E0001'
        Where
            key_id = p_key_id
            And col_nr = v_col_empno
            And string_val Not In (
                Select
                    empno
                From
                    ss_emplmast
                Where
                    status = 1
                    And emptype In (
                        'R',
                        'F'
                    )
            );

        --Incorrect LeavePeriod

        Update ss_xl_blob_data
        Set
            err_code = 'E0002'
        Where
            key_id = p_key_id
            And col_nr = v_col_leaveperiod
            And string_val Is Not Null
            And Not Regexp_Like ( string_val,
                                  '^(\d*\.)?\d*$' )
            And row_nr In (
                Select
                    row_nr
                From
                    ss_xl_blob_data
                Where
                    key_id = p_key_id
                    And err_code Is Null
            );

        Insert Into ss_batch_log_details (
            batch_key_id,
            item_ref,
            log_desc
        )
            Select
                p_key_id,
                'SHT-' || sheet_nr || '-' || Lpad(row_nr, 4, '0'),
                err_desc
            From
                ss_xl_blob_data       a,
                ss_batch_error_mast   b
            Where
                a.err_code Is Not Null
                And a.err_code = b.err_code;

        Commit;
        Select
            Count(*)
        Into v_count
        From
            ss_xl_blob_data
        Where
            key_id = p_key_id
            And row_nr Not In (
                Select
                    row_nr
                From
                    ss_xl_blob_data
                Where
                    key_id = p_key_id
                    And err_code Is Not Null
            );

        If v_count = 0 Then
            pkg_batch_log.do_end_log_with_error(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Err - No valid data to process',
                param_success    => v_success,
                param_message    => v_message
            );
            /*
            Delete From ss_xl_blob_data
            Where
                key_id = p_key_id;
            */

            Commit;
            p_success := 'KO';
        Else
            p_success := 'OK';
        End If;

    Exception
        When Others Then
            Rollback;
            pkg_batch_log.do_end_log_with_error(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Err - TRNSFR2PROD1 - ' || Sqlcode || ' - ' || Sqlerrm,
                param_success    => v_success,
                param_message    => v_message
            );

            p_success := 'KO';
    End;
    --*******XXXXXXXXX**********
    
    
    --*******ADD LEAVE**********

    Procedure add_leave (
        p_key_id         Varchar2,
        p_cr_mast_rec    ss_monthly_credit_mast%rowtype,
        p_empno          Varchar2,
        p_leave_period   Number
    ) As
        v_success   Varchar2(10);
        v_message   Varchar2(1000);
        --v_now        Date;
        --v_adj_desc   Varchar2(30);
    Begin
        --v_now        := Sysdate;
        --v_adj_desc   := p_cr_mast_rec.narration;
        leave.add_leave_adj(
            param_empno        => p_empno,
            param_adj_date     => p_cr_mast_rec.from_date,
            param_adj_type     => c_cr_adjustment_type,
            param_leave_type   => c_cr_leave_type,
            param_adj_period   => p_leave_period,
            param_entry_by     => 'Sys',
            param_desc         => p_cr_mast_rec.narration,
            param_success      => v_success,
            param_message      => v_message,
            param_narration    => p_cr_mast_rec.narration
        );

        If v_success = 'KO' Then
            pkg_batch_log.do_write_log(
                param_batch_id   => p_key_id,
                param_log_msg    => p_empno || ' - ' || v_message,
                param_success    => v_success,
                param_message    => v_message
            );

        End If;

    End;
    --*******XXXXXXXXX**********



    --*******DO PROCESS**********

    Procedure do_credit_leave (
        p_key_id Varchar2,
        p_success Out Varchar2
    ) As

        v_success     Varchar2(10);
        v_message     Varchar2(1000);
        Cursor cur_exception Is
        Select
            *
        From
            ss_monthly_credit_exception
        Where
            key_id = p_key_id;

        Cursor cur_emplist Is
        Select
            empno
        From
            ss_emplmast
        Where
            status = 1
            And emptype In (
                'R',
                'F'
            )
            And empno Not In (
                Select
                    empno
                From
                    ss_monthly_credit_exception
                Where
                    key_id = p_key_id
            );

        Type typ_tab_excep Is
            Table Of cur_exception%rowtype;
        Type typ_tab_emplist Is
            Table Of cur_emplist%rowtype;
        tab_excep     typ_tab_excep;
        tab_emplist   typ_tab_emplist;
        v_now         Date;
        v_adj_desc    Varchar2(100);
        v_rec         ss_monthly_credit_mast%rowtype;
    Begin
        p_success    := 'OK';
        v_now        := Sysdate;
        Select
            *
        Into v_rec
        From
            ss_monthly_credit_mast
        Where
            key_id = p_key_id;

        v_adj_desc   := 'Monthly Leave credit for ' || To_Char(v_rec.from_date, 'Mon-yyyy');
        Open cur_exception;
        Loop
            Fetch cur_exception Bulk Collect Into tab_excep Limit 50;
            For i In 1..tab_excep.count Loop
                If Nvl(tab_excep(i).leave_period, 0) = 0 Then
                    Continue;
                End If;

                add_leave(
                    p_key_id         => p_key_id,
                    p_cr_mast_rec    => v_rec,
                    p_empno          => tab_excep(i).empno,
                    p_leave_period   => tab_excep(i).leave_period
                );

            End Loop;

            Exit When cur_exception%notfound;
        End Loop;

        Open cur_emplist;
        Loop
            Fetch cur_emplist Bulk Collect Into tab_emplist Limit 50;
            For i In 1..tab_emplist.count Loop add_leave(
                p_key_id         => p_key_id,
                p_cr_mast_rec    => v_rec,
                p_empno          => tab_emplist(i).empno,
                p_leave_period   => 1.5
            );
            End Loop;

            Exit When cur_emplist%notfound;
        End Loop;

        p_success    := 'OK';
    Exception
        When Others Then
            pkg_batch_log.do_end_log_with_error(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Err - LEAVECREDIT - ' || Sqlcode || ' - ' || Sqlerrm,
                param_success    => v_success,
                param_message    => v_message
            );

            p_success := 'KO';
    End;
    --*******XXXXXXXXX**********



    --*******DO PROCESS**********

    Procedure do_batch_process (
        p_key_id Varchar2
    ) As
        v_success   Varchar2(10);
        v_message   Varchar2(1000);
        v_count     Number;
    Begin
        pkg_batch_log.do_start_log(
            param_batch_id     => p_key_id,
            param_batch_type   => pkg_batch_log.log_type_mthly_leave_cr,
            param_success      => v_success,
            param_message      => v_message
        );

        delete_unwanted_data(
            p_key_id    => p_key_id,
            p_success   => v_success,
            p_message   => v_message
        );
        If v_success = 'KO' Then
            return;
        End If;
        validate_data(
            p_key_id    => p_key_id,
            p_success   => v_success
        );
        If v_success = 'KO' Then
            return;
        End If;
        put_xl_data_in_prod_table(
            p_key_id    => p_key_id,
            p_success   => v_success
        );
        If v_success = 'KO' Then
            return;
        End If;
        do_credit_leave(
            p_key_id    => p_key_id,
            p_success   => v_success
        );
        If v_success = 'OK' Then
            pkg_batch_log.do_end_log_with_success(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Process finished. Please check log.',
                param_success    => v_success,
                param_message    => v_message
            );
        Else
            pkg_batch_log.do_end_log_with_error(
                param_batch_id   => p_key_id,
                param_log_msg    => 'Process terminated with errors. Pls check log.',
                param_success    => v_success,
                param_message    => v_message
            );
        End If;

    End;
    --*******XXXXXXXXX**********

    --*******INIT**********

    Procedure init_process (
        p_xl_file     Blob,
        p_from_date   Date,
        p_narration   Varchar2,
        p_success     Out           Varchar2,
        p_message     Out           Varchar2
    ) As
        v_now                 Date;
        v_key_id              Varchar2(8);
        v_count               Number;
        v_from_date           Date;
        v_rec_mthly_cr_mast   ss_monthly_credit_mast%rowtype;
    Begin
        If p_xl_file Is Null Then
            p_success   := 'KO';
            p_message   := 'Excel file not found.';
            return;
        End If;

        v_now         := Sysdate;
        v_from_date   := Trunc(p_from_date);
        v_key_id      := dbms_random.string(
            'X',
            8
        );
        Begin
            Select
                *
            Into v_rec_mthly_cr_mast
            From
                ss_monthly_credit_mast
            Where
                from_date = v_from_date;

            If v_count <> 0 Then
                rollback_monthly_credit(
                    p_key_id    => v_rec_mthly_cr_mast.key_id,
                    p_success   => p_success,
                    p_message   => p_message
                );

                If p_success <> 'OK' Then
                    return;
                End If;
            End If;

        Exception
            When Others Then
                Null;
        End;

        Insert Into ss_monthly_credit_mast (
            key_id,
            from_date,
            narration,
            modified_on
        ) Values (
            v_key_id,
            v_from_date,
            p_narration,
            v_now
        );

        Commit;
        xl_blob.upload_file(
            p_blob      => p_xl_file,
            p_blob_id   => v_key_id,
            p_success   => p_success,
            p_message   => p_message
        );

        If p_success = 'KO' Then
            return;
        End If;
        Select
            Count(*)
        Into v_count
        From
            ss_xl_blob_data
        Where
            key_id = v_key_id;

        If v_count = 0 Then
            p_success   := 'KO';
            p_message   := 'Err - No data read into table.';
            return;
        End If;

        schedule_batch(
            p_key_id    => v_key_id,
            p_success   => p_success,
            p_message   => p_message
        );
        If p_success = 'OK' Then
            p_message := 'File uploaded and job scheduled successfully.';
        End If;
    Exception
        When Others Then
            p_success   := 'KO';
            p_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End init_process;
--*******XXXXXXXXX**********

    Procedure rollback_monthly_credit (
        p_key_id    Varchar2,
        p_success   Out         Varchar2,
        p_message   Out         Varchar2
    ) As
        v_row_mthly_cr_mast ss_monthly_credit_mast%rowtype;
    Begin
        If p_key_id Is Null Then
            p_success   := 'KO';
            p_message   := 'Invalid Id provided.';
            return;
        End If;

        Select
            *
        Into v_row_mthly_cr_mast
        From
            ss_monthly_credit_mast
        Where
            key_id = p_key_id;

        Delete From ss_monthly_credit_exception
        Where
            key_id = p_key_id;

        Delete From ss_monthly_credit_mast
        Where
            key_id = p_key_id;

        Delete From ss_leaveledg
        Where
            Trunc(bdate) = Trunc(v_row_mthly_cr_mast.from_date)
            And adj_type   = 'MC'
            And leavetype  = 'PL'
            And db_cr      = 'C';

        Delete From ss_leave_adj
        Where
            Trunc(bdate) = Trunc(v_row_mthly_cr_mast.from_date)
            And adj_type   = 'MC'
            And leavetype  = 'PL'
            And db_cr      = 'C';

        Delete From ss_xl_blob_data
        Where
            key_id = p_key_id;

        Delete From ss_batch_log_details
        Where
            batch_key_id = p_key_id;

        Delete From ss_batch_log_mast
        Where
            batch_key_id = p_key_id;

        Commit;
        p_success   := 'OK';
        p_message   := 'Procedure executed successfully.';
    Exception
        When Others Then
            Rollback;
            p_success   := 'KO';
            p_message   := 'Err - ' || Sqlcode || ' - ' || Sqlerrm;
    End;

End leave_monthly_credit;
/
---------------------------
--Changed PACKAGE BODY
--LEAVE_BAL
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."LEAVE_BAL" As

    Function get_overlap_leave (
        p_empno        Varchar2,
        p_date         Date,
        p_leave_type   Varchar2
    ) Return Number Is
        v_ret_val Number;
    Begin
        Select
            Sum(overlap_leave_period)
        Into v_ret_val
        From
            (
                Select
                    empno,
                    leavetype,
                    app_no,
                    leave_period,
                    bdate,
                    edate,
                    nu_edate,
                    leave_period - ( edate - nu_edate - holiday_count ) nu_leave_period,
                    ( edate - nu_edate - holiday_count ) overlap_leave_period
                From
                    (
                        Select
                            empno,
                            leavetype,
                            app_no,
                            leave_period,
                            bdate,
                            edate,
                            nu_edate,
                            holidaysbetween(
                                nu_edate,
                                edate
                            ) As holiday_count
                        From
                            (
                                Select
                                    empno,
                                    leavetype,
                                    app_no,
                                    bdate,
                                    Nvl(edate, bdate) edate,
                                    Case
                                        When Nvl(edate, bdate) > p_date Then
                                            p_date
                                        Else
                                            Nvl(edate, bdate)
                                    End nu_edate,
                                    leaveperiod / 8 * - 1 As leave_period
                                From
                                    ss_leaveledg
                                Where
                                    empno = p_empno
                                    And leavetype  = p_leave_type
                                    And bdate <= p_date
                                    And Nvl(edate, bdate) > p_date
                                    And adj_type In (
                                        'LA',
                                        'LC'
                                    )
                                    And db_cr      = 'D'
                            )
                    )
            );

        Return v_ret_val;
    Exception
        When Others Then
            Return 0;
    End;

    Function get_cl_bal (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        c_closing_bal             Constant Number := 0;
        v_bal_including_overlap   Number;
        v_overlap_leave           Number;
    Begin
        v_bal_including_overlap   := closingclbal(
            v_empno         => p_empno,
            v_opbaldtfrom   => p_date,
            v_openbal       => c_closing_bal
        );

        v_overlap_leave           := get_overlap_leave(
            p_empno,
            p_date,
            'CL'
        );
        Return v_bal_including_overlap + Nvl(v_overlap_leave, 0);
    Exception
        When Others Then
            Return Null;
    End get_cl_bal;

    Function get_sl_bal (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        c_closing_bal             Constant Number := 0;
        v_bal_including_overlap   Number;
        v_overlap_leave           Number;
    Begin
        v_bal_including_overlap   := closingslbal(
            v_empno         => p_empno,
            v_opbaldtfrom   => p_date,
            v_openbal       => c_closing_bal
        );

        v_overlap_leave           := get_overlap_leave(
            p_empno,
            p_date,
            'SL'
        );
        Return v_bal_including_overlap + Nvl(v_overlap_leave, 0);
    Exception
        When Others Then
            Return Null;
    End get_sl_bal;

    Function get_pl_bal (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        c_closing_bal             Constant Number := 0;
        v_bal_including_overlap   Number;
        v_overlap_leave           Number;
    Begin
        v_bal_including_overlap   := closingplbal(
            v_empno         => p_empno,
            v_opbaldtfrom   => p_date,
            v_openbal       => c_closing_bal
        );

        v_overlap_leave           := get_overlap_leave(
            p_empno,
            p_date,
            'PL'
        );
        Return v_bal_including_overlap + Nvl(v_overlap_leave, 0);
    Exception
        When Others Then
            Return Null;
    End get_pl_bal;

    Function get_ex_bal (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        c_closing_bal             Constant Number := 0;
        v_bal_including_overlap   Number;
        v_overlap_leave           Number;
    Begin
        v_bal_including_overlap   := closingexbal(
            v_empno         => p_empno,
            v_opbaldtfrom   => p_date,
            v_openbal       => c_closing_bal
        );

        v_overlap_leave           := get_overlap_leave(
            p_empno,
            p_date,
            'EX'
        );
        Return v_bal_including_overlap + Nvl(v_overlap_leave, 0);
    Exception
        When Others Then
            Return Null;
    End get_ex_bal;

    Function get_co_bal (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        c_closing_bal             Constant Number := 0;
        v_bal_including_overlap   Number;
        v_overlap_leave           Number;
    Begin
        v_bal_including_overlap   := closingcobal(
            v_empno         => p_empno,
            v_opbaldtfrom   => p_date,
            v_openbal       => c_closing_bal
        );

        v_overlap_leave           := get_overlap_leave(
            p_empno,
            p_date,
            'CO'
        );
        Return v_bal_including_overlap + Nvl(v_overlap_leave, 0);
    Exception
        When Others Then
            Return Null;
    End get_co_bal;

    Function get_oh_bal (
        p_empno Varchar2,
        p_date Date
    ) Return Number As
        c_closing_bal             Constant Number := 0;
        v_bal_including_overlap   Number;
        v_overlap_leave           Number;
    Begin
        v_bal_including_overlap   := closingohbal(
            v_empno         => p_empno,
            v_opbaldtfrom   => p_date,
            v_openbal       => c_closing_bal
        );

        v_overlap_leave           := get_overlap_leave(
            p_empno,
            p_date,
            'OH'
        );
        Return v_bal_including_overlap + Nvl(v_overlap_leave, 0);
    Exception
        When Others Then
            Return Null;
    End get_oh_bal;

    Function get_leave_without_overlap (
        p_app_bdate          Date,
        p_app_edate          Date,
        p_rep_bdate          Date,
        p_rep_edate          Date,
        p_leave_period       Number,
        p_consider_holiday   Varchar2 Default 'OK'
    ) Return Number As
        v_nu_app_bdate    Date;
        v_nu_app_edate    Date;
        v_holiday_count   Number;
    Begin
        If p_app_bdate >= p_rep_bdate And Nvl(p_app_edate, p_app_bdate) <= p_rep_edate Then
            Return p_leave_period;
        End If;
        
        --1-Jan between 25-Dec & 5-Jan

        If p_rep_bdate Between p_app_bdate And p_app_edate And p_rep_edate Between p_app_bdate And p_app_edate Then
            Return Null;
        Elsif p_rep_bdate Between p_app_bdate And p_app_edate Then
            v_nu_app_bdate := p_rep_bdate;
            If p_consider_holiday = 'OK' Then
                v_holiday_count := holidaysbetween(
                    pstartdate   => p_app_bdate,
                    penddate     => v_nu_app_bdate
                );
                Return p_leave_period - ( ( v_nu_app_bdate - p_app_bdate ) - v_holiday_count ) - 1;
            Else
                Return p_leave_period - ( v_nu_app_bdate - p_app_bdate );
            End If;

        Elsif p_rep_edate Between p_app_bdate And p_app_edate Then
            v_nu_app_edate := p_rep_edate;
            If p_consider_holiday = 'OK' Then
                v_holiday_count := holidaysbetween(
                    pstartdate   => v_nu_app_edate,
                    penddate     => p_app_edate
                );
                Return p_leave_period - ( ( p_app_edate - v_nu_app_edate ) - v_holiday_count );
            Else
                Return p_leave_period  - (  p_app_edate - v_nu_app_edate );
            End If;

        End If;

    End;

End leave_bal;
/
---------------------------
--Changed PACKAGE BODY
--LEAVE_ADJ
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."LEAVE_ADJ" As

    Procedure debit_leave(
        p_empno        Varchar2,
        p_pdate        Date,
        p_adj_type     Varchar2,
        p_leavetype    Varchar2,
        p_leave_period Number
    ) As
        v_success Varchar2(10);
        v_message Varchar2(1000);
        v_desc    Varchar2(30);
    Begin
        Select
            description
        Into
            v_desc
        From
            ss_leave_adj_mast
        Where
            adj_type = p_adj_type
            And dc   = 'D';

        leave.add_leave_adj(
            param_empno      => p_empno,
            param_adj_date   => p_pdate,
            param_adj_type   => p_adj_type || 'D',
            param_leave_type => p_leavetype,
            param_adj_period => p_leave_period,
            param_entry_by   => 'SYS',
            param_desc       => v_desc,
            param_success    => v_success,
            param_message    => v_message
        );

    End;

    Procedure adjust_leave_202012(
        p_empno       Varchar2,
        p_success Out Varchar2,
        p_message Out Varchar2
    ) As

        Cursor cur_emplist(
            cp_empno Varchar2
        ) Is
            Select
                empno
            From
                ss_emplmast
            Where
                status = 1
                And emptype In (
                    'R', 'F'
                )
                And empno Like cp_empno;

        v_max_leave_bal_limit ss_leave_bal_max_limit.max_leave_bal%Type;
        Type typ_tab_emplist Is
            Table Of cur_emplist%rowtype;
        tab_emplist           typ_tab_emplist;
        v_processing_date     Date;
        v_count               Number;
        v_cl_bal              Number;
        v_pl_bal              Number;
        v_sl_bal              Number;
        v_p_empno             Varchar2(5);
        c_yyyymm              Constant Varchar2(6) := '202012';
        c_adj_type            Constant Varchar(2)  := 'YA';
    Begin
        v_p_empno := nvl(trim(p_empno), '%');
        Begin
            v_processing_date := last_day(to_date(c_yyyymm, 'yyyymm'));
        Exception
            When Others Then
                p_success := 'KO';
                p_message := 'Invalid YYYYMM.';
                Return;
        End;

        Begin
            Select
                max_leave_bal
            Into
                v_max_leave_bal_limit
            From
                ss_leave_bal_max_limit
            Where
                yyyymm = c_yyyymm;

        Exception
            When Others Then
                v_max_leave_bal_limit := c_max_leave_bal_limit;
        End;

        If v_p_empno <> '%' Then
            Select
                Count(*)
            Into
                v_count
            From
                ss_emplmast
            Where
                empno      = v_p_empno
                And status = 1
                And emptype In (
                    'R', 'F'
                );

            If v_count = 0 Then
                p_success := 'KO';
                p_message := 'Err - Incorrect Employee number.';
                Return;
            End If;

        End If;

        Open cur_emplist(v_p_empno);
        Loop
            Fetch cur_emplist Bulk Collect Into tab_emplist Limit 50;
            For i In 1..tab_emplist.count
            Loop
                Delete
                    From ss_leave_adj
                Where
                    empno            = tab_emplist(i).empno
                    And adj_type     = c_adj_type
                    And db_cr        = 'D'
                    And trunc(bdate) = trunc(v_processing_date)
                    And leavetype In (
                        'CL', 'PL', 'SL'
                    );

                Delete
                    From ss_leaveledg
                Where
                    empno        = tab_emplist(i).empno
                    And adj_type = c_adj_type
                    And db_cr    = 'D'
                    And bdate    = v_processing_date
                    And app_no Like '%'
                    And leavetype In (
                        'CL', 'PL', 'SL'
                    );

                v_cl_bal := leave_bal.get_cl_bal(tab_emplist(i).empno, v_processing_date);
                v_pl_bal := leave_bal.get_pl_bal(tab_emplist(i).empno, v_processing_date);
                v_sl_bal := leave_bal.get_sl_bal(tab_emplist(i).empno, v_processing_date);
                If v_cl_bal > 0 Then
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'CL',
                        p_leave_period => v_cl_bal
                    );
                End If;

                If v_sl_bal > 0 Then
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'SL',
                        p_leave_period => v_sl_bal
                    );
                End If;

                If v_pl_bal > v_max_leave_bal_limit Then
                    v_pl_bal := v_pl_bal - v_max_leave_bal_limit;
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'PL',
                        p_leave_period => v_pl_bal
                    );

                End If;

            End Loop;

            Exit When cur_emplist%notfound;
        End Loop;

    End adjust_leave_202012;

    Procedure adjust_leave_yearly(
        p_empno       Varchar2,
        p_yyyymm      Varchar2,
        p_success Out Varchar2,
        p_message Out Varchar2
    ) As

        Cursor cur_emplist(
            cp_empno Varchar2
        ) Is
            Select
                empno
            From
                ss_emplmast
            Where
                status = 1
                And emptype In (
                    'R', 'F'
                )
                And empno Like cp_empno;

        v_max_leave_bal_limit ss_leave_bal_max_limit.max_leave_bal%Type;
        Type typ_tab_emplist Is
            Table Of cur_emplist%rowtype;
        tab_emplist           typ_tab_emplist;
        v_processing_date     Date;
        v_count               Number;
        v_cl_bal              Number;
        v_pl_bal              Number;
        v_sl_bal              Number;
        v_co_bal              Number;
        v_p_empno             Varchar2(5);
        --c_yyyymm                Constant Varchar2(6) := '202012';
        c_adj_type            Constant Varchar(2) := 'YA';
    Begin
        v_p_empno := nvl(trim(p_empno), '%');
        Begin
            v_processing_date := last_day(to_date(p_yyyymm, 'yyyymm'));
        Exception
            When Others Then
                p_success := 'KO';
                p_message := 'Invalid YYYYMM.';
                Return;
        End;

        Begin
            Select
                max_leave_bal
            Into
                v_max_leave_bal_limit
            From
                ss_leave_bal_max_limit
            Where
                yyyymm = p_yyyymm;

        Exception
            When Others Then
                v_max_leave_bal_limit := c_max_leave_bal_limit;
        End;

        If v_p_empno <> '%' Then
            Select
                Count(*)
            Into
                v_count
            From
                ss_emplmast
            Where
                empno      = v_p_empno
                And status = 1
                And emptype In (
                    'R', 'F'
                );

            If v_count = 0 Then
                p_success := 'KO';
                p_message := 'Err - Incorrect Employee number.';
                Return;
            End If;

        End If;

        Open cur_emplist(v_p_empno);
        Loop
            Fetch cur_emplist Bulk Collect Into tab_emplist Limit 50;
            For i In 1..tab_emplist.count
            Loop
                Delete
                    From ss_leave_adj
                Where
                    empno            = tab_emplist(i).empno
                    And adj_type     = c_adj_type
                    And db_cr        = 'D'
                    And trunc(bdate) = trunc(v_processing_date)
                    And leavetype In (
                        'CL', 'PL', 'SL', 'CO'
                    );

                Delete
                    From ss_leaveledg
                Where
                    empno        = tab_emplist(i).empno
                    And adj_type = c_adj_type
                    And db_cr    = 'D'
                    And bdate    = v_processing_date
                    And app_no Like '%'
                    And leavetype In (
                        'CL', 'PL', 'SL', 'CO'
                    );

                v_cl_bal := leave_bal.get_cl_bal(tab_emplist(i).empno, v_processing_date);
                v_pl_bal := leave_bal.get_pl_bal(tab_emplist(i).empno, v_processing_date);
                v_sl_bal := leave_bal.get_sl_bal(tab_emplist(i).empno, v_processing_date);
                v_co_bal := leave_bal.get_co_bal(tab_emplist(i).empno, v_processing_date);
                If v_cl_bal > 0 Then
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'CL',
                        p_leave_period => v_cl_bal
                    );
                End If;

                If v_sl_bal > 0 Then
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'SL',
                        p_leave_period => v_sl_bal
                    );
                End If;

                If v_co_bal > 0 Then
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'CO',
                        p_leave_period => v_co_bal
                    );
                End If;

                If v_pl_bal > v_max_leave_bal_limit Then
                    v_pl_bal := v_pl_bal - v_max_leave_bal_limit;
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'PL',
                        p_leave_period => v_pl_bal
                    );

                End If;

            End Loop;

            Exit When cur_emplist%notfound;
        End Loop;

    End adjust_leave_yearly;

    Procedure adjust_leave_monthly(
        p_empno       Varchar2,
        p_yyyymm      Varchar2,
        p_success Out Varchar2,
        p_message Out Varchar2
    ) As

        Cursor cur_emplist(
            cp_empno Varchar2
        ) Is
            Select
                empno
            From
                ss_emplmast
            Where
                status = 1
                And emptype In (
                    'R', 'F'
                )
                And empno Like cp_empno;

        v_max_leave_bal_limit ss_leave_bal_max_limit.max_leave_bal%Type;
        Type typ_tab_emplist Is
            Table Of cur_emplist%rowtype;
        tab_emplist           typ_tab_emplist;
        v_processing_date     Date;
        v_count               Number;
        v_cl_bal              Number;
        v_pl_bal              Number;
        v_sl_bal              Number;
        v_p_empno             Varchar2(5);
        c_202012              Constant Varchar2(6) := '202012';

        c_adj_type            Constant Varchar(2)  := 'MA';
    Begin
        v_p_empno := nvl(trim(p_empno), '%');
        Begin
            v_processing_date := last_day(to_date(p_yyyymm, 'yyyymm'));
            If v_processing_date <= to_date(c_202012, 'yyyymm') Then
                p_success := 'KO';
                p_message := 'Invalid YYYYMM.';
                Return;
            End If;

        Exception
            When Others Then
                p_success := 'KO';
                p_message := 'Invalid YYYYMM.';
                Return;
        End;

        Begin
            Select
                max_leave_bal
            Into
                v_max_leave_bal_limit
            From
                ss_leave_bal_max_limit
            Where
                yyyymm = p_yyyymm;

        Exception
            When Others Then
                v_max_leave_bal_limit := c_max_leave_bal_limit;
        End;

        If v_p_empno <> '%' Then
            Select
                Count(*)
            Into
                v_count
            From
                ss_emplmast
            Where
                empno      = v_p_empno
                And status = 1
                And emptype In (
                    'R', 'F'
                );

            If v_count = 0 Then
                p_success := 'KO';
                p_message := 'Err - Incorrect Employee number.';
                Return;
            End If;

        End If;

        Open cur_emplist(v_p_empno);
        Loop
            Fetch cur_emplist Bulk Collect Into tab_emplist Limit 50;
            For i In 1..tab_emplist.count
            Loop
                Delete
                    From ss_leave_adj
                Where
                    empno            = tab_emplist(i).empno
                    And adj_type     = c_adj_type
                    And db_cr        = 'D'
                    And trunc(bdate) = trunc(v_processing_date)
                    And leavetype    = 'PL';

                Delete
                    From ss_leaveledg
                Where
                    empno         = tab_emplist(i).empno
                    And adj_type  = c_adj_type
                    And db_cr     = 'D'
                    And bdate     = v_processing_date
                    And app_no Like '%'
                    And leavetype = 'PL';

                --v_cl_bal   := leave_bal.get_cl_bal(tab_emplist(i).empno, v_processing_date);

                v_pl_bal := leave_bal.get_pl_bal(tab_emplist(i).empno, v_processing_date);
                --v_sl_bal   := leave_bal.get_sl_bal(tab_emplist(i).empno, v_processing_date);
                /*
                If v_cl_bal > 0 Then
                    debit_leave(
                        p_empno          => tab_emplist(i).empno,
                        p_pdate          => v_processing_date,
                        p_adj_type       => c_adj_type,
                        p_leavetype      => 'CL',
                        p_leave_period   => v_cl_bal
                    );
                End If;

                If v_sl_bal > 0 Then
                    debit_leave(
                        p_empno          => tab_emplist(i).empno,
                        p_pdate          => v_processing_date,
                        p_adj_type       => c_adj_type,
                        p_leavetype      => 'SL',
                        p_leave_period   => v_sl_bal
                    );
                End If;
                */
                If v_pl_bal > v_max_leave_bal_limit Then
                    v_pl_bal := v_pl_bal - v_max_leave_bal_limit;
                    debit_leave(
                        p_empno        => tab_emplist(i).empno,
                        p_pdate        => v_processing_date,
                        p_adj_type     => c_adj_type,
                        p_leavetype    => 'PL',
                        p_leave_period => v_pl_bal
                    );

                End If;

            End Loop;

            Exit When cur_emplist%notfound;
        End Loop;

    End adjust_leave_monthly;

    Procedure lapse_leave(
        p_yyyymm   Varchar2,
        p_adj_type Varchar2,
        p_empno    Varchar2
    ) As
        v_success Varchar2(10);
        v_msg     Varchar2(1000);
    Begin
        If p_yyyymm = '202012' Then
            adjust_leave_202012(
                p_empno   => p_empno,
                p_success => v_success,
                p_message => v_msg
            );
        Elsif p_adj_type = 'YA' and p_yyyymm = '202112'  Then
            adjust_leave_yearly(
                p_empno   => p_empno,
                p_yyyymm  => p_yyyymm,
                p_success => v_success,
                p_message => v_msg
            );
        Else
            adjust_leave_monthly(
                p_empno   => p_empno,
                p_yyyymm  => p_yyyymm,
                p_success => v_success,
                p_message => v_msg
            );
        End If;
    End;

    Procedure adjust_leave_async(
        p_yyyymm      Varchar2,
        p_adj_type    Varchar2,
        p_empno       Varchar2,
        p_success Out Varchar2,
        p_message Out Varchar2
    ) As
        v_result Varchar2(10);
        v_msg    Varchar2(1000);
        v_count  Number;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            all_scheduler_running_jobs
        Where
            job_name = c_lapse_leave_job;

        If v_count > 0 Then
            p_success := 'KO';
            p_message := 'Err - Previously scheduled job is still running.';
            Return;
        End If;

        dbms_scheduler.create_job(
            job_name            => c_lapse_leave_job,
            job_type            => 'STORED_PROCEDURE',
            job_action          => 'leave_adj.lapse_leave',
            number_of_arguments => 3,
            enabled             => false,
            job_class           => 'TCMPL_JOB_CLASS',
            comments            => 'to send Email'
        );

        dbms_scheduler.set_job_argument_value(
            job_name          => c_lapse_leave_job,
            argument_position => 1,
            argument_value    => p_yyyymm
        );

        dbms_scheduler.set_job_argument_value(
            job_name          => c_lapse_leave_job,
            argument_position => 2,
            argument_value    => p_adj_type
        );

        dbms_scheduler.set_job_argument_value(
            job_name          => c_lapse_leave_job,
            argument_position => 3,
            argument_value    => p_empno
        );

        dbms_scheduler.enable(c_lapse_leave_job);
        p_success := 'OK';
        p_message := 'Lapse Employee Leave Job has been scheduled.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure rollback_lapse_leave(
        p_yyyymm      Varchar2,
        p_adj_type    Varchar2,
        p_empno       Varchar2,
        p_success Out Varchar2,
        p_message Out Varchar2
    ) As
        v_processing_date Date;
        v_p_empno         Varchar2(5);
        v_count           Number;
    Begin
        v_p_empno := nvl(trim(p_empno), '%');
        Begin
            v_processing_date := last_day(to_date(p_yyyymm, 'yyyymm'));
        Exception
            When Others Then
                p_success := 'KO';
                p_message := 'Invalid YYYYMM.';
                Return;
        End;

        Select
            Count(*)
        Into
            v_count
        From
            ss_leaveledg
        Where
            adj_type         = p_adj_type
            And db_cr        = 'D'
            And trunc(bdate) = trunc(v_processing_date)
            And leavetype In (
                'CL', 'PL', 'SL','CO'
            )
            And empno Like v_p_empno;

        If v_count = 0 Then
            p_success := 'KK';
            p_message := 'No Employee Leave Lapse found for the given criteria.';
            Return;
        End If;

        Delete
            From ss_leave_adj
        Where
            adj_type         = p_adj_type
            And db_cr        = 'D'
            And trunc(bdate) = trunc(v_processing_date)
            And leavetype In (
                'CL', 'PL', 'SL','CO'
            )
            And empno Like v_p_empno;

        Delete
            From ss_leaveledg
        Where
            adj_type  = p_adj_type
            And db_cr = 'D'
            And bdate = v_processing_date
            And app_no Like '%'
            And leavetype In (
                'CL', 'PL', 'SL','CO'
            )
            And empno Like v_p_empno;

        Commit;
        p_success := 'OK';
        p_message := 'Lapse Leave successfully rolled back.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure lapse_leave_single_emp(
        p_yyyymm      Varchar2,
        p_adj_type    Varchar2,
        p_empno       Varchar2,
        p_success Out Varchar2,
        p_message Out Varchar2
    ) As
    Begin
        lapse_leave(
            p_yyyymm   => p_yyyymm,
            p_adj_type => p_adj_type,
            p_empno    => p_empno
        );
        p_success := 'OK';
        p_message := 'Procedure executed.';
    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    ---
    --Procedure to be delete after Use
    --
    --Procedures to Debit TimeSheet Leave

    Procedure post_leave_as_per_ts(
        p_empno                   Varchar2,
        p_leave_type              Varchar2,
        p_actual_leave_bal        Number,
        p_leave_to_adjust         Number,
        p_leave_adj_date          Date,
        p_bal_leave_to_adjust Out Number,
        p_success             Out Varchar2,
        p_message             Out Varchar2
    ) As
        v_bal_leave_to_adj Number;
    Begin
        If nvl(p_actual_leave_bal, 0) <= 0 Then
            p_bal_leave_to_adjust := p_leave_to_adjust;
            p_success             := 'OK';
            Return;
        End If;

        v_bal_leave_to_adj := 0;
        If p_leave_type <> 'PL' Then
            If p_actual_leave_bal > p_leave_to_adjust Then
                v_bal_leave_to_adj    := p_leave_to_adjust;
                p_bal_leave_to_adjust := 0;
            Else
                v_bal_leave_to_adj    := p_actual_leave_bal;
                p_bal_leave_to_adjust := p_leave_to_adjust - p_actual_leave_bal;
            End If;
        End If;
        --call post leave procedure

        leave.add_leave_adj(
            param_empno      => p_empno,
            param_adj_date   => p_leave_adj_date,
            param_adj_type   => 'TSD',
            param_leave_type => p_leave_type,
            param_adj_period => v_bal_leave_to_adj,
            param_entry_by   => 'Sys',
            param_desc       => 'Timesheet Leave Debit',
            param_success    => p_success,
            param_message    => p_message
        );

    Exception
        When Others Then
            p_success := 'KO';
            p_message := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure ts_leave_update_remarks(
        p_empno   Varchar2,
        p_success Varchar2,
        p_message Varchar2
    ) As
    Begin
        Update
            ss_debit_ts_leave
        Set
            remark = p_success || ' - ' || p_message
        Where
            empno = p_empno;

    End;

    Procedure process_leave_as_per_ts As

        Cursor cur_ts_leave Is
            Select
                empno,
                leave_period
            From
                ss_debit_ts_leave
            Order By
                empno;

        Type typ_tab Is
            Table Of cur_ts_leave%rowtype;
        tab_emplist        typ_tab;
        v_count            Number;
        v_processing_date  Date;
        v_cl_bal           Number;
        v_pl_bal           Number;
        v_sl_bal           Number;
        v_p_empno          Varchar2(5);
        c_yyyymm           Constant Varchar2(6) := '202012';
        c_ya_adj_type      Constant Varchar(2)  := 'YA';
        v_success          Varchar2(10);
        v_message          Varchar2(1000);
        v_leave_to_adj     Number;
        v_bal_leave_to_adj Number;
    Begin
        v_processing_date := last_day(to_date(c_yyyymm, 'yyyymm'));
        Update
            ss_debit_ts_leave
        Set
            remark = Null;

        Open cur_ts_leave;
        Loop
            Fetch cur_ts_leave Bulk Collect Into tab_emplist Limit 50;
            Commit;
            For i In 1..tab_emplist.count
            Loop
                Update
                    ss_debit_ts_leave
                Set
                    remark = 'Started'
                Where
                    empno = tab_emplist(i).empno;

                Commit;
                Delete
                    From ss_leave_adj
                Where
                    empno        = tab_emplist(i).empno
                    And adj_type = 'TS'
                    And db_cr    = 'D'
                    And adj_dt   = v_processing_date;

                Delete
                    From ss_leaveledg
                Where
                    empno        = tab_emplist(i).empno
                    And adj_type = 'TS'
                    And db_cr    = 'D'
                    And bdate    = v_processing_date;

                rollback_lapse_leave(
                    p_yyyymm   => c_yyyymm,
                    p_adj_type => c_ya_adj_type,
                    p_empno    => tab_emplist(i).empno,
                    p_success  => v_success,
                    p_message  => v_message
                );

                If v_success = 'KO' Then
                    ts_leave_update_remarks(
                        p_empno   => tab_emplist(i).empno,
                        p_success => v_success,
                        p_message => v_message
                    );

                    Rollback;
                    Continue;
                End If;

                v_cl_bal           := leave_bal.get_cl_bal(tab_emplist(i).empno, v_processing_date);
                v_pl_bal           := leave_bal.get_pl_bal(tab_emplist(i).empno, v_processing_date);
                v_sl_bal           := leave_bal.get_sl_bal(tab_emplist(i).empno, v_processing_date);
                v_bal_leave_to_adj := tab_emplist(i).leave_period;

                --
                --
                --1st CL
                post_leave_as_per_ts(
                    p_empno               => tab_emplist(i).empno,
                    p_leave_type          => 'CL',
                    p_actual_leave_bal    => v_cl_bal,
                    p_leave_to_adjust     => v_bal_leave_to_adj,
                    p_leave_adj_date      => v_processing_date,
                    p_bal_leave_to_adjust => v_bal_leave_to_adj,
                    p_success             => v_success,
                    p_message             => v_message
                );

                If v_success != 'OK' Then
                    ts_leave_update_remarks(
                        p_empno   => tab_emplist(i).empno,
                        p_success => v_success,
                        p_message => v_message
                    );
                End If;

                If v_bal_leave_to_adj = 0 Then
                    adjust_leave_202012(
                        p_empno   => tab_emplist(i).empno,
                        p_success => v_success,
                        p_message => v_message
                    );

                    Continue;
                End If;

                --2nd SL

                post_leave_as_per_ts(
                    p_empno               => tab_emplist(i).empno,
                    p_leave_type          => 'SL',
                    p_actual_leave_bal    => v_sl_bal,
                    p_leave_to_adjust     => v_bal_leave_to_adj,
                    p_leave_adj_date      => v_processing_date,
                    p_bal_leave_to_adjust => v_bal_leave_to_adj,
                    p_success             => v_success,
                    p_message             => v_message
                );

                If v_bal_leave_to_adj = 0 Then
                    adjust_leave_202012(
                        p_empno   => tab_emplist(i).empno,
                        p_success => v_success,
                        p_message => v_message
                    );

                    Continue;
                End If;

                --post PL leave directly
                --Last PL

                leave.add_leave_adj(
                    param_empno      => tab_emplist(i).empno,
                    param_adj_date   => v_processing_date,
                    param_adj_type   => 'TSD',
                    param_leave_type => 'PL',
                    param_adj_period => v_bal_leave_to_adj,
                    param_entry_by   => 'Sys',
                    param_desc       => 'Timesheet Leave Debit',
                    param_success    => v_success,
                    param_message    => v_message
                );

                --XXXXX
                --Do Year End Lapse

                adjust_leave_202012(
                    p_empno   => tab_emplist(i).empno,
                    p_success => v_success,
                    p_message => v_message
                );

                If v_success != 'OK' Then
                    ts_leave_update_remarks(
                        p_empno   => tab_emplist(i).empno,
                        p_success => v_success,
                        p_message => v_message
                    );
                End If;

            End Loop;

            Exit When cur_ts_leave%notfound;
        End Loop;

        Close cur_ts_leave;
    End;

End leave_adj;
/
---------------------------
--Changed PACKAGE BODY
--LEAVE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."LEAVE" As
    /*PROCEDURE validate_cl_nu(
        param_empno VARCHAR2,
        param_bdate DATE,
        param_edate DATE,
        param_half_day_on NUMBER,
        param_leave_period out number,
        param_msg_type OUT NUMBER,
        param_msg OUT VARCHAR2);*/

    Function get_date_4_continuous_leave(
        param_empno           Varchar2,
        param_date            Date,
        param_leave_type      Varchar2,
        param_forward_reverse Varchar2
    ) Return Date;

    Function check_co_with_adjacent_leave(
        param_empno           Varchar2,
        param_date            Date,
        param_forward_reverse Varchar2
    ) Return Number;

    Function validate_spc_co_spc(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_half_day_on Number
    ) Return Number;

    Function get_continuous_cl_sum(
        param_empno           Varchar2,
        param_date            Date,
        param_reverse_forward Varchar2
    ) Return Number;

    Function get_continuous_sl_sum(
        param_empno           Varchar2,
        param_date            Date,
        param_reverse_forward Varchar2
    ) Return Number;

    --function validate_co_spc_co(param_empno varchar2, param_bdate date, param_edate date) return number ;

    Function validate_co_spc_co(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_half_day_on Number
    ) Return Number;

    Function validate_cl_sl_co(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_half_day_on Number,
        param_leave_type  Varchar2
    ) Return Number;

    Function get_continuous_leave_sum(
        param_empno           Varchar2,
        param_date            Date,
        param_leave_type      Varchar2,
        param_reverse_forward Varchar2
    ) Return Number;

    Function check_pl_combination(
        param_empno In   Varchar2,
        param_leave_type Varchar2,
        param_bdate      Date,
        param_edate      Date,
        param_app_no     Varchar2 Default ' '
    ) Return Number;
    /*
  function calc_leave_period ( 
        param_bdate date, 
        param_edate date,
        param_leave_type varchar2,
        param_half_day_on number
        ) return number ;

    /*function validate_cl_sl_co
    (
      param_empno VARCHAR2,
      param_bdate DATE,
      param_edate DATE,
      param_half_day_on NUMBER,
      param_leave_type varchar2
    ) return number ;
*/

    Procedure validate_pl(
        param_empno            Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number   Default half_day_on_none,
        param_app_no           Varchar2 Default ' ',
        param_leave_period Out Number,
        param_msg_type     Out Number,
        param_msg          Out Varchar2
    ) As

        v_leave_period   Number;
        v_minimum_days   Number;
        v_failure_number Number := 0;
        v_pl_combined    Number;
        v_co_spc_co      Number;
        v_spc_co_spc     Number;
    Begin
        param_msg_type     := ss.success;

        --Cannot avail leave on holiday.
        If checkholiday(param_bdate) > 0 Or checkholiday(param_edate) > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Cannot avail leave on holiday. ';
        End If;

        --PL cannot be less then 4 days.

        v_minimum_days     := 0.5;
        v_leave_period     := calc_leave_period(
                                  param_bdate,
                                  param_edate,
                                  'PL',
                                  param_half_day_on
                              );
        param_leave_period := v_leave_period;
        If v_leave_period < v_minimum_days Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - PL cannot be less then 4 days. ';
        End If;

        --Check PL Combined with other Leave

        v_pl_combined      := check_pl_combination(
                                  param_empno,
                                  'PL',
                                  param_bdate,
                                  param_edate,
                                  param_app_no
                              );
        If v_pl_combined = leave_combined_with_none Then
            Return;
        End If;
        If v_pl_combined = leave_combined_with_csp Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - PL and CL/PL/SL cannot be availed together. ';
        Elsif v_pl_combined = leave_combined_over_lap Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Leave has already been availed on same day. ';
        End If;

        -- R E T U R N 

        Return;
        -- R E T U R N 
        --Below processing not required since rule has Changed
        --Can avail leave adjacent to any leavetype except SL cannot be adjacent to SL

        -- X X X X X X X X X X X 
        v_co_spc_co        := validate_co_spc_co(
                                  param_empno,
                                  param_bdate,
                                  param_edate,
                                  param_half_day_on
                              );
        If v_co_spc_co = ss.failure Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - PL cannot be availed with trailing and preceding CO - CO-PL-CO. ';
        End If;

        v_spc_co_spc       := validate_spc_co_spc(
                                  param_empno,
                                  param_bdate,
                                  param_edate,
                                  param_half_day_on
                              );
        If v_spc_co_spc = ss.failure Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - PL cannot be availed when trailing and preceding to CO. "CL-SL-PL  -CO-  CL-SL-PL"';
        End If;

    End validate_pl;

    Function check_pl_combination(
        param_empno In   Varchar2,
        param_leave_type Varchar2,
        param_bdate      Date,
        param_edate      Date,
        param_app_no     Varchar2 Default ' '
    ) Return Number Is
        v_count          Number;
        v_next_work_date Date;
        v_prev_work_date Date;
    Begin
        --Check Overlap
        Select
            Count(*)
        Into
            v_count
        From
            ss_leave_app_ledg
        Where
            empno = param_empno
            And (param_bdate Between bdate And edate
                Or param_edate Between bdate And edate)
            And app_no <> nvl(param_app_no, ' ');

        If v_count > 0 Then
            Return leave_combined_over_lap;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_leave_app_ledg
        Where
            empno = param_empno
            And (bdate Between param_bdate And param_edate
                Or edate Between param_bdate And param_edate)
            And app_no <> nvl(param_app_no, ' ');

        If v_count > 0 Then
            Return leave_combined_over_lap;
        End If;
        --Check Overlap

        --Check CL/SL/PL Combination
        v_prev_work_date := getlastworkingday(param_bdate, '-');
        v_next_work_date := getlastworkingday(param_edate, '+');
        Select
            Count(*)
        Into
            v_count
        From
            ss_leave_app_ledg
        Where
            empno = param_empno
            And (trunc(v_prev_work_date) Between bdate And edate
                Or trunc(v_next_work_date) Between bdate And edate)
            And leavetype Not In (
                'CO', 'PL', 'CL', 'SL'
            )
            And app_no <> nvl(param_app_no, ' ');

        If v_count > 0 Then
            Return leave_combined_with_csp;
        End If;
        --Check CL/SL/PL Combination

        --Check CO Combination
        Declare
            v_prev_co_count Number;
            v_next_co_count Number;
        Begin
            Return leave_combined_with_none;
            /*
            Select
                Count(*)
            Into v_prev_co_count
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And ( Trunc(v_prev_work_date) Between bdate And edate )
                And leavetype = 'CO'
                And app_no <> Nvl(param_app_no, ' ');

            Select
                Count(*)
            Into v_next_co_count
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And ( Trunc(v_next_work_date) Between bdate And edate )
                And leavetype = 'CO'
                And app_no <> Nvl(param_app_no, ' ');

            If v_prev_co_count > 0 Or v_next_co_count > 0 Then
                Return leave_combined_with_co;
            Else
                Return leave_combined_with_none;
            End If;
            */
        End;
        --Check CO Combination
    End check_pl_combination;

    Procedure validate_sl(
        param_empno            Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number,
        param_leave_period Out Number,
        param_msg_type     Out Number,
        param_msg          Out Varchar2
    ) As

        v_minimum_days   Number;
        v_failure_number Number := 0;
        v_sl_combined    Number;
        v_co_spc_co      Number;
        v_cumu_sl        Number;
        v_max_days       Number := 3;
        v_leave_period   Number;
        v_bdate          Date;
        v_edate          Date;
        v_spc_co_spc     Number;
        v_co_combined    Number;
    Begin
        param_msg_type     := ss.success;

        --Cannot avail leave on holiday.
        If checkholiday(param_bdate) > 0 Or checkholiday(param_edate) > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Cannot avail leave on holiday. ';
        End If;

        param_leave_period := calc_leave_period(
                                  param_bdate,
                                  param_edate,
                                  'SL',
                                  param_half_day_on
                              );
        v_leave_period     := param_leave_period;
        v_sl_combined      := validate_cl_sl_co(
                                  param_empno,
                                  param_bdate,
                                  param_edate,
                                  param_half_day_on,
                                  'SL'
                              );
        If v_sl_combined = leave_combined_sl_with_sl Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - SL cannot precede / succeed SL. ';
        Elsif v_sl_combined = leave_combined_over_lap Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Leave has already been availed on same day. ';
        End If;

        -- R E T U R N 

        Return;
        -- R E T U R N 
        --Below processing not required since rule has Changed
        --Can avail leave adjacent to any leavetype except SL cannot be adjacent to SL

        -- X X X X X X X X X X X 
        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            v_cumu_sl := get_continuous_sl_sum(
                             param_empno,
                             param_edate,
                             c_forward
                         );
        End If;

        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            v_cumu_sl := nvl(v_cumu_sl, 0) + get_continuous_sl_sum(
                             param_empno,
                             param_bdate,
                             c_reverse
                         );
        End If;

        v_cumu_sl          := nvl(v_cumu_sl, 0);
        v_cumu_sl          := v_cumu_sl / 8;
        If v_cumu_sl <> 0 And v_cumu_sl + v_leave_period > v_max_days Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - SL cannot be availed for more than 3 days in succession. ';
        End If;

        v_bdate            := Null;
        v_edate            := Null;
        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            v_bdate := get_date_4_continuous_leave(
                           param_empno,
                           param_bdate,
                           leave_type_sl,
                           c_reverse
                       );
        End If;

        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            v_edate := get_date_4_continuous_leave(
                           param_empno,
                           param_edate,
                           leave_type_sl,
                           c_forward
                       );
        End If;

        v_co_spc_co        := validate_co_spc_co(
                                  param_empno,
                                  nvl(v_bdate, param_bdate),
                                  nvl(v_edate, param_edate),
                                  param_half_day_on
                              );

        If v_co_spc_co = ss.failure Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - SL cannot be availed with trailing and preceding CO - CO-SL-CO. ';
        End If;

        v_spc_co_spc       := validate_spc_co_spc(
                                  param_empno,
                                  nvl(v_bdate, param_bdate),
                                  nvl(v_edate, param_edate),
                                  param_half_day_on
                              );

        If v_spc_co_spc = ss.failure Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - SL cannot be availed when trailing and preceding to CO. "CL-SL-PL  -CO-  CL-SL-PL"';
        End If;

    End validate_sl;

    Procedure validate_lv(
        param_empno            Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number,
        param_leave_period Out Number,
        param_msg_type     Out Number,
        param_msg          Out Varchar2
    ) As
        v_failure_number Number := 0;
        v_leave_period   Number;
        v_count          Number;
    Begin
        param_msg_type     := ss.success;
        Select
            Count(empno)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno             = param_empno
            And status        = 1
            And (emptype      = 'C'
                Or expatriate = 1);

        If v_count = 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - You Cannot avail leave type "LV". ';
        End If;

        --Cannot avail leave on holiday.

        If checkholiday(param_bdate) > 0 Or checkholiday(param_edate) > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Cannot avail leave on holiday. ';
        End If;

        param_leave_period := calc_leave_period(
                                  param_bdate,
                                  param_edate,
                                  'LV',
                                  param_half_day_on
                              );
        Select
            Count(*)
        Into
            v_count
        From
            ss_leave_app_ledg
        Where
            empno = param_empno
            And (param_bdate Between bdate And edate
                Or param_edate Between bdate And edate);

        If v_count > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Leave has already been availed on same day. ';
        End If;

    End;

    Procedure validate_co(
        param_empno            Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number,
        param_leave_period Out Number,
        param_msg_type     Out Number,
        param_msg          Out Varchar2
    ) As

        v_leave_period        Number;
        v_max_days            Number := 3;
        v_failure_number      Number := 0;
        v_co_combined_forward Number;
        v_co_combined_reverse Number;
        v_cumu_co             Number;
        v_co_combined         Number;
    Begin
        param_msg_type     := ss.success;

        --Cannot avail leave on holiday.
        If checkholiday(param_bdate) > 0 Or checkholiday(param_edate) > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Cannot avail leave on holiday. ';
        End If;

        --CO cannot be less then 3 days.

        v_leave_period     := calc_leave_period(
                                  param_bdate,
                                  param_edate,
                                  'CO',
                                  param_half_day_on
                              );
        param_leave_period := v_leave_period;
        If v_leave_period > v_max_days Then
            param_msg_type := ss.failure;
            param_msg_type := ss.failure;
            param_msg      := param_msg || to_char(v_failure_number) || ' - CO cannot be more then 3 days. ';
        End If;
        --CO cannot be less then 3 days.

        -- R E T U R N 

        Return;
        -- R E T U R N 
        --Below processing not required since rule has Changed
        --Can avail leave adjacent to any leavetype except SL cannot be adjacent to SL

        -- X X X X X X X X X X X 
        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            v_cumu_co := get_continuous_leave_sum(
                             param_empno,
                             param_edate,
                             leave_type_co,
                             c_forward
                         );
        End If;

        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            v_cumu_co := nvl(v_cumu_co, 0) + get_continuous_leave_sum(
                             param_empno,
                             param_bdate,
                             leave_type_co,
                             c_reverse
                         );
        End If;

        v_cumu_co          := v_cumu_co / 8;
        If v_cumu_co + v_leave_period > v_max_days Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CO cannot be availed for more than 3 days continuously. ';
        End If;

        v_co_combined      := validate_cl_sl_co(
                                  param_empno,
                                  param_bdate,
                                  param_edate,
                                  param_half_day_on,
                                  'CO'
                              );
        If v_co_combined = leave_combined_over_lap Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Leave has already been availed on same day. ';
        End If;

        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            v_co_combined_forward := check_co_with_adjacent_leave(
                                         param_empno,
                                         param_edate,
                                         c_forward
                                     );
            If v_co_combined_forward = ss.failure Then
                v_failure_number := v_failure_number + 1;
                param_msg_type   := ss.failure;
                param_msg        := param_msg || to_char(v_failure_number) || ' - CO + CL/SL/PL + CL/SL/PL/CO cannot be availed together. ';
                Return;
            End If;

        End If;

        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            v_co_combined_reverse := check_co_with_adjacent_leave(
                                         param_empno,
                                         param_bdate,
                                         c_reverse
                                     );
            If v_co_combined_reverse = ss.failure Then
                v_failure_number := v_failure_number + 1;
                param_msg_type   := ss.failure;
                param_msg        := param_msg || to_char(v_failure_number) || ' - CL/SL/PL/CO + CL/SL/PL + CO cannot be availed together. ';
            Elsif leave_with_adjacent = v_co_combined_reverse And leave_with_adjacent = v_co_combined_forward Then
                v_failure_number := v_failure_number + 1;
                param_msg_type   := ss.failure;
                param_msg        := param_msg || to_char(v_failure_number) || ' - CL/SL/PL + CO + CL/SL/PL cannot be availed together. ';
            End If;

        End If;

    End validate_co;

    Procedure validate_cl_old(
        param_empno            Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number,
        param_leave_period Out Number,
        param_msg_type     Out Number,
        param_msg          Out Varchar2
    ) As
        v_leave_period   Number;
        v_max_days       Number;
        v_failure_number Number := 0;
        v_cl_combined    Number;
    Begin
        param_msg_type     := ss.success;

        --Cannot avail leave on holiday.
        If checkholiday(param_bdate) > 0 Or checkholiday(param_edate) > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Cannot avail leave on holiday. ';
        End If;

        --CL cannot be more then 3 days.

        If param_half_day_on = half_day_on_none Then
            v_max_days := 3;
        Else
            v_max_days := 3;
        End If;

        v_leave_period     := calc_leave_period(
                                  param_bdate,
                                  param_edate,
                                  'CL',
                                  param_half_day_on
                              );
        param_leave_period := v_leave_period;
        If v_leave_period > v_max_days Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL cannot be more then 3 days. ';
        End If;
        --CL cannot be less then 3 days.

        v_cl_combined      := validate_cl_sl_co(
                                  param_empno,
                                  param_bdate,
                                  param_edate,
                                  param_half_day_on,
                                  'CL'
                              );
        If v_cl_combined = leave_combined_with_csp Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL and CL/PL/SL cannot be availed together. ';
        Elsif v_cl_combined = leave_combined_over_lap Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Leave has already been availed on same day. ';
        Elsif v_cl_combined = leave_combined_with_co Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL and CO cannot be availed together. ';
        End If;

    End validate_cl_old;

    Procedure check_co_co_combination(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_success Out Number
    ) As

        Cursor prev_leave Is
            Select
                *
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And bdate < param_bdate
            Order By
                edate Desc;

        Cursor next_leave Is
            Select
                *
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And bdate > param_edate
            Order By
                bdate Asc;

        v_count          Number;
        v_prev_work_date Date;
        v_next_work_date Date;
    Begin
        v_count := 0;
        For cur_row In prev_leave
        Loop
            v_count := v_count + 1;
            If v_count = 1 Then
                v_prev_work_date := getlastworkingday(param_bdate, '-');
                If Not (trunc(v_prev_work_date) Between cur_row.bdate And cur_row.edate) Or cur_row.leavetype = 'CO' Then
                    --No Error
                    param_success := ss.success;
                    Exit;
                Else
                    v_prev_work_date := getlastworkingday(cur_row.bdate, '-');
                End If;

            End If;

            If v_count = 2 Then
                If trunc(v_prev_work_date) Between cur_row.bdate And cur_row.edate And cur_row.leavetype = 'CO' Then
                    --Error
                    param_success := ss.failure;
                    Return;
                Else
                    --No Error
                    param_success := ss.success;
                    Null;
                End If;

                Exit;
            End If;

        End Loop;

        If param_success = ss.failure Then
            Return;
        End If;
        v_count := 0;
        For cur_row In next_leave
        Loop
            v_count := v_count + 1;
            If v_count = 1 Then
                v_next_work_date := getlastworkingday(param_edate, '+');
                If Not (trunc(v_next_work_date) Between cur_row.bdate And cur_row.edate) Or cur_row.leavetype = 'CO' Then
                    param_success := ss.success;
                    Exit;
                Else
                    v_next_work_date := getlastworkingday(cur_row.edate, '+');
                End If;

            End If;

            If v_count = 2 Then
                If trunc(v_next_work_date) Between cur_row.bdate And cur_row.edate And cur_row.leavetype = 'CO' Then
                    --Error
                    param_success := ss.failure;
                    Return;
                Else
                    param_success := ss.success;
                    Null;
                End If;

                Exit;
            End If;

        End Loop;

    End;

    Procedure validate_leave(
        param_empno              Varchar2,
        param_leave_type         Varchar2,
        param_bdate              Date,
        param_edate              Date,
        param_half_day_on        Number,
        param_app_no             Varchar2 Default Null,
        param_leave_period   Out Number,
        param_last_reporting Out Varchar2,
        param_resuming       Out Varchar2,
        param_msg_type       Out Number,
        param_msg            Out Varchar2
    ) As
        v_last_reporting Varchar2(100);
        v_resuming       Varchar2(100);
        v_count          Number;
        v_leave_type     Varchar2(2);
    Begin
        If param_bdate > param_edate Then
            param_msg_type := ss.failure;
            param_msg      := 'Invalid date range. Cannot proceed.';
            Return;
        End If;

        Begin
            go_come_msg(
                param_bdate,
                param_edate,
                param_half_day_on,
                v_last_reporting,
                v_resuming
            );
            param_last_reporting := v_last_reporting;
            param_resuming       := v_resuming;
        Exception
            When Others Then
                Null;
        End;
        v_leave_type := param_leave_type;
        If v_leave_type = 'SC' Then
            v_leave_type := 'SL';
        End If;
        Case
            When v_leave_type = leave_type_cl Then 
                --if param_empno in ('02320','02079') then
                validate_cl(
                    param_empno,
                    param_bdate,
                    param_edate,
                    param_half_day_on,
                    param_leave_period,
                    param_msg_type,
                    param_msg
                );
                /*else
                  validate_cl( param_empno ,param_bdate , param_edate , param_half_day_on ,param_leave_period , param_msg_type ,param_msg ) ;
                end if;*/
            When v_leave_type = leave_type_pl Then
                validate_pl(
                    param_empno,
                    param_bdate,
                    param_edate,
                    param_half_day_on,
                    param_app_no,
                    param_leave_period,
                    param_msg_type,
                    param_msg
                );
            When v_leave_type = leave_type_sl Then
                validate_sl(
                    param_empno,
                    param_bdate,
                    param_edate,
                    param_half_day_on,
                    param_leave_period,
                    param_msg_type,
                    param_msg
                );
            When v_leave_type = leave_type_co Then
                validate_co(
                    param_empno,
                    param_bdate,
                    param_edate,
                    param_half_day_on,
                    param_leave_period,
                    param_msg_type,
                    param_msg
                );
            When v_leave_type = leave_type_lv Then
                validate_lv(
                    param_empno,
                    param_bdate,
                    param_edate,
                    param_half_day_on,
                    param_leave_period,
                    param_msg_type,
                    param_msg
                );
            When v_leave_type = leave_type_ex Then 
                --validate_ex( param_empno ,param_bdate , param_edate , param_half_day_on ,param_leave_period , param_msg_type ,param_msg ) ;
                param_msg_type := ss.failure;
                param_msg      := 'Cannot avail "' || v_leave_type || '" Leave. Cannot proceed.';
            Else
                param_msg_type := ss.failure;
                param_msg      := '"' || v_leave_type || '" Leave Type not defined. Cannot proceed.';
        End Case;

    Exception
        When Others Then
            param_leave_period := 0;
            param_msg_type     := ss.failure;
            param_msg          := sqlcode || ' - ' || sqlerrm;
    End;

    Procedure go_come_msg(
        param_bdate              Date,
        param_edate              Date,
        param_half_day_on        Number,
        param_last_reporting Out Varchar2,
        param_resuming       Out Varchar2
    ) As
        v_prev_work_date Date;
        v_next_work_date Date;
    Begin
        v_prev_work_date := getlastworkingday(param_bdate, '-');
        v_next_work_date := getlastworkingday(param_edate, '+');
        Case
            When param_half_day_on = hd_bdate_presnt_part_2 Then
                param_last_reporting := to_char(param_bdate, daydateformat) || in_first_half;
                param_resuming       := to_char(v_next_work_date, daydateformat);
            When param_half_day_on = hd_edate_presnt_part_1 Then
                param_last_reporting := to_char(v_prev_work_date, daydateformat);
                param_resuming       := to_char(param_edate, daydateformat) || in_second_half;
            Else
                param_last_reporting := to_char(v_prev_work_date, daydateformat);
                param_resuming       := to_char(v_next_work_date, daydateformat);
        End Case;

    End;

    Function calc_leave_period(
        param_bdate       Date,
        param_edate       Date,
        param_leave_type  Varchar2,
        param_half_day_on Number
    ) Return Number As
        v_ret_val Number := 0;
    Begin
        If param_leave_type = leave_type_sl Then
            v_ret_val := param_edate - param_bdate + 1;
            If nvl(param_half_day_on, half_day_on_none) <> half_day_on_none Then
                v_ret_val := v_ret_val -.5;
            End If;

            Return v_ret_val;
        End If;

        v_ret_val := (param_edate - param_bdate + 1) - holidaysbetween(param_bdate, param_edate);
        If nvl(param_half_day_on, half_day_on_none) <> half_day_on_none Then
            v_ret_val := v_ret_val -.5;
        End If;

        Return v_ret_val;
    End;

    Function get_app_no(
        param_empno Varchar2
    ) Return Varchar2 As

        my_exception Exception;
        Pragma exception_init(my_exception, -20001);
        v_max_app_no Number;
        v_ret_val    Varchar2(60);
    Begin
        Select
            Count(*)
        Into
            v_max_app_no
        From
            ss_vu_leaveapp
        Where
            empno = param_empno
            And app_date >= trunc(sysdate, 'YEAR');

        If v_max_app_no > 0 Then
            Select
                Max(to_number(substr(app_no, instr(app_no, '/', - 1) + 1)))
            Into
                v_max_app_no
            From
                ss_vu_leaveapp
            Where
                empno = Trim(param_empno)
                And app_date >= trunc(sysdate, 'YEAR')
            Order By
                to_number(substr(app_no, instr(app_no, '/', - 1) + 1));

        End If;

        v_ret_val := param_empno || '/' || to_char(sysdate, 'yyyymmdd') || '/' || (v_max_app_no + 1);

        Return v_ret_val;
    Exception
        When Others Then
            raise_application_error(
                -20001,
                'GET_APP_NO - ' || sqlcode || ' - ' || sqlerrm
            );
    End;

    Procedure add_leave_app(
        param_empno            Varchar2,
        param_app_no           Varchar2 Default ' ',
        param_leave_type       Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number,
        param_projno           Varchar2,
        param_caretaker        Varchar2,
        param_reason           Varchar2,
        param_cert             Number,
        param_contact_add      Varchar2,
        param_contact_std      Varchar2,
        param_contact_phn      Varchar2,
        param_office           Varchar2,
        param_dataentryby      Varchar2,
        param_lead_empno       Varchar2,
        param_discrepancy      Varchar2,
        param_tcp_ip           Varchar2,
        param_nu_app_no Out    Varchar2,
        param_msg_type  Out    Number,
        param_msg       Out    Varchar2,
        param_med_cert_file_nm Varchar2 Default Null
    ) As

        v_app_no              Varchar2(60);
        v_last_reporting      Varchar2(150);
        v_resuming_on         Varchar2(150);
        v_l_rep_dt            Date;
        v_resume_dt           Date;
        v_hd_date             Date;
        v_hd_presnt_part      Number;
        v_lead_apprl          Number;
        v_mngr_email          Varchar2(100);
        v_leave_period        Number;
        v_email_success       Number;
        v_email_message       Varchar2(100);
        v_leave_type          Varchar2(2);
        v_is_covid_sick_leave Number(1);
    Begin
        v_leave_type     := param_leave_type;
        If v_leave_type = 'SC' Then
            v_leave_type          := 'SL';
            v_is_covid_sick_leave := 1;
        End If;

        validate_leave(
            param_empno,
            v_leave_type,
            param_bdate,
            param_edate,
            param_half_day_on,
            param_app_no,
            v_leave_period,
            v_last_reporting,
            v_resuming_on,
            param_msg_type,
            param_msg
        );
        --v_leave_period := calc_leave_period( param_bdate, param_edate, v_leave_type, param_half_day_on);

        If param_msg_type = ss.failure Then
            Return;
        End If;
        If v_leave_type = 'SL' And v_leave_period >= 2 Then
            If param_med_cert_file_nm Is Null Then
                param_msg_type := ss.failure;
                param_msg      := 'Err - Medical Certificate not attached.';
                Return;
            End If;
        End If;

        If nvl(param_half_day_on, half_day_on_none) = hd_bdate_presnt_part_2 Then
            v_hd_date        := param_bdate;
            v_hd_presnt_part := 2;
        Elsif nvl(param_half_day_on, half_day_on_none) = hd_edate_presnt_part_1 Then
            v_hd_date        := param_edate;
            v_hd_presnt_part := 1;
        End If;

        If param_lead_empno = 'None' Then
            v_lead_apprl := ss.apprl_none;
        Else
            v_lead_apprl := ss.pending;
        End If;

        v_app_no         := get_app_no(param_empno);
        param_nu_app_no  := v_app_no;
        --go_come_msg( param_bdate, param_edate, param_half_day_on, v_last_reporting, v_resuming_on);
        v_last_reporting := replace(v_last_reporting, in_first_half);
        v_last_reporting := replace(v_last_reporting, in_second_half);
        v_resuming_on    := replace(v_resuming_on, in_first_half);
        v_resuming_on    := replace(v_resuming_on, in_second_half);
        v_l_rep_dt       := to_date(v_last_reporting, daydateformat);
        v_resume_dt      := to_date(v_resuming_on, daydateformat);
        v_leave_period   := v_leave_period * 8;
        Insert Into ss_leaveapp (
            empno,
            app_no,
            app_date,
            projno,
            caretaker,
            leavetype,
            bdate,
            edate,
            mcert,
            work_ldate,
            resm_date,
            contact_phn,
            contact_std,
            dataentryby,
            office,
            hod_apprl,
            discrepancy,
            user_tcp_ip,
            hd_date,
            hd_part,
            lead_apprl,
            lead_apprl_empno,
            hrd_apprl,
            leaveperiod,
            reason,
            med_cert_file_name,
            is_covid_sick_leave
        )
        Values (
            param_empno,
            v_app_no,
            sysdate,
            param_projno,
            param_caretaker,
            v_leave_type,
            param_bdate,
            param_edate,
            param_cert,
            v_l_rep_dt,
            v_resume_dt,
            param_contact_phn,
            param_contact_std,
            param_dataentryby,
            param_office,
            ss.pending,
            param_discrepancy,
            param_tcp_ip,
            v_hd_date,
            v_hd_presnt_part,
            v_lead_apprl,
            param_lead_empno,
            ss.pending,
            v_leave_period,
            param_reason,
            param_med_cert_file_nm,
            v_is_covid_sick_leave
        );

        Commit;
        param_msg        := 'Application successfully Saved. ' || v_app_no;
        param_msg_type   := ss.success;
        If param_empno = '02320' Then
            v_email_success := ss.success;
        Else
            ss_mail.send_msg_new_leave_app(
                v_app_no,
                v_email_success,
                v_email_message
            );
        End If;

        If v_email_success = ss.failure Then
            param_msg_type := ss.warning;
            param_msg      := param_msg || ' Email could not be sent. - ';
        Else
            param_msg := param_msg || ' Email sent to HoD / Lead.';
        End If;

    Exception
        When Others Then
            param_msg_type := ss.failure;
            param_msg      := nvl(param_msg, ' ') || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure save_pl_revision(
        param_empno         Varchar2,
        param_app_no        Varchar2,
        param_bdate         Date,
        param_edate         Date,
        param_half_day_on   Number,
        param_dataentryby   Varchar2,
        param_lead_empno    Varchar2,
        param_discrepancy   Varchar2,
        param_tcp_ip        Varchar2,
        param_nu_app_no Out Varchar2,
        param_msg_type  Out Number,
        param_msg       Out Varchar2
    ) As

        v_contact_add Varchar2(60);
        v_contact_phn Varchar2(30);
        v_contact_std Varchar2(30);
        v_projno      Varchar2(60);
        v_caretaker   Varchar2(60);
        v_mcert       Number(1);
        v_office      Varchar2(30);
        v_count       Number;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            ss_pl_revision_mast
        Where
            Trim(old_app_no)    = Trim(param_app_no)
            Or Trim(new_app_no) = Trim(param_app_no);

        If v_count > 0 Then
            param_msg_type := ss.failure;
            param_msg      := 'PL application "' || trim(param_app_no) || '" has already been revised.';
            Return;
        End If;

        Begin
            Select
                projno,
                caretaker,
                mcert,
                contact_add,
                contact_phn,
                contact_std,
                office
            Into
                v_projno,
                v_caretaker,
                v_mcert,
                v_contact_add,
                v_contact_phn,
                v_contact_std,
                v_office
            From
                ss_leaveapp
            Where
                Trim(app_no) = Trim(param_app_no);

        Exception
            When Others Then
                param_msg_type := ss.failure;
                param_msg      := nvl(param_msg, ' ') || sqlcode || ' - ' || sqlerrm || '. "' || param_app_no || '" Application not found.';

                Return;
        End;

        add_leave_app(
            param_empno       => param_empno,
            param_app_no      => param_app_no,
            param_leave_type  => 'PL',
            param_bdate       => param_bdate,
            param_edate       => param_edate,
            param_half_day_on => param_half_day_on,
            param_projno      => v_projno,
            param_caretaker   => v_caretaker,
            param_reason      => param_app_no || ' P L   R e v i s e d',
            param_cert        => v_mcert,
            param_contact_add => v_contact_add,
            param_contact_std => v_contact_std,
            param_contact_phn => v_contact_phn,
            param_office      => v_office,
            param_dataentryby => param_dataentryby,
            param_lead_empno  => param_lead_empno,
            param_discrepancy => param_discrepancy,
            param_tcp_ip      => param_tcp_ip,
            param_nu_app_no   => param_nu_app_no,
            param_msg_type    => param_msg_type,
            param_msg         => param_msg
        );

        If param_msg_type = ss.failure Then
            Rollback;
            Return;
        End If;
        Insert Into ss_pl_revision_mast (
            old_app_no,
            new_app_no
        )
        Values (
            Trim(param_app_no),
            Trim(param_nu_app_no)
        );

        Commit;
        param_msg_type := ss.success;
    Exception
        When Others Then
            param_msg_type := ss.failure;
            param_msg      := nvl(param_msg, ' ') || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure get_leave_details(
        param_o_app_no         In  Varchar2,
        param_o_empno          Out Varchar2,
        param_o_emp_name       Out Varchar2,
        param_o_app_date       Out Varchar2,
        param_o_office         Out Varchar2,
        param_o_edate          Out Varchar2,
        param_o_bdate          Out Varchar2,
        param_o_hd_date        Out Varchar2,
        param_o_hd_part        Out Number,
        param_o_leave_period   Out Number,
        param_o_leave_type     Out Varchar2,
        param_o_rep_to         Out Varchar2,
        param_o_projno         Out Varchar2,
        param_o_care_taker     Out Varchar2,
        param_o_reason         Out Varchar2,
        param_o_mcert          Out Number,
        param_o_work_ldate     Out Varchar2,
        param_o_resm_date      Out Varchar2,
        param_o_last_reporting Out Varchar2,
        param_o_resuming       Out Varchar2,
        param_o_contact_add    Out Varchar2,
        param_o_contact_phn    Out Varchar2,
        param_o_std            Out Varchar2,
        param_o_discrepancy    Out Varchar2,
        param_o_lead_empno     Out Varchar2,
        param_o_lead_name      Out Varchar2,
        param_o_msg_type       Out Number,
        param_o_msg            Out Varchar2
    ) As

        v_empno          Varchar2(5);
        v_name           Varchar2(60);
        v_last_reporting Varchar2(100);
        v_resuming       Varchar2(100);
    Begin
        Select
            empno,
            get_emp_name(empno),
            to_char(app_date, 'dd-Mon-yyyy'),
            to_char(edate, 'dd-Mon-yyyy'),
            to_char(bdate, 'dd-Mon-yyyy'),
            to_char(hd_date, 'dd-Mon-yyyy'),
            nvl(hd_part, 0),
            leaveperiod,
            leavetype,
            rep_to,
            projno,
            caretaker,
            reason,
            mcert,
            to_char(work_ldate, 'dd-Mon-yyyy'),
            to_char(resm_date, 'dd-Mon-yyyy'),
            contact_add,
            contact_phn,
            contact_std,
            discrepancy,
            lead_apprl_empno,
            get_emp_name(lead_apprl_empno) leadname,
            office
        Into
            param_o_empno,
            param_o_emp_name,
            param_o_app_date,
            param_o_edate,
            param_o_bdate,
            param_o_hd_date,
            param_o_hd_part,
            param_o_leave_period,
            param_o_leave_type,
            param_o_rep_to,
            param_o_projno,
            param_o_care_taker,
            param_o_reason,
            param_o_mcert,
            param_o_work_ldate,
            param_o_resm_date,
            param_o_contact_add,
            param_o_contact_phn,
            param_o_std,
            param_o_discrepancy,
            param_o_lead_empno,
            param_o_lead_name,
            param_o_office
        From
            ss_leaveapp
        Where
            app_no In (
                param_o_app_no
            );

        Begin
            go_come_msg(
                param_o_bdate,
                param_o_edate,
                param_o_hd_date,
                v_last_reporting,
                v_resuming
            );
            param_o_last_reporting := v_last_reporting;
            param_o_resuming       := v_resuming;
        Exception
            When Others Then
                Null;
        End;

        param_o_msg_type := ss.success;
        param_o_msg_type := 'SUCCESS';
    Exception
        When Others Then
            param_o_msg_type := ss.failure;
            param_o_msg      := sqlcode || ' - ' || sqlerrm;
    End get_leave_details;

    Procedure post_leave_apprl(
        param_list_appno   Varchar2,
        param_msg_type Out Number,
        param_msg      Out Varchar2
    ) As

        Cursor app_recs Is
            Select
                Trim(substr(txt, instr(txt, ',', 1, level) + 1, instr(txt, ',', 1, level + 1) - instr(txt, ',', 1, level) - 1))
                As app_no
            From
                (
                    Select
                        ',' || param_list_appno || ',' As txt
                    From
                        dual
                )
            Connect By
                level <= length(txt) - length(replace(txt, ',', '')) - 1;

        v_cur_app Varchar2(60);
        v_old_app Varchar2(60);
        v_count   Number;
    Begin
        For cur_app In app_recs
        Loop
            v_cur_app := replace(cur_app.app_no, chr(39));

            --check leave is approved
            Select
                Count(*)
            Into
                v_count
            From
                ss_leaveapp
            Where
                Trim(app_no)          = Trim(v_cur_app)
                And nvl(hrd_apprl, 0) = 1;
            If v_count = 0 Then
                Continue;
            End If;
            ---***----

            Select
                Count(*)
            Into
                v_count
            From
                ss_pl_revision_mast
            Where
                Trim(new_app_no) = Trim(v_cur_app);

            If v_count > 0 Then
                Select
                    old_app_no
                Into
                    v_old_app
                From
                    ss_pl_revision_mast
                Where
                    Trim(new_app_no) = Trim(v_cur_app);

                Insert Into ss_pl_revision_app (
                    app_no,
                    empno,
                    app_date,
                    rep_to,
                    projno,
                    caretaker,
                    leaveperiod,
                    leavetype,
                    bdate,
                    edate,
                    reason,
                    mcert,
                    work_ldate,
                    resm_date,
                    contact_add,
                    contact_phn,
                    contact_std,
                    last_hrs,
                    last_mn,
                    resm_hrs,
                    resm_mn,
                    dataentryby,
                    office,
                    hod_apprl,
                    hod_apprl_dt,
                    hod_code,
                    hrd_apprl,
                    hrd_apprl_dt,
                    hrd_code,
                    discrepancy,
                    user_tcp_ip,
                    hod_tcp_ip,
                    hrd_tcp_ip,
                    hodreason,
                    hrdreason,
                    hd_date,
                    hd_part,
                    lead_apprl,
                    lead_apprl_dt,
                    lead_code,
                    lead_tcp_ip,
                    lead_apprl_empno,
                    lead_reason
                )
                Select
                    app_no,
                    empno,
                    app_date,
                    rep_to,
                    projno,
                    caretaker,
                    leaveperiod,
                    leavetype,
                    bdate,
                    edate,
                    reason,
                    mcert,
                    work_ldate,
                    resm_date,
                    contact_add,
                    contact_phn,
                    contact_std,
                    last_hrs,
                    last_mn,
                    resm_hrs,
                    resm_mn,
                    dataentryby,
                    office,
                    hod_apprl,
                    hod_apprl_dt,
                    hod_code,
                    hrd_apprl,
                    hrd_apprl_dt,
                    hrd_code,
                    discrepancy,
                    user_tcp_ip,
                    hod_tcp_ip,
                    hrd_tcp_ip,
                    hodreason,
                    hrdreason,
                    hd_date,
                    hd_part,
                    lead_apprl,
                    lead_apprl_dt,
                    lead_code,
                    lead_tcp_ip,
                    lead_apprl_empno,
                    lead_reason
                From
                    ss_leaveapp
                Where
                    Trim(app_no) = Trim(v_old_app);

                Delete
                    From ss_leaveapp
                Where
                    Trim(app_no) = Trim(v_old_app);

                Delete
                    From ss_leaveledg
                Where
                    Trim(app_no) = Trim(v_old_app);

            End If;

            Insert Into ss_leaveledg(
                app_no,
                app_date,
                leavetype,
                description,
                empno,
                leaveperiod,
                db_cr,
                tabletag,
                bdate,
                edate,
                adj_type,
                hd_date,
                hd_part,
                is_covid_sick_leave
            )
            Select
                app_no,
                app_date,
                leavetype,
                reason,
                empno,
                leaveperiod * - 1,
                'D',
                1,
                bdate,
                edate,
                'LA',
                hd_date,
                hd_part,
                is_covid_sick_leave
            From
                ss_leaveapp
            Where
                Trim(app_no) = Trim(v_cur_app);

            v_cur_app := Null;
        End Loop;

        param_msg_type := ss.success;

    /*      
          for cur_app in app_recs loop
              v_cur_app := trim(replace(cur_app.app_no,chr(39)));
              Select v_old_app_no from ss_pl_revision_mast
                where trim(new_app_no) = trim(v_cur_app);
          end loop;
    */
    Exception
        When Others Then
            param_msg_type := ss.failure;
    End;

    Function is_pl_revision(
        param_app_no Varchar2
    ) Return Number Is
        v_count Number;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            ss_pl_revision_mast
        Where
            Trim(new_app_no) = Trim(param_app_no);

        If v_count = 0 Then
            Return 0;
        Else
            Return 1;
        End If;
    End;

    Procedure validate_cl(
        param_empno            Varchar2,
        param_bdate            Date,
        param_edate            Date,
        param_half_day_on      Number,
        param_leave_period Out Number,
        param_msg_type     Out Number,
        param_msg          Out Varchar2
    ) As

        v_leave_period   Number;
        v_max_days       Number;
        v_failure_number Number := 0;
        v_cl_combined    Number;
        v_cumu_cl        Number;
        v_co_spc_co      Number;
        v_spc_co_spc     Number;
        v_bdate          Date;
        v_edate          Date;
    Begin
        param_msg_type     := ss.success;
        v_cumu_cl          := 0;
        --Cannot avail leave on holiday.
        If checkholiday(param_bdate) > 0 Or checkholiday(param_edate) > 0 Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Cannot avail leave on holiday. ';
        End If;

        --CL cannot be more then 3 days.

        If param_half_day_on = half_day_on_none Then
            v_max_days := 3;
        Else
            v_max_days := 3;
        End If;

        v_leave_period     := calc_leave_period(
                                  param_bdate,
                                  param_edate,
                                  'CL',
                                  param_half_day_on
                              );
        param_leave_period := v_leave_period;
        If v_leave_period > v_max_days Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL cannot be more then 3 days. ';
        End If;
        --CL cannot be less then 3 days.

        v_cl_combined      := validate_cl_sl_co(
                                  param_empno,
                                  param_bdate,
                                  param_edate,
                                  param_half_day_on,
                                  'CL'
                              );
        If v_cl_combined = leave_combined_with_csp Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL and CL/PL/SL cannot be availed together. ';
        Elsif v_cl_combined = leave_combined_over_lap Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - Leave has already been availed on same day. ';
        End If;

        --R E T U R N 

        Return;
        --R E T U R N 
        --Below processing not required since rule has Changed
        --Can avail leave adjacent to any leavetype except SL cannot be adjacent to SL

        -- X X X X X X X X X X X 
        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            v_cumu_cl := get_continuous_cl_sum(
                             param_empno,
                             param_edate,
                             c_forward
                         );
        End If;

        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            v_cumu_cl := nvl(v_cumu_cl, 0) + get_continuous_cl_sum(
                             param_empno,
                             param_bdate,
                             c_reverse
                         );
        End If;

        v_cumu_cl          := v_cumu_cl / 8;
        If v_cumu_cl + v_leave_period > v_max_days Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL cannot be availed for more than 3 days continuously. ';
        End If;

        v_bdate            := Null;
        v_edate            := Null;
        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            v_bdate := get_date_4_continuous_leave(
                           param_empno,
                           param_bdate,
                           leave_type_cl,
                           c_reverse
                       );
        End If;

        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            v_edate := get_date_4_continuous_leave(
                           param_empno,
                           param_edate,
                           leave_type_cl,
                           c_forward
                       );
        End If;

        v_co_spc_co        := validate_co_spc_co(
                                  param_empno,
                                  nvl(v_bdate, param_bdate),
                                  nvl(v_edate, param_edate),
                                  param_half_day_on
                              );

        If v_co_spc_co = ss.failure Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL cannot be availed with trailing and preceding CO - CO-CL-CO. ';
        End If;

        v_spc_co_spc       := validate_spc_co_spc(
                                  param_empno,
                                  nvl(v_bdate, param_bdate),
                                  nvl(v_edate, param_edate),
                                  param_half_day_on
                              );

        If v_spc_co_spc = ss.failure Then
            v_failure_number := v_failure_number + 1;
            param_msg_type   := ss.failure;
            param_msg        := param_msg || to_char(v_failure_number) || ' - CL cannot be availed when trailing and preceding to CO. "CL-SL-PL  -CO-  CL-SL-PL"';
        End If;

    End validate_cl;

    Function get_continuous_leave_sum(
        param_empno           Varchar2,
        param_date            Date,
        param_leave_type      Varchar2,
        param_reverse_forward Varchar2
    ) Return Number Is

        v_app_no       Varchar2(60);
        v_cumu_leave   Number;
        v_lw_date      Date;
        v_leave_period Number;
        v_leave_bdate  Date;
        v_leave_edate  Date;
    Begin
        v_cumu_leave := 0;
        v_lw_date    := getlastworkingday(param_date, param_reverse_forward);
        Loop
            Begin
                Select
                    app_no
                Into
                    v_app_no
                From
                    ss_leave_app_ledg
                Where
                    empno             = param_empno
                    And (v_lw_date Between bdate And edate
                        And leavetype = param_leave_type);

                Select
                    leaveperiod,
                    bdate,
                    edate
                Into
                    v_leave_period,
                    v_leave_bdate,
                    v_leave_edate
                From
                    ss_leaveapp
                Where
                    Trim(app_no) = Trim(v_app_no);

                v_cumu_leave := v_cumu_leave + v_leave_period;
                If param_reverse_forward = c_forward Then
                    v_lw_date := getlastworkingday(v_leave_edate, c_forward);
                Else
                    v_lw_date := getlastworkingday(v_leave_bdate, c_reverse);
                End If;

            Exception
                When Others Then
                    Exit;
            End;
        End Loop;

        Return v_cumu_leave;
    End;

    Function get_continuous_sl_sum(
        param_empno           Varchar2,
        param_date            Date,
        param_reverse_forward Varchar2
    ) Return Number Is

        v_app_no       Varchar2(60);
        v_cumu_leave   Number;
        v_lw_date      Date;
        v_leave_period Number;
        v_leave_bdate  Date;
        v_leave_edate  Date;
        v_prev_lw_dt   Date;
        v_date_diff    Number := 0;
    Begin
        v_cumu_leave := 0;
        v_prev_lw_dt := param_date;
        v_lw_date    := getlastworkingday(param_date, param_reverse_forward);
        Loop
            Begin
                Select
                    app_no
                Into
                    v_app_no
                From
                    ss_leave_app_ledg
                Where
                    empno             = param_empno
                    And (v_lw_date Between bdate And edate
                        And leavetype = leave_type_sl);

                Select
                    leaveperiod,
                    bdate,
                    edate
                Into
                    v_leave_period,
                    v_leave_bdate,
                    v_leave_edate
                From
                    ss_leaveapp
                Where
                    Trim(app_no) = Trim(v_app_no);

                v_cumu_leave := v_cumu_leave + v_leave_period;

                -- S T A R T
                -- ADD UP holidays between Continuous SL
                If param_reverse_forward = c_forward Then
                    v_date_diff  := trunc(v_lw_date, 'DDD') - trunc(v_prev_lw_dt, 'DDD');
                    v_prev_lw_dt := v_lw_date;
                    v_lw_date    := getlastworkingday(v_leave_edate, c_forward);
                Else
                    v_date_diff  := trunc(v_prev_lw_dt, 'DDD') - trunc(v_lw_date, 'DDD');
                    v_prev_lw_dt := v_lw_date;
                    v_lw_date    := getlastworkingday(v_leave_bdate, c_reverse);
                End If;

                If v_date_diff > 1 Then
                    v_cumu_leave := v_cumu_leave + (v_date_diff * 8);
                End If;

                v_date_diff  := 0;
            -- ADD UP holidays between Continuous SL
            -- E N D
            Exception
                When Others Then
                    Exit;
            End;
        End Loop;

        Return v_cumu_leave;
    End;

    Function validate_cl_sl_co(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_half_day_on Number,
        param_leave_type  Varchar2
    ) Return Number Is
        v_count          Number;
        v_prev_work_date Date;
        v_next_work_date Date;
        v_results        Number;
    Begin

        --Check Overlap
        Select
            Count(*)
        Into
            v_count
        From
            ss_leave_app_ledg
        Where
            empno = param_empno
            And ((param_bdate Between bdate And edate
                    Or param_edate Between bdate And edate)
                Or bdate Between param_bdate And param_edate);

        If v_count > 0 Then
            Return leave_combined_over_lap;
        End If;
        --Check Overlap     

        --Check CL/SL/PL Combination
        v_prev_work_date := getlastworkingday(param_bdate, '-');
        v_next_work_date := getlastworkingday(param_edate, '+');
        If param_leave_type In ('PL', 'CL', 'CO') Then
            /*
            Select
                Count(*)
            Into v_count
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And ( Trunc(v_prev_work_date) Between bdate And edate
                      Or Trunc(v_next_work_date) Between bdate And edate )
                And leavetype Not In (
                    'CO'
                ); -- Combination with CO is allowed

            If v_count > 0 Then
                Return leave_combined_with_csp;
            End If;
            */
            Null;
        Elsif param_leave_type = 'SL' Then
            Select
                Count(*)
            Into
                v_count
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And (trunc(v_prev_work_date) Between bdate And edate
                    Or trunc(v_next_work_date) Between bdate And edate)
                And leavetype Not In (
                    'CL', 'PL', 'CO'
                ); -- Combination with CO is allowed

            If v_count > 0 Then
                Return leave_combined_sl_with_sl;
            End If;
            /*
        Elsif param_leave_type = 'CL' Then
            Select
                Count(*)
            Into v_count
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And ( Trunc(v_prev_work_date) Between bdate And edate
                      Or Trunc(v_next_work_date) Between bdate And edate )
                And leavetype Not In (
                    'CO',
                    'CL'
                ); -- Combination with CO is allowed

            If v_count > 0 Then
                Return leave_combined_with_csp;
            End If;
        Elsif param_leave_type = 'CO' Then*/
            /*
              Select count(*) Into v_count From ss_leave_app_ledg
                Where empno = param_empno  
                and (trunc(v_prev_work_date) Between bdate And edate 
                      Or trunc(v_next_work_date) Between bdate And edate 
                    );
              if v_count <> 0 Then
                  --Check   C O   C O   combination
                  check_co_co_combination(param_empno,param_bdate,param_edate,v_results);
                  if v_results = ss.failure Then
                      return leave_combined_with_co;
                  End If;
              End if;
              */
            --Null;
        End If;

        Return leave_combined_with_none;
        --Check CL/SL/PL Combination
    End validate_cl_sl_co;

    Function validate_co_spc_co(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_half_day_on Number
    ) Return Number Is
        v_prev_date Date;
        v_next_date Date;
        v_count     Number;
    Begin
        v_prev_date := getlastworkingday(param_bdate, c_reverse);
        v_next_date := getlastworkingday(param_edate, c_forward);
        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            Begin
                Select
                    Count(*)
                Into
                    v_count
                From
                    ss_leave_app_ledg
                Where
                    empno         = param_empno
                    And leavetype = leave_type_co
                    And v_next_date Between bdate And edate;

                If v_count = 0 Then
                    Return ss.success;
                End If;
            End;
        End If;

        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            Begin
                Select
                    Count(*)
                Into
                    v_count
                From
                    ss_leave_app_ledg
                Where
                    empno         = param_empno
                    And leavetype = leave_type_co
                    And v_prev_date Between bdate And edate;

                If v_count = 0 Then
                    Return ss.success;
                Else
                    Return ss.failure;
                End If;

            End;
        End If;

    End;

    Function validate_spc_co_spc(
        param_empno       Varchar2,
        param_bdate       Date,
        param_edate       Date,
        param_half_day_on Number
    ) Return Number Is

        v_lw_date   Date;
        v_bdate     Date := param_bdate;
        v_edate     Date := param_edate;
        v_count     Number;
        v_leavetype Varchar2(2);
    Begin
        If param_half_day_on In (
                hd_bdate_presnt_part_2, half_day_on_none
            )
        Then
            Begin
                Loop
                    v_edate := getlastworkingday(v_edate, c_forward);
                    Select
                        leavetype,
                        edate
                    Into
                        v_leavetype,
                        v_edate
                    From
                        ss_leave_app_ledg
                    Where
                        empno = param_empno
                        And v_edate Between bdate And edate;

                    If v_leavetype <> leave_type_co Then
                        Return ss.failure;
                    End If;
                End Loop;

            Exception
                When Others Then
                    If param_half_day_on = hd_bdate_presnt_part_2 Then
                        Return ss.success;
                    Else
                        Null;
                    End If;
            End;
        End If;

        If param_half_day_on In (
                hd_edate_presnt_part_1, half_day_on_none
            )
        Then
            Begin
                Loop
                    v_bdate := getlastworkingday(v_bdate, c_reverse);
                    Select
                        leavetype,
                        bdate
                    Into
                        v_leavetype,
                        v_bdate
                    From
                        ss_leave_app_ledg
                    Where
                        empno = param_empno
                        And v_bdate Between bdate And edate;

                    If v_leavetype <> leave_type_co Then
                        Return ss.failure;
                    End If;
                End Loop;

            Exception
                When Others Then
                    Return ss.success;
            End;

        End If;

    Exception
        When Others Then
            Return ss.success;
    End;

    Function get_date_4_continuous_leave(
        param_empno           Varchar2,
        param_date            Date,
        param_leave_type      Varchar2,
        param_forward_reverse Varchar2
    ) Return Date Is
        v_ret_date Date;
        v_date     Date;
        v_bdate    Date;
        v_edate    Date;
    Begin
        v_ret_date := param_date;
        v_date     := param_date;
        Loop
            v_date     := getlastworkingday(v_date, param_forward_reverse);
            Select
                bdate,
                edate
            Into
                v_bdate,
                v_edate
            From
                ss_leave_app_ledg
            Where
                empno         = param_empno
                And v_date Between bdate And edate
                And leavetype = param_leave_type;

            If param_forward_reverse = c_forward Then
                v_date := v_edate;
            Else
                v_date := v_bdate;
            End If;

            v_ret_date := v_date;
        End Loop;

    Exception
        When Others Then
            Return v_ret_date;
    End get_date_4_continuous_leave;

    Function check_co_with_adjacent_leave(
        param_empno           Varchar2,
        param_date            Date,
        param_forward_reverse Varchar2
    ) Return Number Is

        v_lw_date   Date;
        v_leavetype Varchar2(2) := 'CO';
        v_ret_val   Number      := ss.success;
        v_date      Date;
    Begin
        v_date := param_date;
        Loop
            If v_leavetype In ('CL', 'SL', 'CO') Then
                v_date := get_date_4_continuous_leave(
                              param_empno,
                              v_date,
                              v_leavetype,
                              param_forward_reverse
                          );
            End If;

            v_lw_date := getlastworkingday(v_date, param_forward_reverse);
            Select
                Case param_forward_reverse
                    When c_reverse Then
                        bdate
                    Else
                        edate
                End,
                leavetype
            Into
                v_date,
                v_leavetype
            From
                ss_leave_app_ledg
            Where
                empno = param_empno
                And v_lw_date Between bdate And edate;

            If v_ret_val = leave_with_adjacent Then
                Return ss.failure;
            Else
                v_ret_val := leave_with_adjacent;
            End If;

        End Loop;

    Exception
        When Others Then
            Return v_ret_val;
    End;

    Function get_continuous_cl_sum(
        param_empno           Varchar2,
        param_date            Date,
        param_reverse_forward Varchar2
    ) Return Number Is

        v_app_no       Varchar2(60);
        v_cumu_leave   Number;
        v_lw_date      Date;
        v_leave_period Number;
        v_leave_bdate  Date;
        v_leave_edate  Date;
        v_prev_lw_dt   Date;
        v_date_diff    Number := 0;
    Begin
        v_cumu_leave := 0;
        v_prev_lw_dt := param_date;
        v_lw_date    := getlastworkingday(param_date, param_reverse_forward);
        Loop
            Begin
                Select
                    app_no
                Into
                    v_app_no
                From
                    ss_leave_app_ledg
                Where
                    empno             = param_empno
                    And (v_lw_date Between bdate And edate
                        And leavetype = leave_type_cl);

                Select
                    leaveperiod,
                    bdate,
                    edate
                Into
                    v_leave_period,
                    v_leave_bdate,
                    v_leave_edate
                From
                    ss_leaveapp
                Where
                    Trim(app_no) = Trim(v_app_no);

                v_cumu_leave := v_cumu_leave + v_leave_period;
                If param_reverse_forward = c_forward Then
                    v_prev_lw_dt := v_lw_date;
                    v_lw_date    := getlastworkingday(v_leave_edate, c_forward);
                Else
                    v_prev_lw_dt := v_lw_date;
                    v_lw_date    := getlastworkingday(v_leave_bdate, c_reverse);
                End If;

            Exception
                When Others Then
                    Exit;
            End;
        End Loop;

        Return v_cumu_leave;
    End;

    Procedure add_leave_adj(
        param_empno       Varchar2,
        param_adj_date    Date,
        param_adj_type    Varchar2,
        param_leave_type  Varchar2,
        param_adj_period  Number,
        param_entry_by    Varchar2,
        param_desc        Varchar2,
        param_success Out Varchar2,
        param_message Out Varchar2,
        param_narration   Varchar2 Default Null
    ) As

        v_count      Number;
        v_row_adj    ss_leave_adj%rowtype;
        v_row_count  Number;
        v_adj_no     Varchar2(30);
        v_db_cr      Varchar2(1);
        v_adj_type   Varchar2(2);
        v_leave_type Varchar2(2);
        v_adj_period Number(5, 1);
        v_adj_desc   Varchar2(30);
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno      = param_empno
            And status = 1;

        If v_count = 0 Then
            param_success := 'KO';
            param_message := 'Error :- Employee - "' || param_empno || '" does not exists.';
            Return;
        End If;

        If param_adj_date Is Null Then
            param_success := 'KO';
            param_message := 'Error - Adjustment date cannot be blank.';
            Return;
        End If;

        Begin
            Select
                *
            Into
                v_row_adj
            From
                (
                    Select
                        *
                    From
                        ss_leave_adj
                    Where
                        adj_no Like 'ADJ/%'
                        And empno = Trim(param_empno)
                    Order By adj_dt Desc,
                        adj_no Desc
                )
            Where
                Rownum = 1;

            If to_char(v_row_adj.adj_dt, 'yyyy') <> to_char(sysdate, 'yyyy') Then
                v_row_count := 0;
            Else
                v_row_count := to_number(substr(v_row_adj.adj_no, instr(v_row_adj.adj_no, '/', -1) + 1));
            End If;

        Exception
            When Others Then
                v_row_count := 0;
        End;

        Select
            Count(*)
        Into
            v_count
        From
            ss_leave_adj_mast
        Where
            adj_type || dc = param_adj_type;

        If v_count = 0 Then
            param_success := 'KO';
            param_message := 'Error - ' || 'Leave Adjustment type ' || param_adj_type || ' not found';
            Return;
        End If;

        If param_narration Is Not Null Then
            v_adj_desc := substr(param_narration, 1, 30);
        Else
            Select
                description
            Into
                v_adj_desc
            From
                ss_leave_adj_mast
            Where
                adj_type || dc = param_adj_type;

        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_leavetype
        Where
            leavetype = Trim(param_leave_type);

        If v_count = 0 Then
            param_success := 'KO';
            param_message := 'Error - ' || 'Leave type ' || param_leave_type || 'not found';
            Return;
        End If;

        v_adj_type    := substr(param_adj_type, 1, 2);
        v_db_cr       := substr(param_adj_type, 3, 1);
        v_adj_no      := 'ADJ/' || param_empno || '/' || to_char(sysdate, 'yyyy') || '/' || lpad(v_row_count + 1, 4, '0');

        If v_db_cr = 'D' Then
            v_adj_period := param_adj_period * -8;
        Else
            v_adj_period := param_adj_period * 8;
        End If;

        Insert Into ss_leave_adj (
            empno,
            adj_dt,
            adj_no,
            leavetype,
            db_cr,
            adj_type,
            bdate,
            leaveperiod,
            description,
            dataentryby,
            entry_date
        )
        Values (
            param_empno,
            sysdate,
            v_adj_no,
            param_leave_type,
            v_db_cr,
            v_adj_type,
            param_adj_date,
            v_adj_period,
            param_desc,
            param_entry_by,
            sysdate
        );

        Insert Into ss_leaveledg (
            empno,
            app_date,
            app_no,
            leavetype,
            db_cr,
            adj_type,
            bdate,
            leaveperiod,
            tabletag,
            description
        )
        Values (
            param_empno,
            sysdate,
            v_adj_no,
            param_leave_type,
            v_db_cr,
            v_adj_type,
            param_adj_date,
            v_adj_period,
            0,
            v_adj_desc
        );

        Commit;
        param_success := 'OK';
    Exception
        When Others Then
            param_success := 'KO';
            param_message := 'Error - ' || sqlcode || ' - ' || sqlerrm;
    End;

End leave;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_SMART_WORKSPACE_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_SMART_WORKSPACE_QRY" As

    c_reserved_catagory    Varchar2(4)          := 'A001';
    c_restricted_area_catg Constant Varchar2(4) := 'A003';
    c_deskblock_4_swpf     Constant Number(1)   := 6;
    c_deskblock_4_swpv     Constant Number(1)   := 7;
    c_deskblock_not_swpf   Constant Number(1)   := -1;
    Function fn_reserved_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        v_area_catg_code     Constant Varchar2(4) := 'A001';
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_count              Number;
    Begin

        Open c For
            With
                plan As(
                    Select
                        deskid
                    From
                        swp_smart_attendance_plan ap
                    Where
                        ap.attendance_date = p_date
                    Union
                    Select
                        deskid
                    From
                        dm_vu_emp_desk_map_swp_plan
                )
            Select
                *
            From
                (
                    Select
                        aa.*,
                        aa.total_count - aa.occupied_count As available_count,
                        Row_Number() Over (Order By area_desc,
                                work_area,
                                office,
                                floor,
                                wing)                      row_number,
                        Count(*) Over ()                   total_row

                    From
                        (
                            Select
                                da.area_catg_code area_category,
                                da.area_desc,
                                dl.work_area,
                                dl.office,
                                dl.floor,
                                dl.wing,
                                Count(dl.deskid)  total_count,
                                Count(ap.deskid)  occupied_count
                            From
                                dm_vu_desk_list  dl,
                                dm_vu_desk_areas da,
                                plan             ap
                            Where
                                da.area_key_id        = dl.work_area
                                And da.area_catg_code = c_reserved_catagory
                                And dl.deskid         = ap.deskid(+)
                            Group By da.area_catg_code,
                                da.area_desc,
                                dl.work_area,
                                dl.office,
                                dl.floor,
                                dl.wing
                        ) aa
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                area_desc,
                work_area,
                office,
                floor,
                wing;
        Return c;

    End fn_reserved_area_list;

    Function fn_general_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2 Default Null,
        p_date        Date     Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_emp_area_code      Varchar2(3);
    Begin
        v_emp_area_code := iot_swp_common.get_emp_work_area_code(p_empno);
        Open c For
            With
                desk_list As (
                    Select
                        *
                    From
                        dm_vu_desk_list  dl,
                        dm_vu_desk_areas da
                    Where
                        da.area_key_id        = dl.work_area
                        And (da.area_catg_code != c_restricted_area_catg
                            Or da.area_key_id = v_emp_area_code
                        )
                        And deskid Not In(
                            Select
                                deskid
                            From
                                dm_vu_desk_lock_swp_plan
                            Where
                                blockreason <> c_deskblock_4_swpv

                        )
                        And deskid Not In(
                            Select
                                deskid
                            From
                                swp_smart_attendance_plan ap
                            Where
                                ap.attendance_date = p_date
                        )
                )
            Select
                *
            From
                (
                    Select
                        a.*,
                        a.total_count - a.occupied_count                            As available_count,
                        Row_Number() Over (Order By area_desc, office, wing, floor) As row_number,
                        Count(*) Over ()                                            As total_row
                    From
                        (
                            Select
                                d.work_area,
                                d.area_catg_code area_category,
                                d.area_desc,
                                d.office,
                                d.floor,
                                d.wing,
                                Count(d.deskid)  total_count,
                                Count(ed.empno)  occupied_count
                            From
                                desk_list                   d,
                                dm_vu_emp_desk_map_swp_plan ed
                            Where
                                d.deskid = ed.deskid(+)
                            Group By office, wing, floor, work_area, area_desc, area_catg_code
                            Order By area_desc, office, wing, floor
                        ) a
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_general_area_list;

    Function fn_general_area_restrictedlist(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2 Default Null,
        p_date        Date     Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_emp_area_code      Varchar2(3);
    Begin
        v_emp_area_code := iot_swp_common.get_emp_work_area_code(p_empno);
        Open c For
            With
                desk_list As (
                    Select
                        *
                    From
                        dm_vu_desk_list  dl,
                        dm_vu_desk_areas da
                    Where
                        da.area_key_id        = dl.work_area
                        And da.area_catg_code = c_restricted_area_catg
                        And da.area_key_id    = v_emp_area_code
                        And deskid Not In(
                            Select
                                deskid
                            From
                                swp_smart_attendance_plan ap
                            Where
                                ap.attendance_date = p_date
                        )
                )
            Select
                *
            From
                (
                    Select
                        a.*,
                        a.total_count - a.occupied_count                            As available_count,
                        Row_Number() Over (Order By area_desc, office, wing, floor) As row_number,
                        Count(*) Over ()                                            As total_row
                    From
                        (
                            Select
                                d.work_area,
                                d.area_catg_code area_category,
                                d.area_desc,
                                d.office,
                                d.floor,
                                d.wing,
                                Count(d.deskid)  total_count,
                                Count(ed.empno)  occupied_count
                            From
                                desk_list                   d,
                                dm_vu_emp_desk_map_swp_plan ed
                            Where
                                d.deskid = ed.deskid(+)
                            Group By office, wing, floor, work_area, area_desc, area_catg_code
                            Order By area_desc, office, wing, floor
                        ) a
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_general_area_restrictedlist;

    Function fn_work_area_desk(
        p_person_id     Varchar2,
        p_meta_id       Varchar2,

        p_date          Date,
        p_work_area     Varchar2,
        p_area_category Varchar2 Default Null,
        p_office        Varchar2 Default Null,
        p_floor         Varchar2 Default Null,
        p_wing          Varchar2 Default Null,

        p_row_number    Number,
        p_page_length   Number
    ) Return Sys_Refcursor As
        c                        Sys_Refcursor;
        v_empno                  Varchar2(5);
        e_employee_not_found     Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_office                 Varchar2(5);
        v_floor                  dm_vu_desk_list.floor%Type;
        v_wing                   dm_vu_desk_list.wing%Type;
        v_exclude_deskblock_type Number(1);

    Begin
        If p_area_category = c_reserved_catagory Then
            v_exclude_deskblock_type := c_deskblock_4_swpf;
        Else
            v_exclude_deskblock_type := c_deskblock_4_swpv;
        End If;

        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        If Trim(p_office) Is Null Then
            v_office := '%';
        Else
            v_office := trim(p_office);
        End If;

        If Trim(p_floor) Is Null Then
            v_floor := '%';
        Else
            v_floor := trim(p_floor);
        End If;

        If Trim(p_wing) Is Null Then
            v_wing := '%';
        Else
            v_wing := trim(p_wing);
        End If;

        Open c For
            Select
                *
            From
                (

                    Select
                        mast.deskid                         As deskid,
                        mast.office                         As office,
                        mast.floor                          As floor,
                        mast.seatno                         As seat_no,
                        mast.wing                           As wing,
                        mast.assetcode                      As asset_code,
                        mast.bay                            As bay,
                        da.area_catg_code                   As area_category,
                        Row_Number() Over (Order By deskid) row_number,
                        Count(*) Over ()                    total_row
                    From
                        dm_vu_desk_list  mast,
                        dm_vu_desk_areas da
                    Where
                        mast.work_area     = da.area_key_id
                        And mast.work_area = Trim(p_work_area)

                        And Trim(mast.office) Like v_office
                        And Trim(mast.floor) Like v_floor
                        And nvl(Trim(mast.wing), '-') Like v_wing

                        And mast.deskid
                        Not In(
                            Select
                                swptbl.deskid
                            From
                                swp_smart_attendance_plan swptbl
                            Where
                                (attendance_date) = (p_date)
                            Union
                            Select
                                c.deskid
                            From
                                dm_vu_emp_desk_map_swp_plan c
                        )
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                deskid,
                seat_no;
        Return c;
    End fn_work_area_desk;

    Function fn_restricted_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return typ_area_list
        Pipelined
    Is
        tab_area_list_ok     typ_area_list;
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        Open cur_restricted_area_list(p_date, Null, Null, Null, p_row_number, p_page_length);
        Loop
            Fetch cur_restricted_area_list Bulk Collect Into tab_area_list_ok Limit 50;
            For i In 1..tab_area_list_ok.count
            Loop
                Pipe Row(tab_area_list_ok(i));
            End Loop;
            Exit When cur_restricted_area_list%notfound;
        End Loop;
        Close cur_restricted_area_list;
        Return;

    End fn_restricted_area_list;

    Function fn_emp_week_attend_planning(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2,
        p_date      Date
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(4000);
        v_start_date         Date := iot_swp_common.get_monday_date(trunc(p_date));
        v_end_date           Date := iot_swp_common.get_friday_date(trunc(p_date));
    Begin

        Open c For
            /*
                     With
                        atnd_days As (
                           Select w.empno,
                                  Trim(w.attendance_date) As attendance_date,
                                  Trim(w.deskid) As deskid,
                                  1 As planned
                             From swp_smart_attendance_plan w
                            Where w.empno = p_empno
                              And attendance_date Between v_start_date And v_end_date
                        )

                     Select e.empno As empno,
                            dd.d_day,
                            dd.d_date,
                            nvl(atnd_days.planned, 0) As planned,
                            atnd_days.deskid As deskid
                       From ss_emplmast e,
                            ss_days_details dd,
                            atnd_days
                      Where e.empno = Trim(p_empno)
                        And dd.d_date = atnd_days.attendance_date(+)
                        And d_date Between v_start_date And v_end_date
                      Order By dd.d_date;
            */

            With
                atnd_days As (
                    Select
                        w.empno,
                        Trim(w.attendance_date) As attendance_date,
                        Trim(w.deskid)          As deskid,
                        1                       As planned,
                        dm.office               As office,
                        dm.floor                As floor,
                        dm.wing                 As wing,
                        dm.bay                  As bay
                    From
                        swp_smart_attendance_plan w,
                        dms.dm_deskmaster         dm
                    Where
                        w.empno      = p_empno
                        And w.deskid = dm.deskid(+)
                        And attendance_date Between v_start_date And v_end_date
                ),
                holiday As (
                    Select
                        holiday, 1 As is_holiday
                    From
                        ss_holidays
                    Where
                        holiday Between v_start_date And v_end_date
                )
            Select
                e.empno                   As empno,
                dd.d_day,
                dd.d_date,
                nvl(atnd_days.planned, 0) As planned,
                atnd_days.deskid          As deskid,
                nvl(hh.is_holiday, 0)     As is_holiday,
                atnd_days.office          As office,
                atnd_days.floor           As floor,
                atnd_days.wing            As wing,
                atnd_days.bay             As bay
            From
                ss_emplmast     e,
                ss_days_details dd,
                atnd_days,
                holiday         hh
            Where
                e.empno       = Trim(p_empno)

                And dd.d_date = atnd_days.attendance_date(+)
                And dd.d_date = hh.holiday(+)
                And d_date Between v_start_date And v_end_date
            Order By
                dd.d_date;
        Return c;

    End;

    Function fn_week_attend_planning(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,
        p_date                   Date     Default sysdate,

        p_assign_code            Varchar2 Default Null,

        p_emptype_csv            Varchar2 Default Null,
        p_grade_csv              Varchar2 Default Null,
        p_generic_search         Varchar2 Default Null,
        p_desk_assignment_status Varchar2 Default Null,
        p_desk_pivot             Number   Default 0,

        p_row_number             Number,
        p_page_length            Number
    ) Return Sys_Refcursor As
        c                     Sys_Refcursor;
        v_hod_sec_empno       Varchar2(5);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query               Varchar2(7000);
        v_start_date          Date := iot_swp_common.get_monday_date(p_date) - 1;
        v_end_date            Date := iot_swp_common.get_friday_date(p_date);
        v_hod_sec_assign_code Varchar2(4);
        Cursor cur_days Is
            Select
                to_char(d_date, 'yyyymmdd') yymmdd, to_char(d_date, 'DY') dday
            From
                ss_days_details
            Where
                d_date Between v_start_date And v_end_date;
        v_assign_csv          Varchar2(100);
    Begin
        --v_start_date := get_monday_date(p_date);
        --v_end_date   := get_friday_date(p_date);

        v_query               := c_qry_attendance_planning;
        For c1 In cur_days
        Loop
            If c1.dday = 'MON' Then
                v_query := replace(v_query, '!MON!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'TUE' Then
                v_query := replace(v_query, '!TUE!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'WED' Then
                v_query := replace(v_query, '!WED!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'THU' Then
                v_query := replace(v_query, '!THU!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'FRI' Then
                v_query := replace(v_query, '!FRI!', chr(39) || c1.yymmdd || chr(39));
            End If;
        End Loop;
        v_hod_sec_empno       := get_empno_from_meta_id(p_meta_id);
        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;

        v_hod_sec_assign_code := iot_swp_common.get_default_dept4plan_hod_sec(
                                     p_hod_sec_empno => v_hod_sec_empno,
                                     p_assign_code   => p_assign_code
                                 );

        v_query               := replace(v_query, '!E_ASSIGN!', where_clause_e_assign_code);
        v_query               := replace(v_query, '!CE_ASSIGN!', where_clause_ce_assign_code);

        If p_grade_csv Is Not Null Then
            v_query := replace(v_query, '!GRADES_SUBQUERY!', sub_qry_grades_csv);
        Else
            v_query := replace(v_query, '!GRADES_SUBQUERY!', '');
        End If;

        If p_emptype_csv Is Not Null Then
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_csv);
        Else
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_default);
        End If;

        If Trim(p_generic_search) Is Not Null Then
            v_query := replace(v_query, '!GENERIC_SEARCH!', where_clause_generic_search);
        Else
            v_query := replace(v_query, '!GENERIC_SEARCH!', '');
        End If;

        If p_desk_assignment_status = 'Pending' Then
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', ' and a.empno is null ');
        Elsif p_desk_assignment_status = 'Assigned' Then
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', ' and a.empno is not null ');
        Else
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', '');
        End If;

        If nvl(p_desk_pivot, 0) = 1 Then
            v_query := replace(v_query, '!PIVOT_COL!', pivot_desk);
            v_query := replace(v_query, '!PIVOT_FOR!', sub_desk_pivot);
        Else
            v_query := replace(v_query, '!PIVOT_COL!', pivot_PLAN);
            v_query := replace(v_query, '!PIVOT_FOR!', sub_days_pivot);
        End If;

        /*
                Insert Into swp_mail_log (subject, mail_sent_to_cc_bcc, modified_on)
                Values (v_empno || '-' || p_row_number || '-' || p_page_length || '-' || to_char(v_start_date, 'yyyymmdd') || '-' ||
                    to_char(v_end_date, 'yyyymmdd'),
                    v_query, sysdate);
                Commit;
                */
        Open c For v_query Using
            p_person_id,
            p_meta_id,
            p_row_number,
            p_page_length,

            v_start_date,
            v_end_date,

            v_hod_sec_assign_code,
            v_assign_csv,
            p_emptype_csv,
            p_grade_csv,
            '%' || upper(trim(p_generic_search)) || '%',
            p_desk_assignment_status;

        Return c;

    End;

    Function fn_current_planning_xl(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_assign_code Varchar2 Default Null
    ) Return Sys_Refcursor As
        c Sys_Refcursor;

    Begin
        c := fn_week_attend_planning(
                 p_person_id              => p_person_id,
                 p_meta_id                => p_meta_id,
                 p_date                   => sysdate,

                 p_assign_code            => p_assign_code,

                 p_emptype_csv            => Null,
                 p_grade_csv              => Null,
                 p_generic_search         => Null,
                 p_desk_assignment_status => Null,
                 p_desk_pivot             => 1,

                 p_row_number             => 0,
                 p_page_length            => 100000
             );
        Return c;
    End;

    Function fn_future_planning_xl(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_assign_code Varchar2 Default Null
    ) Return Sys_Refcursor As
        c                Sys_Refcursor;
        rec_config_weeks swp_config_weeks%rowtype;
    Begin
        Begin
            Select
                *
            Into
                rec_config_weeks
            From
                swp_config_weeks
            Where
                planning_flag = 2;
        Exception
            When Others Then
                Return Null;
        End;
        c := fn_week_attend_planning(
                 p_person_id              => p_person_id,
                 p_meta_id                => p_meta_id,
                 p_date                   => rec_config_weeks.start_date,

                 p_assign_code            => p_assign_code,

                 p_emptype_csv            => Null,
                 p_grade_csv              => Null,
                 p_generic_search         => Null,
                 p_desk_assignment_status => Null,
                 p_desk_pivot             => 1,

                 p_row_number             => 0,
                 p_page_length            => 100000
             );
        Return c;
    End;

    Function fn_week_attend_planning_all(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,
        p_date                   Date     Default sysdate,

        p_assign_csv             Varchar2 Default Null,

        p_emptype_csv            Varchar2 Default Null,
        p_grade_csv              Varchar2 Default Null,
        p_generic_search         Varchar2 Default Null,
        p_desk_assignment_status Varchar2 Default Null,
        p_desk_pivot             Number   Default 0,

        p_row_number             Number,
        p_page_length            Number
    ) Return Sys_Refcursor As
        c                     Sys_Refcursor;
        v_hod_sec_empno       Varchar2(5);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query               Varchar2(7000);
        v_start_date          Date := iot_swp_common.get_monday_date(p_date) - 1;
        v_end_date            Date := iot_swp_common.get_friday_date(p_date);
        v_hod_sec_assign_code Varchar2(4);
        Cursor cur_days Is
            Select
                to_char(d_date, 'yyyymmdd') yymmdd, to_char(d_date, 'DY') dday
            From
                ss_days_details
            Where
                d_date Between v_start_date And v_end_date;

    Begin
        --v_start_date := get_monday_date(p_date);
        --v_end_date   := get_friday_date(p_date);

        v_query := c_qry_attendance_planning;
        For c1 In cur_days
        Loop
            If c1.dday = 'MON' Then
                v_query := replace(v_query, '!MON!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'TUE' Then
                v_query := replace(v_query, '!TUE!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'WED' Then
                v_query := replace(v_query, '!WED!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'THU' Then
                v_query := replace(v_query, '!THU!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'FRI' Then
                v_query := replace(v_query, '!FRI!', chr(39) || c1.yymmdd || chr(39));
            End If;
        End Loop;

        /*
        v_hod_sec_empno       := get_empno_from_meta_id(p_meta_id);
        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;

        v_hod_sec_assign_code := iot_swp_common.get_default_dept4plan_hod_sec(
                                     p_hod_sec_empno => v_hod_sec_empno,
                                     p_assign_code   => p_assign_code
                                 );
        */
        If p_assign_csv Is Not Null Then
            v_query := replace(v_query, '!E_ASSIGN!', sub_qry_e_assign_csv);
            v_query := replace(v_query, '!CE_ASSIGN!', sub_qry_ce_assign_csv);
        Else
            v_query := replace(v_query, '!E_ASSIGN!', '');
            v_query := replace(v_query, '!CE_ASSIGN!', '');
        End If;

        If p_grade_csv Is Not Null Then
            v_query := replace(v_query, '!GRADES_SUBQUERY!', sub_qry_grades_csv);
        Else
            v_query := replace(v_query, '!GRADES_SUBQUERY!', '');
        End If;

        If p_emptype_csv Is Not Null Then
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_csv);
        Else
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_default);
        End If;

        If Trim(p_generic_search) Is Not Null Then
            v_query := replace(v_query, '!GENERIC_SEARCH!', where_clause_generic_search);
        Else
            v_query := replace(v_query, '!GENERIC_SEARCH!', '');
        End If;

        If p_desk_assignment_status = 'Pending' Then
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', ' and a.empno is null ');
        Elsif p_desk_assignment_status = 'Assigned' Then
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', ' and a.empno is not null ');
        Else
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', '');
        End If;

        If nvl(p_desk_pivot, 0) = 1 Then
            v_query := replace(v_query, '!PIVOT_COL!', pivot_desk);
            v_query := replace(v_query, '!PIVOT_FOR!', sub_desk_pivot);
        Else
            v_query := replace(v_query, '!PIVOT_COL!', pivot_PLAN);
            v_query := replace(v_query, '!PIVOT_FOR!', sub_days_pivot);
        End If;

        /*
                Insert Into swp_mail_log (subject, mail_sent_to_cc_bcc, modified_on)
                Values (v_empno || '-' || p_row_number || '-' || p_page_length || '-' || to_char(v_start_date, 'yyyymmdd') || '-' ||
                    to_char(v_end_date, 'yyyymmdd'),
                    v_query, sysdate);
                Commit;
                */
        Open c For v_query Using
            p_person_id,
            p_meta_id,
            p_row_number,
            p_page_length,

            v_start_date,
            v_end_date,

            v_hod_sec_assign_code,
            p_assign_csv,
            p_emptype_csv,
            p_grade_csv,
            '%' || upper(trim(p_generic_search)) || '%',
            p_desk_assignment_status;

        Return c;

    End;

    Function fn_all_current_planning_xl(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_date      Date

    ) Return Sys_Refcursor As
        c Sys_Refcursor;

    Begin
        c := fn_week_attend_planning_all(
                 p_person_id              => p_person_id,
                 p_meta_id                => p_meta_id,
                 p_date                   => p_date,

                 p_emptype_csv            => Null,
                 p_grade_csv              => Null,
                 p_generic_search         => Null,
                 p_desk_assignment_status => Null,
                 p_desk_pivot             => 1,

                 p_row_number             => 0,
                 p_page_length            => 100000
             );
        Return c;
    End;

End iot_swp_smart_workspace_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_SMART_WORKSPACE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_SMART_WORKSPACE" As
    c_planning_future  Constant Number(1) := 2;
    c_planning_current Constant Number(1) := 1;
    c_planning_is_open Constant Number(1) := 1;
    Procedure del_emp_sws_atend_plan(
        p_empno            Varchar2,
        p_date             Date,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
        rec_smart_attendance_plan swp_smart_attendance_plan%rowtype;
        v_plan_start_date         Date;
        v_plan_end_date           Date;
        v_planning_exists         Varchar2(2);
        v_planning_open           Varchar2(2);
        v_message_type            Varchar2(10);
        v_message_text            Varchar2(1000);

        v_general_area            Varchar2(4) := 'A002';
        v_count                   Number;
        rec_config_week           swp_config_weeks%rowtype;
    Begin
        If Not iot_swp_common.fn_can_do_desk_plan_4_emp(p_empno) Then
            Return;
        End If;

        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            planning_flag = c_planning_future
            And sws_open  = c_planning_is_open;

        Select
            Count(*)
        Into
            v_count
        From
            swp_smart_attendance_plan
        Where
            empno           = p_empno
            And week_key_id = rec_config_week.key_id;
        If v_count < 2 Then
            p_message_type := 'KO';
            p_message_text := 'Only one attendance day availabe. Hence cannot delete.';
            Return;
        End If;
        Begin
            Select
                *
            Into
                rec_smart_attendance_plan
            From
                swp_smart_attendance_plan
            Where
                empno               = p_empno
                And attendance_date = p_date;
        Exception
            When no_data_found Then
                Return;
        End;
        --Delete from Planning table

        Delete
            From swp_smart_attendance_plan
        Where
            key_id = rec_smart_attendance_plan.key_id;

        --Check if the desk is General desk.
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';

        If Not iot_swp_common.is_desk_in_general_area(rec_smart_attendance_plan.deskid) Then
            Return;
        End If;
        --

        iot_swp_dms.sp_unlock_desk(
            p_person_id   => Null,
            p_meta_id     => Null,

            p_deskid      => rec_smart_attendance_plan.deskid,
            p_week_key_id => rec_config_week.key_id
        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure sp_add_weekly_atnd(
        p_person_id         Varchar2,
        p_meta_id           Varchar2,

        p_weekly_attendance typ_tab_string,
        p_empno             Varchar2,
        p_message_type Out  Varchar2,
        p_message_text Out  Varchar2
    ) As
        strsql                    Varchar2(600);
        v_count                   Number;
        v_status                  Varchar2(5);
        v_mod_by_empno            Varchar2(5);
        v_pk                      Varchar2(10);
        v_fk                      Varchar2(10);
        v_empno                   Varchar2(5);
        v_attendance_date         Date;
        v_desk                    Varchar2(20);
        rec_config_week           swp_config_weeks%rowtype;
        rec_smart_attendance_plan swp_smart_attendance_plan%rowtype;
    Begin

        v_mod_by_empno := get_empno_from_meta_id(p_meta_id);

        If v_mod_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        If Not iot_swp_common.fn_can_do_desk_plan_4_emp(p_empno) Then
            p_message_type := 'KO';
            p_message_text := 'Planning not allowed for employee assign code.';
            Return;
        End If;

        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            planning_flag = c_planning_future
            And sws_open  = c_planning_is_open;
        Select
            Count(*)
        Into
            v_count
        From
            swp_primary_workspace
        Where
            Trim(empno)                 = Trim(p_empno)
            And Trim(primary_workspace) = 2;

        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number ' || p_empno;
            Return;
        End If;

        For i In 1..p_weekly_attendance.count
        Loop

            With
                csv As (
                    Select
                        p_weekly_attendance(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1))          empno,
                to_date(Trim(regexp_substr(str, '[^~!~]+', 1, 2))) attendance_date,
                Trim(regexp_substr(str, '[^~!~]+', 1, 3))          desk,
                Trim(regexp_substr(str, '[^~!~]+', 1, 4))          status
            Into
                v_empno, v_attendance_date, v_desk, v_status
            From
                csv;

            If v_status = 0 Then
                del_emp_sws_atend_plan(
                    p_empno        => v_empno,
                    p_date         => trunc(v_attendance_date),
                    p_message_type => p_message_type,
                    p_message_text => p_message_text
                );
                Return;
            End If;
            Begin
                Select
                    *
                Into
                    rec_smart_attendance_plan
                From
                    swp_smart_attendance_plan
                Where
                    empno               = v_empno
                    And attendance_date = v_attendance_date;
            Exception
                When Others Then
                    Null;
            End;
            If v_status = '1' Then
                If rec_smart_attendance_plan.empno Is Null Then
                    v_pk := dbms_random.string('X', 10);

                    Select
                        key_id
                    Into
                        v_fk
                    From
                        swp_primary_workspace
                    Where
                        Trim(empno)                 = Trim(p_empno)
                        And Trim(primary_workspace) = '2';

                    Insert Into swp_smart_attendance_plan
                    (
                        key_id,
                        ws_key_id,
                        empno,
                        attendance_date,
                        deskid,
                        modified_on,
                        modified_by,
                        week_key_id
                    )
                    Values
                    (
                        v_pk,
                        v_fk,
                        v_empno,
                        v_attendance_date,
                        v_desk,
                        sysdate,
                        v_mod_by_empno,
                        rec_config_week.key_id
                    );
                Else
                    Update
                        swp_smart_attendance_plan
                    Set
                        deskid = v_desk, modified_on = sysdate, modified_by = v_mod_by_empno
                    Where
                        key_id = rec_smart_attendance_plan.key_id;
                End If;
                If iot_swp_common.is_desk_in_general_area(v_desk) Then
                    /*
                    iot_swp_dms.sp_clear_desk(
                        p_person_id => Null,
                        p_meta_id   => p_meta_id,

                        p_deskid    => v_desk

                    );
                    */
                    iot_swp_dms.sp_lock_desk(
                        p_person_id => Null,
                        p_meta_id   => Null,

                        p_deskid    => v_desk
                    );
                End If;
            End If;

        End Loop;
        Commit;

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When dup_val_on_index Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || v_desk || ' is not available. It has be assigned to other Employee.';

        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End sp_add_weekly_atnd;

    Procedure sp_smart_ws_weekly_summary(
        p_person_id                     Varchar2,
        p_meta_id                       Varchar2,

        p_assign_code                   Varchar2,
        p_date                          Date,

        p_emp_count_smart_workspace Out Number,
        p_emp_count_mon             Out Number,
        p_emp_count_tue             Out Number,
        p_emp_count_wed             Out Number,
        p_emp_count_thu             Out Number,
        p_emp_count_fri             Out Number,
        p_costcode_desc             Out Varchar2,
        p_message_type              Out Varchar2,
        p_message_text              Out Varchar2
    ) As
        v_start_date Date;
        v_end_date   Date;
        Cursor cur_summary(cp_start_date Date,
                           cp_end_date   Date) Is
            Select
                attendance_day, Count(empno) emp_count
            From
                (
                    Select
                        e.empno, to_char(attendance_date, 'DY') attendance_day
                    From
                        ss_emplmast               e,
                        swp_smart_attendance_plan wa
                    Where
                        e.assign    = p_assign_code
                        And attendance_date Between cp_start_date And cp_end_date
                        And e.empno = wa.empno(+)
                        And status  = 1
                        And emptype In (
                            Select
                                emptype
                            From
                                swp_include_emptype
                        )
                )
            Group By
                attendance_day;

    Begin
        v_start_date   := iot_swp_common.get_monday_date(p_date);
        v_end_date     := iot_swp_common.get_friday_date(p_date);
        Select
            costcode || ' - ' || name
        Into
            p_costcode_desc
        From
            ss_costmast
        Where
            costcode = p_assign_code;

        For c1 In cur_summary(trunc(v_start_date), trunc(v_end_date))
        Loop
            If c1.attendance_day = 'MON' Then
                p_emp_count_mon := c1.emp_count;
            Elsif c1.attendance_day = 'TUE' Then
                p_emp_count_tue := c1.emp_count;
            Elsif c1.attendance_day = 'WED' Then
                p_emp_count_wed := c1.emp_count;
            Elsif c1.attendance_day = 'THU' Then
                p_emp_count_thu := c1.emp_count;
            Elsif c1.attendance_day = 'FRI' Then
                p_emp_count_fri := c1.emp_count;
            End If;
        End Loop;

        --Total Count
        Select
            --e.empno, emptype, status, aw.primary_workspace
            Count(*)
        Into
            p_emp_count_smart_workspace
        From
            ss_emplmast           e,
            swp_primary_workspace aw

        Where
            e.assign                 = p_assign_code
            And e.empno              = aw.empno
            And status               = 1
            And emptype In (
                Select
                    emptype
                From
                    swp_include_emptype
            )
            And aw.primary_workspace = 2
            And
            trunc(aw.start_date)     = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = aw.empno
                        And b.start_date <= v_end_date
                );

        /*

                Select
                    Count(*)
                Into
                    p_emp_count_smart_workspace
                From
                    swp_primary_workspace
                Where
                    primary_workspace = 2
                    And empno In (
                        Select
                            empno
                        From
                            ss_emplmast
                        Where
                            status     = 1
                            And assign = p_assign_code
                    );
        */
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_sys_assign_sws_desk(
        p_empno            Varchar2,
        p_attendance_date  Date,
        p_deskid           Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_count         Number;
        v_pk            Varchar2(10);
        v_fk            Varchar2(10);
        rec_config_week swp_config_weeks%rowtype;
    Begin

        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            planning_flag = c_planning_future;

        Select
            Count(*)
        Into
            v_count
        From
            swp_primary_workspace
        Where
            Trim(empno)                 = Trim(p_empno)
            And Trim(primary_workspace) = 2;

        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number ' || p_empno;
            Return;
        End If;

        v_pk           := dbms_random.string('X', 10);

        Select
            key_id
        Into
            v_fk
        From
            swp_primary_workspace
        Where
            Trim(empno)                 = Trim(p_empno)
            And Trim(primary_workspace) = '2';

        Insert Into swp_smart_attendance_plan
        (
            key_id,
            ws_key_id,
            empno,
            attendance_date,
            deskid,
            modified_on,
            modified_by,
            week_key_id
        )
        Values
        (
            v_pk,
            v_fk,
            p_empno,
            p_attendance_date,
            p_deskid,
            sysdate,
            'Sys',
            rec_config_week.key_id
        );
        If iot_swp_common.is_desk_in_general_area(p_deskid) Then

            iot_swp_dms.sp_lock_desk(
                p_person_id => Null,
                p_meta_id   => Null,

                p_deskid    => p_deskid
            );
        End If;
        Commit;

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End sp_sys_assign_sws_desk;

End iot_swp_smart_workspace;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_SELECT_LIST_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_SELECT_LIST_QRY" As

    Function fn_desk_list_for_smart(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_date      Date,
        p_empno     Varchar2
    ) Return Sys_Refcursor As
        c                 Sys_Refcursor;
        v_empno           Varchar2(5);
        timesheet_allowed Number;
        c_permanent_desk  Constant Number := 1;
    Begin
        --v_empno := get_empno_from_meta_id(p_meta_id);
        Open c For
            Select
                deskid                             data_value_field,
                rpad(deskid, 7, ' ') || ' | ' ||
                rpad(office, 5, ' ') || ' | ' ||
                rpad(nvl(floor, ' '), 6, ' ') || ' | ' ||
                rpad(nvl(wing, ' '), 5, ' ') || ' | ' ||
                rpad(nvl(bay, ' '), 9, ' ') || ' | ' ||
                rpad(nvl(work_area, ' '), 15, ' ') As data_text_field
            From
                dm_vu_desk_list
            Where
                office Not Like 'Home%'
                And office Like 'MOC1%'
                And nvl(cabin, 'X') <> 'C'
                --and nvl(desk_share_type,-10) = c_permanent_desk --Permanent
                And Trim(deskid) Not In (
                    Select
                        deskid
                    From
                        swp_smart_attendance_plan
                    Where
                        trunc(attendance_date) = trunc(p_date)
                        And empno != Trim(p_empno)
                    Union
                    Select
                        deskid
                    From
                        dm_vu_emp_desk_map_swp_plan
                )
            Order By
                office;

        Return c;
    End fn_desk_list_for_smart;

    Function fn_desk_list_for_office(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_date      Date Default Null,
        p_empno     Varchar2
    ) Return Sys_Refcursor As
        c                 Sys_Refcursor;
        v_empno           Varchar2(5);
        c_permanent_desk  Constant Number := 1;
        timesheet_allowed Number;
    Begin
        Open c For

            Select
                deskid                             data_value_field,
                rpad(deskid, 7, ' ') || ' | ' ||
                rpad(office, 5, ' ') || ' | ' ||
                rpad(nvl(floor, ' '), 6, ' ') || ' | ' ||
                rpad(nvl(wing, ' '), 5, ' ') || ' | ' ||
                rpad(nvl(bay, ' '), 9, ' ') || ' | ' ||
                rpad(nvl(work_area, ' '), 15, ' ') As data_text_field
            From
                dms.dm_deskmaster dms
            Where
                office Not Like 'Home%'
                And nvl(cabin, 'X') <> 'C'
                --and nvl(desk_share_type,-10) = c_permanent_desk --Permanent
                And dms.deskid Not In
                (
                    Select
                    Distinct dmst.deskid
                    From
                        dm_vu_emp_desk_map_swp_plan dmst
                )
                And dms.deskid Not In
                (
                    Select
                    Distinct swp_wfm.deskid
                    From
                        swp_smart_attendance_plan swp_wfm
                    Where
                        trunc(swp_wfm.attendance_date) >= trunc(sysdate)
                )
            Order By
                office,
                deskid;

        Return c;
    End fn_desk_list_for_office;

    Function fn_employee_list_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
                And assign In (
                    Select
                        parent
                    From
                        ss_user_dept_rights
                    Where
                        empno = v_empno
                    Union
                    Select
                        costcode
                    From
                        ss_costmast
                    Where
                        hod = v_empno
                )
                And assign Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
            Order By
                empno;

        Return c;
    End;

    Function fn_emp_list4plan_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
                And assign In (
                    Select
                        parent
                    From
                        ss_user_dept_rights                                   a, swp_include_assign_4_seat_plan b
                    Where
                        empno        = v_empno
                        And a.parent = b.assign
                    Union
                    Select
                        costcode
                    From
                        ss_costmast                                   a, swp_include_assign_4_seat_plan b
                    Where
                        hod            = v_empno
                        And a.costcode = b.assign
                )
                And assign Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
            Order By
                empno;

        Return c;
    End;

    Function fn_costcode_list_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                costcode                  data_value_field,
                costcode || ' - ' || name data_text_field
            From
                ss_costmast
            Where
                costcode In (
                    Select
                        parent
                    From
                        ss_user_dept_rights a
                    Where
                        empno = v_empno
                    Union
                    Select
                        costcode
                    From
                        ss_costmast a
                    Where
                        hod = v_empno
                )
                And costcode Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                --And noofemps > 0
            Order By
                costcode;

        Return c;
    End;

    Function fn_dept_list4plan_4_hod_sec(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                costcode                  data_value_field,
                costcode || ' - ' || name data_text_field
            From
                ss_costmast
            Where
                costcode In (
                    Select
                        parent
                    From
                        ss_user_dept_rights            a,
                        swp_include_assign_4_seat_plan b
                    Where
                        empno        = v_empno
                        And a.parent = b.assign
                    Union
                    Select
                        costcode
                    From
                        ss_costmast                    a,
                        swp_include_assign_4_seat_plan b
                    Where
                        hod            = v_empno
                        And a.costcode = b.assign
                )
                And costcode Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                --And noofemps > 0
            Order By
                costcode;

        Return c;
    End;

    Function fn_employee_type_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                a.emptype                     data_value_field,
                a.emptype || ' - ' || empdesc data_text_field
            From
                ss_vu_emptypes      a,
                swp_include_emptype b
            Where
                a.emptype = b.emptype
            Order By
                empdesc;
        Return c;
    End;

    Function fn_grade_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                grade_id   data_value_field,
                grade_desc data_text_field
            From
                ss_vu_grades
            Where
                grade_id <> '-'
            Order By
                grade_desc;
        -- select grade_id data_value_field, grade_desc data_text_field 
        -- from timecurr.hr_grade_master order by grade_desc;
        Return c;
    End;

    Function fn_project_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
            Distinct
                proj_no                  data_value_field,
                proj_no || ' - ' || name data_text_field
            From
                ss_projmast
            Where
                active = 1
            Order By
                proj_no;

        Return c;
    End;

    Function fn_costcode_list_4_admin(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                costcode                  data_value_field,
                costcode || ' - ' || name data_text_field
            From
                ss_costmast
            Where
                costcode Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                --And noofemps > 0
            Order By
                costcode;
        Return c;
    End;

    Function fn_emp_list4desk_plan(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
                And emptype In(
                    Select
                        emptype
                    From
                        swp_include_emptype
                )
                And assign Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                And assign In (
                    Select
                        assign
                    From
                        swp_include_assign_4_seat_plan
                );
        Return c;
    End;

    Function fn_emp_list4wp_details(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
                And assign In (
                    Select
                        assign
                    From
                        swp_include_assign_4_seat_plan
                )
            Order By
                empno;
        Return c;
    End;

    Function fn_swp_type_list(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,
        p_exclude_sws_type Varchar2 Default Null
    ) Return Sys_Refcursor As
        c                  Sys_Refcursor;
        v_exclude_swp_type Number;
    Begin
        If p_exclude_sws_type = 'OK' Then
            v_exclude_swp_type := 2;
        Else
            v_exclude_swp_type := -1;
        End If;
        Open c For
            Select
                to_char(type_code) data_value_field,
                type_desc data_text_field
            From
                swp_primary_workspace_types
            Where
                type_code <> v_exclude_swp_type;
        Return c;
    End;

      Function fn_emp_list_4_admin(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
            order by empno    ;
        Return c;
    End;

End iot_swp_select_list_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_QRY" As

    Function get_monday_date(p_date Date) Return Date As
        v_day_num Number;
    Begin
        v_day_num := to_number(to_char(p_date, 'd'));
        If v_day_num <= 2 Then
            Return p_date + (2 - v_day_num);
        Else
            Return p_date - v_day_num + 2;
        End If;

    End;

    Function get_friday_date(p_date Date) Return Date As
        v_day_num Number;
    Begin
        v_day_num := to_char(p_date, 'd');

        Return p_date + (6 - v_day_num);

    End;

    Function fn_emp_primary_workspace_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_assign_code Varchar2 Default Null,
        p_empno       Varchar2 Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Open c For
            With
                assign_codes As (
                    Select
                        assign
                    From
                        (
                            Select
                                costcode As assign
                            From
                                ss_costmast
                            Where
                                hod = v_empno
                            Union
                            Select
                                parent As assign
                            From
                                ss_user_dept_rights
                            Where
                                empno = v_empno
                        )
                    Where
                        assign = nvl(p_assign_code, assign)
                ),
                primary_work_space As(
                    Select
                        empno, a.primary_workspace, active_code
                    From
                        swp_primary_workspace a
                    Where
                        active_code = (
                            Select
                                Max(active_code)
                            From
                                swp_primary_workspace b
                            Where
                                b.empno = a.empno
                        )
                )
            Select
                *
            From
                (
                    Select
                        a.empno                                                           As empno,
                        a.name                                                            As employee_name,
                        a.assign,
                        a.parent,
                        a.office,
                        a.emptype,
                        iot_swp_common.get_emp_work_area(p_person_id, p_meta_id, a.empno) work_area,
                        --iot_swp_common.get_emp_dms_type_code(a.empno)                     emp_dms_type_code,
                        --iot_swp_common.get_emp_dms_type_desc(a.empno)                     emp_dms_type_desc,
                        a.grade                                                           As emp_grade,
                        nvl(b.primary_workspace, 0)                                       As primary_workspace,
                        Row_Number() Over(Order By a.empno)                               As row_number,
                        Count(*) Over()                                                   As total_row
                    From
                        ss_emplmast        a,
                        primary_work_space b,
                        assign_codes       ac
                    Where
                        a.empno      = b.empno(+)
                        And a.assign = ac.assign
                        And a.status = 1
                        And a.empno  = nvl(p_empno, a.empno)
                        And a.assign Not In (
                            Select
                                assign
                            From
                                swp_exclude_assign
                        )
                        And a.emptype In (
                            Select
                                emptype
                            From
                                swp_include_emptype
                        )

                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;

    End fn_emp_primary_workspace_list;

    /*
    Pass Date(dd-Mon-yyyy) and Get Week days 

     select
      next_day(to_date(:x,'DD-MON-YYYY'),'MON') +
        case when to_number(to_char(to_date(:x,'DD-MON-YYYY'),'D')) in (1,7) then -1 else -8 end +
        rownum dte
    from  dual
    connect by level <= 5;

    */

    Function fn_office_planning(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(4000);
        v_start_date         Date := get_monday_date(p_date) - 1;
        v_end_date           Date := get_friday_date(p_date);
        Cursor cur_days Is
            Select
                to_char(d_date, 'yyyymmdd') yymmdd, to_char(d_date, 'DY') dday
            From
                ss_days_details
            Where
                d_date Between v_start_date And v_end_date;
    Begin
        --v_start_date := get_monday_date(p_date);
        --v_end_date   := get_friday_date(p_date);

        v_query := c_qry_office_planning;

        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;
        /*
                Insert Into swp_mail_log (subject, mail_sent_to_cc_bcc, modified_on)
                Values (v_empno || '-' || p_row_number || '-' || p_page_length || '-' || to_char(v_start_date, 'yyyymmdd') || '-' ||
                    to_char(v_end_date, 'yyyymmdd'),
                    v_query, sysdate);
                Commit;
                */
        Open c For v_query Using v_empno, p_row_number, p_page_length, v_start_date, v_end_date, p_person_id, p_meta_id;

        Return c;

    End;

    Function fn_week_attend_planning(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date     Default sysdate,
        p_assign_code Varchar2 Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(4200);
        v_start_date         Date := get_monday_date(p_date) - 1;
        v_end_date           Date := get_friday_date(p_date);
        Cursor cur_days Is
            Select
                to_char(d_date, 'yyyymmdd') yymmdd, to_char(d_date, 'DY') dday
            From
                ss_days_details
            Where
                d_date Between v_start_date And v_end_date;
    Begin
        --v_start_date := get_monday_date(p_date);
        --v_end_date   := get_friday_date(p_date);

        v_query := c_qry_attendance_planning;
        For c1 In cur_days
        Loop
            If c1.dday = 'MON' Then
                v_query := replace(v_query, '!MON!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'TUE' Then
                v_query := replace(v_query, '!TUE!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'WED' Then
                v_query := replace(v_query, '!WED!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'THU' Then
                v_query := replace(v_query, '!THU!', chr(39) || c1.yymmdd || chr(39));
            Elsif c1.dday = 'FRI' Then
                v_query := replace(v_query, '!FRI!', chr(39) || c1.yymmdd || chr(39));
            End If;
        End Loop;
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;
        /*
                Insert Into swp_mail_log (subject, mail_sent_to_cc_bcc, modified_on)
                Values (v_empno || '-' || p_row_number || '-' || p_page_length || '-' || to_char(v_start_date, 'yyyymmdd') || '-' ||
                    to_char(v_end_date, 'yyyymmdd'),
                    v_query, sysdate);
                Commit;
                */
        Open c For v_query Using v_empno, p_row_number, p_page_length, v_start_date, v_end_date, p_person_id, p_meta_id, p_assign_code;

        Return c;

    End;

    Function fn_emp_week_attend_planning(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2,
        p_date      Date
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(4000);
        v_start_date         Date := get_monday_date(trunc(p_date));
        v_end_date           Date := get_friday_date(trunc(p_date));
    Begin

        Open c For

            With
                atnd_days As (
                    Select
                        w.empno,
                        Trim(w.attendance_date) As attendance_date,
                        Trim(w.deskid)          As deskid,
                        1                       As planned
                    From
                        swp_smart_attendance_plan w
                    Where
                        w.empno = p_empno
                        And attendance_date Between v_start_date And v_end_date
                )

            Select
                e.empno                   As empno,
                dd.d_day,
                dd.d_date,
                nvl(atnd_days.planned, 0) As planned,
                atnd_days.deskid          As deskid
            From
                ss_emplmast     e,
                ss_days_details dd,
                atnd_days
            Where
                e.empno       = Trim(p_empno)
                And dd.d_date = atnd_days.attendance_date(+)
                And d_date Between v_start_date And v_end_date
            Order By
                dd.d_date;

        Return c;

    End;

    Function fn_work_area_for_smartwork(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_date        Date,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    /*Select
                    Distinct
                        area.area_key_id                              As work_area,
                        area.area_desc                                As area_desc,
                        area.AREA_CATG_CODE                           As AREA_CATG_CODE,
                        iot_swp_qry.get_area_total_desk(area.area_key_id)      As total_count, 
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)   As occupied_count,                         
                        ( 
                           iot_swp_qry.get_area_total_desk(area.area_key_id) 
                                -
                           iot_swp_qry.get_area_occupied_desk(area.area_key_id)                        
                        )                                             As available_count,
                        Row_Number() Over (Order By area_key_id Desc) row_number,
                        Count(*) Over ()                              total_row
                    From
                        dms.dm_desk_areas area*/

                    Select
                    Distinct
                        area.area_key_id                                     As work_area,
                        area.area_desc                                       As area_desc,
                        area.AREA_CATG_CODE                                  As AREA_CATG_CODE,
                        iot_swp_qry.get_area_total_desk(area.area_key_id)    As total_count,
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id) As occupied_count,
                        (
                        iot_swp_qry.get_area_total_desk(area.area_key_id)
                        -
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)
                        )                                                    As available_count,
                        Row_Number() Over (Order By area_key_id Desc)        As row_number,
                        Count(*) Over ()                                     As total_row
                    From
                        dms.dm_desk_areas area
                    Where
                        area.AREA_CATG_CODE = 'OK'
                        And ((
                        iot_swp_qry.get_area_total_desk(area.area_key_id)
                        -
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)
                        ) > 0)
                    Union All
                    Select
                    Distinct
                        area.area_key_id                                     As work_area,
                        area.area_desc                                       As area_desc,
                        area.AREA_CATG_CODE                                  As AREA_CATG_CODE,
                        iot_swp_qry.get_area_total_desk(area.area_key_id)    As total_count,
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id) As occupied_count,
                        (
                        iot_swp_qry.get_area_total_desk(area.area_key_id)
                        -
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)
                        )                                                    As available_count,
                        Row_Number() Over (Order By area_key_id Desc)        As row_number,
                        Count(*) Over ()                                     As total_row
                    From
                        dms.dm_desk_areas area
                    Where
                        area.AREA_CATG_CODE = 'KO'
                        And ((
                        iot_swp_qry.get_area_total_desk(area.area_key_id)
                        -
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)
                        ) > 0)
                        And Not Exists (
                            Select
                                *
                            From
                                dms.dm_desk_areas da
                            Where
                                da.AREA_CATG_CODE = 'OK'
                                And ((
                                iot_swp_qry.get_area_total_desk(da.area_key_id)
                                -
                                iot_swp_qry.get_area_occupied_desk(da.area_key_id)
                                ) > 0)
                        )
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                work_area;
        Return c;

    End fn_work_area_for_smartwork;

    Function fn_work_area_for_officework(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_date        Date,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                    Distinct
                        area.area_key_id                                     As work_area,
                        area.area_desc                                       As area_desc,
                        area.AREA_CATG_CODE                                  As AREA_CATG_CODE,
                        iot_swp_qry.get_area_total_desk(area.area_key_id)    As total_count,
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id) As occupied_count,
                        (
                        iot_swp_qry.get_area_total_desk(area.area_key_id)
                        -
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)
                        )                                                    As available_count,
                        Row_Number() Over (Order By area_key_id Desc)        As row_number,
                        Count(*) Over ()                                     As total_row
                    From
                        dms.dm_desk_areas area
                    Where
                        area.AREA_CATG_CODE = 'KO'
                        And ((
                        iot_swp_qry.get_area_total_desk(area.area_key_id)
                        -
                        iot_swp_qry.get_area_occupied_desk(area.area_key_id)
                        ) > 0)

                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                work_area;
        Return c;

    End fn_work_area_for_officework;

    Function fn_work_area_desk(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_date        Date,
        p_work_area   Varchar2,
        p_wing        Varchar2 Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        mast.deskid                              As deskid,
                        mast.office                              As office,
                        mast.floor                               As floor,
                        mast.seatno                              As seat_no,
                        mast.wing                                As wing,
                        mast.assetcode                           As asset_code,
                        mast.bay                                 As bay,
                        Row_Number() Over (Order By deskid Desc) row_number,
                        Count(*) Over ()                         total_row
                    From
                        dms.dm_deskmaster mast
                    Where
                        mast.work_area                   = Trim(p_work_area)
                        And (p_wing Is Null Or mast.wing = p_wing)
                        --And mast.deskid Not In (Select Distinct b.deskid From swp_smart_attendance_plan b)
                        And mast.deskid
                        Not In(
                            Select
                            Distinct swptbl.deskid
                            From
                                swp_smart_attendance_plan swptbl
                                where (trunc(ATTENDANCE_DATE) = TRUNC(p_date) or p_date is null)
                            Union
                            Select
                            Distinct c.deskid
                            From
                                dm_vu_emp_desk_map c
                        )
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                deskid,
                seat_no;
        Return c;
    End fn_work_area_desk;

    Function get_area_total_desk(
        p_area_key_id Varchar2
    ) Return Number As
        v_count Number := 0;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            dms.dm_deskmaster mast
        Where
            Trim(mast.work_area) = Trim(p_area_key_id);

        Return v_count;
    End;

    Function get_area_occupied_desk(
        p_area_key_id Varchar2
    ) Return Number As
        v_count Number := 0;
    Begin

        Select
            Count(*)
        Into
            v_count
        From
            dms.dm_deskmaster mast
        Where
            Trim(mast.work_area) = Trim(p_area_key_id)
            And mast.deskid
            In (
                Select
                    swptbl.deskid
                From
                    swp_smart_attendance_plan swptbl
                Where
                    swptbl.attendance_date > sysdate
            );
        Return v_count;
    End;

    Function fn_area_list_for_smartwork(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return typ_area_list
        Pipelined
    Is
        tab_area_list_ok     typ_area_list;
        tab_area_list_ko     typ_area_list;
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        Open cur_area_list_for_ok(p_date,Null, Null, Null, p_row_number, p_page_length);
        Loop
            Fetch cur_area_list_for_ok Bulk Collect Into tab_area_list_ok Limit 50;
            For i In 1..tab_area_list_ok.count
            Loop
                /*
                  If (tab_area_list_ok(i).AVAILABLE_COUNT <= 0) Then

                               Open cur_area_list_for_ko(tab_area_list_ok(i).OFFICE, tab_area_list_ok(i).FLOOR, tab_area_list_ok(i).WING,
                               p_row_number,
                                                         p_page_length);
                               Loop
                                  Fetch cur_area_list_for_ko Bulk Collect Into tab_area_list_ko Limit 50;
                                  For i In 1..tab_area_list_ko.count
                                  Loop
                                     Pipe Row(tab_area_list_ko(i));
                                  End Loop;
                                  Exit When cur_area_list_for_ko%notfound;
                               End Loop;
                               Close cur_area_list_for_ko;

                             else

                              Pipe Row(tab_area_list_ok(i));

                            End If;
                */

                Pipe Row(tab_area_list_ok(i));

            End Loop;
            Exit When cur_area_list_for_ok%notfound;
        End Loop;
        Close cur_area_list_for_ok;
        Return;

    End fn_area_list_for_smartwork;

    Function fn_reserved_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return typ_area_list
        Pipelined
    Is
        tab_area_list_ok     typ_area_list;
        tab_area_list_ko     typ_area_list;
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        Open cur_area_list_for_ok(p_date,Null, Null, Null, p_row_number, p_page_length);
        Loop
            Fetch cur_area_list_for_ok Bulk Collect Into tab_area_list_ok Limit 50;
            For i In 1..tab_area_list_ok.count
            Loop
                Pipe Row(tab_area_list_ok(i));

            End Loop;
            Exit When cur_area_list_for_ok%notfound;
        End Loop;
        Close cur_area_list_for_ok;
        Return;

    End fn_reserved_area_list;

    Function fn_general_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return typ_area_list
        Pipelined
    Is
        tab_area_list_ko     typ_area_list;
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        Open cur_area_list_for_ko(Null, Null, Null, p_row_number, p_page_length);
        Loop
            Fetch cur_area_list_for_ko Bulk Collect Into tab_area_list_ko Limit 50;
            For i In 1..tab_area_list_ko.count
            Loop
                Pipe Row(tab_area_list_ko(i));

            End Loop;
            Exit When cur_area_list_for_ko%notfound;
        End Loop;
        Close cur_area_list_for_ko;
        Return;

    End fn_general_area_list;

End iot_swp_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_PRIMARY_WORKSPACE_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_PRIMARY_WORKSPACE_QRY" As

    Function fn_emp_primary_ws_list(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,

        p_assign_code           Varchar2 Default Null,
        p_start_date            Date     Default Null,

        p_empno                 Varchar2 Default Null,

        p_emptype_csv           Varchar2 Default Null,
        p_grade_csv             Varchar2 Default Null,
        p_primary_workspace_csv Varchar2 Default Null,
        p_laptop_user           Varchar2 Default Null,
        p_eligible_for_swp      Varchar2 Default Null,
        p_generic_search        Varchar2 Default Null,

        p_is_admin_call         Boolean  Default false,

        p_row_number            Number,
        p_page_length           Number
    ) Return Sys_Refcursor As
        c                     Sys_Refcursor;

        v_hod_sec_empno       Varchar2(5);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_friday_date         Date;
        v_hod_sec_assign_code Varchar2(4);
        v_query               Varchar2(6500);
    Begin
        v_friday_date   := iot_swp_common.get_friday_date(nvl(p_start_date, sysdate));

        v_hod_sec_empno := get_empno_from_meta_id(p_meta_id);

        If v_hod_sec_empno = 'ERRRR' And p_is_admin_call = false Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        --If EMPNO is not null then set assign code filter as null else validate assign code
        If p_is_admin_call Then
            v_hod_sec_assign_code := p_assign_code;
        Else
            If p_empno Is Null Or p_assign_code Is Not Null Then
                v_hod_sec_assign_code := iot_swp_common.get_default_costcode_hod_sec(
                                             p_hod_sec_empno => v_hod_sec_empno,
                                             p_assign_code   => p_assign_code
                                         );
                If v_hod_sec_assign_code Is Null Then
                    Return Null;
                End If;
            End If;
        End If;

        v_query         := query_pws;

        If v_hod_sec_assign_code Is Not Null Then
            v_query := replace(v_query, '!ASSIGN_WHERE_CLAUSE!', sub_qry_assign_where_clause);
        Else
            v_query := replace(v_query, '!ASSIGN_WHERE_CLAUSE!', '');
        End If;

        If p_grade_csv Is Not Null Then
            v_query := replace(v_query, '!GRADES_SUBQUERY!', sub_qry_grades_csv);
        Else
            v_query := replace(v_query, '!GRADES_SUBQUERY!', '');
        End If;

        If p_primary_workspace_csv Is Not Null Then
            v_query := replace(v_query, '!PWS_TYPE_SUBQUERY!', sub_qry_pws_csv);
        Else
            v_query := replace(v_query, '!PWS_TYPE_SUBQUERY!', '');
        End If;

        If p_emptype_csv Is Not Null Then
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_csv);
        Else
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_default);
        End If;

        If p_laptop_user Is Not Null Then
            v_query := replace(v_query, '!LAPTOP_USER_WHERE_CLAUSE!', where_clause_laptop_user);
        Else
            v_query := replace(v_query, '!LAPTOP_USER_WHERE_CLAUSE!', '');
        End If;

        If p_eligible_for_swp Is Not Null Then
            v_query := replace(v_query, '!SWP_ELIGIBLE_WHERE_CLAUSE!', where_clause_swp_eligible);
        Else
            v_query := replace(v_query, '!SWP_ELIGIBLE_WHERE_CLAUSE!', '');
        End If;

        If Trim(p_generic_search) Is Not Null Then
            v_query := replace(v_query, '!GENERIC_SEARCH!', where_clause_generic_search);
        Else
            v_query := replace(v_query, '!GENERIC_SEARCH!', '');
        End If;

        /*
            :p_friday_date     As p_friday_date,
            :p_row_number      As p_row_number,
            :p_page_length     As p_page_length,
            :p_for_empno       As p_for_empno,
            :p_hod_assign_code As p_hod_assign_code,
            :p_pws_csv         As p_pws_csv,
            :p_grades_csv      As p_grades_csv,
            :p_emptype_csv     As p_emptype_csv,
            :p_swp_eligibility As p_swp_eligibility,
            :p_laptop_user     As p_laptop_user
        */
        Open c For v_query Using
            v_friday_date,
            p_row_number,
            p_page_length,
            p_empno,
            v_hod_sec_assign_code,
            p_primary_workspace_csv,
            p_grade_csv,
            p_emptype_csv,
            p_eligible_for_swp,
            p_laptop_user,
            '%' || upper(trim(p_generic_search)) || '%';

        Return c;

    End;

    Function fn_emp_primary_ws_plan_list(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,

        p_assign_code           Varchar2 Default Null,

        p_empno                 Varchar2 Default Null,

        p_emptype_csv           Varchar2 Default Null,
        p_grade_csv             Varchar2 Default Null,
        p_primary_workspace_csv Varchar2 Default Null,
        p_laptop_user           Varchar2 Default Null,
        p_eligible_for_swp      Varchar2 Default Null,
        p_generic_search        Varchar2 Default Null,

        p_row_number            Number,
        p_page_length           Number
    ) Return Sys_Refcursor As
        v_plan_friday_date Date;
        rec_config_week    swp_config_weeks%rowtype;
    Begin
        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            planning_flag = 2;
        v_plan_friday_date := rec_config_week.end_date;
        Return fn_emp_primary_ws_list(
            p_person_id             => p_person_id,
            p_meta_id               => p_meta_id,

            p_assign_code           => p_assign_code,
            p_start_date            => v_plan_friday_date,

            p_empno                 => p_empno,

            p_emptype_csv           => p_emptype_csv,
            p_grade_csv             => p_grade_csv,
            p_primary_workspace_csv => p_primary_workspace_csv,
            p_laptop_user           => p_laptop_user,
            p_eligible_for_swp      => p_eligible_for_swp,
            p_generic_search        => p_generic_search,

            p_is_admin_call         => false,

            p_row_number            => p_row_number,
            p_page_length           => p_page_length
        );

    End fn_emp_primary_ws_plan_list;

    Function fn_emp_pws_excel(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_assign_codes_csv Varchar2 Default Null,
        p_start_date       Date Default Null
    ) Return Sys_Refcursor As
        c                          Sys_Refcursor;
        v_hod_sec_empno            Varchar2(5);
        e_employee_not_found       Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_friday_date              Date;
        v_hod_sec_assign_codes_csv Varchar2(4000);
    Begin
        v_friday_date              := iot_swp_common.get_friday_date(nvl(p_start_date, sysdate));

        v_hod_sec_empno            := get_empno_from_meta_id(p_meta_id);

        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        v_hod_sec_assign_codes_csv := iot_swp_common.get_hod_sec_costcodes_csv(
                                          p_hod_sec_empno    => v_hod_sec_empno,
                                          p_assign_codes_csv => p_assign_codes_csv
                                      );

        Open c For
            With
                assign_codes As (
                    Select
                        regexp_substr(v_hod_sec_assign_codes_csv, '[^,]+', 1, level) assign
                    From
                        dual
                    Connect By
                        level <=
                        length(v_hod_sec_assign_codes_csv) - length(replace(v_hod_sec_assign_codes_csv, ',')) + 1
                ),
                primary_work_space As(
                    Select
                        a.empno, a.primary_workspace, a.start_date, c.type_desc primary_workspace_desc
                    From
                        swp_primary_workspace       a,
                        swp_primary_workspace_types c
                    Where
                        a.primary_workspace     = c.type_code
                        And trunc(a.start_date) = (
                            Select
                                Max(trunc(start_date))
                            From
                                swp_primary_workspace b
                            Where
                                b.empno = a.empno
                                And b.start_date <= v_friday_date
                        )
                )
            Select
                *
            From
                (
                    Select
                        a.empno                                                           As empno,
                        a.name                                                            As employee_name,
                        a.assign,
                        a.parent,
                        iot_swp_common.fn_get_dept_group(a.assign)             As assign_dept_group,
                        a.office,
                        a.emptype,
                        iot_swp_common.get_emp_work_area(p_person_id, p_meta_id, a.empno) work_area,
                        --iot_swp_common.is_emp_laptop_user(a.empno)                        As is_laptop_user,
                        Case iot_swp_common.is_emp_laptop_user(a.empno)
                            When 1 Then
                                'Yes'
                            Else
                                'No'
                        End                                                               As is_laptop_user_text,
                        Case iot_swp_common.is_emp_dualmonitor_user(a.empno)
                            When 1 Then
                                'Yes'
                            Else
                                'No'
                        End                                                               As is_dual_monitor_user_text,

                        a.grade                                                           As emp_grade,
                        nvl(b.primary_workspace_desc, '')                                 As primary_workspace,
                        Case iot_swp_common.is_emp_eligible_for_swp(a.empno)
                            When 'OK' Then
                                'Yes'
                            Else
                                'No'
                        End                                                               As is_swp_eligible_desc

                    --iot_swp_common.is_emp_eligible_for_swp(a.empno)                   As is_eligible
                    From
                        ss_emplmast        a,
                        primary_work_space b,
                        assign_codes       c
                    Where
                        a.empno      = b.empno(+)
                        And a.assign = c.assign
                        And a.status = 1
                        And a.assign Not In (
                            Select
                                assign
                            From
                                swp_exclude_assign
                        )
                        And a.emptype In (
                            Select
                                emptype
                            From
                                swp_include_emptype
                        )

                );

        Return c;

    End fn_emp_pws_excel;

    Function fn_emp_pws_plan_excel(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_assign_codes_csv Varchar2 Default Null

    ) Return Sys_Refcursor As
        v_plan_friday_date Date;
        rec_config_week    swp_config_weeks%rowtype;
    Begin
        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            planning_flag = 2;
        v_plan_friday_date := rec_config_week.end_date;

        Return fn_emp_pws_excel(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_assign_codes_csv => p_assign_codes_csv,
            p_start_date       => v_plan_friday_date
        );

    End fn_emp_pws_plan_excel;

    Function fn_emp_pws_admin_list(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,

        p_assign_code           Varchar2 Default Null,
        p_start_date            Date     Default Null,

        p_empno                 Varchar2 Default Null,

        p_emptype_csv           Varchar2 Default Null,
        p_grade_csv             Varchar2 Default Null,
        p_primary_workspace_csv Varchar2 Default Null,
        p_laptop_user           Varchar2 Default Null,
        p_eligible_for_swp      Varchar2 Default Null,
        p_generic_search        Varchar2 Default Null,

        p_row_number            Number,
        p_page_length           Number
    ) Return Sys_Refcursor As
        rec_config_week swp_config_weeks%rowtype;
        v_friday_date   Date;
        v_count         Number;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            swp_config_weeks
        Where
            planning_flag = 2;
        If v_count > 0 Then
            Select
                *
            Into
                rec_config_week
            From
                swp_config_weeks
            Where
                planning_flag = 2;
            v_friday_date := rec_config_week.end_date;
        Else
            v_friday_date := iot_swp_common.get_friday_date(nvl(p_start_date, sysdate));

        End If;

        Return fn_emp_primary_ws_list(
            p_person_id             => p_person_id,
            p_meta_id               => p_meta_id,

            p_assign_code           => p_assign_code,
            p_start_date            => v_friday_date,

            p_empno                 => p_empno,

            p_emptype_csv           => p_emptype_csv,
            p_grade_csv             => p_grade_csv,
            p_primary_workspace_csv => p_primary_workspace_csv,
            p_laptop_user           => p_laptop_user,
            p_eligible_for_swp      => p_eligible_for_swp,
            p_generic_search        => p_generic_search,

            p_is_admin_call         => true,

            p_row_number            => p_row_number,
            p_page_length           => p_page_length
        );

    End;


End iot_swp_primary_workspace_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_PRIMARY_WORKSPACE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_PRIMARY_WORKSPACE" As

    Procedure del_emp_future_planning(
        p_empno               Varchar2,
        p_planning_start_date Date
    ) As
        v_ows_desk_id Varchar2(10);
    Begin

        Delete
            From swp_smart_attendance_plan
        Where
            empno = Trim(p_empno)
            And attendance_date >= p_planning_start_date;

        Delete
            From swp_primary_workspace
        Where
            empno = Trim(p_empno)
            And start_date >= p_planning_start_date;

    End;

    Procedure sp_assign_work_space(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_is_admin_call       Number Default 0,
        p_emp_workspace_array typ_tab_string,
        p_message_type Out    Varchar2,
        p_message_text Out    Varchar2
    ) As
        v_workspace_code      Number;
        v_mod_by_empno        Varchar2(5);
        v_count               Number;
        v_key                 Varchar2(10);
        v_empno               Varchar2(5);
        rec_config_week       swp_config_weeks%rowtype;
        c_planning_future     Constant Number(1) := 2;
        c_planning_current    Constant Number(1) := 1;
        c_planning_is_open    Constant Number(1) := 1;
        Type typ_tab_primary_workspace Is Table Of swp_primary_workspace%rowtype Index By Binary_Integer;
        tab_primary_workspace typ_tab_primary_workspace;
        v_ows_desk_id         Varchar2(10);
    Begin
        v_mod_by_empno := get_empno_from_meta_id(p_meta_id);
        If v_mod_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        If nvl(p_is_admin_call, 0) != 1 Then
            Begin

                Select
                    *
                Into
                    rec_config_week
                From
                    swp_config_weeks
                Where
                    planning_flag = c_planning_future
                    And pws_open  = c_planning_is_open;
            Exception
                When Others Then
                    p_message_type := 'KO';
                    p_message_text := 'Err - SWP Planning is not open. Cannot proceed.';
                    Return;
            End;
        Elsif nvl(p_is_admin_call, 0) = 1 Then

            Begin

                Select
                    *
                Into
                    rec_config_week
                From
                    swp_config_weeks
                Where
                    planning_flag = c_planning_future;
            Exception
                When Others Then
                    p_message_type := 'KO';
                    p_message_text := 'Err - SWP Planning is not open. Cannot proceed.';
                    Return;
            End;

        End If;

        For i In 1..p_emp_workspace_array.count
        Loop

            With
                csv As (
                    Select
                        p_emp_workspace_array(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1)) empno,
                Trim(regexp_substr(str, '[^~!~]+', 1, 2)) workspace_code
            Into
                v_empno, v_workspace_code
            From
                csv;

            Select
                * Bulk Collect
            Into
                tab_primary_workspace
            From
                (
                    Select
                        *
                    From
                        swp_primary_workspace
                    Where
                        empno = Trim(v_empno)
                    Order By start_date Desc
                )
            Where
                Rownum <= 2;

            If tab_primary_workspace.count > 0 Then
                --If same FUTURE record exists in database then continue
                --If no change then continue
                If tab_primary_workspace(1).primary_workspace = v_workspace_code Then
                    Continue;
                End If;

                --Delete existing SWP DESK ASSIGNMENT planning
                del_emp_future_planning(
                    p_empno               => v_empno,
                    p_planning_start_date => trunc(rec_config_week.start_date)
                );
                --
                v_ows_desk_id := iot_swp_common.get_swp_planned_desk(v_empno);
                --Remove user desk association in DMS
                If Trim(v_ows_desk_id) Is Not Null Then
                    iot_swp_dms.sp_remove_desk_user(
                        p_person_id => p_person_id,
                        p_meta_id   => p_meta_id,

                        p_empno     => v_empno,
                        p_deskid    => v_ows_desk_id
                    );
                End If;

                --If furture planning is reverted to old planning then continue
                If tab_primary_workspace(1).active_code = c_planning_future Then
                    If tab_primary_workspace.Exists(2) Then
                        If tab_primary_workspace(2).primary_workspace = v_workspace_code Then
                            Continue;
                        End If;
                    End If;
                End If;
            End If;
            v_key := dbms_random.string('X', 10);
            Insert Into swp_primary_workspace (
                key_id,
                empno,
                primary_workspace,
                start_date,
                modified_on,
                modified_by,
                active_code
            )
            Values (
                v_key,
                v_empno,
                v_workspace_code,
                rec_config_week.start_date,
                sysdate,
                v_mod_by_empno,
                c_planning_future
            );
            Commit;
        End Loop;

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End;

    /*
        Procedure sp_assign_work_space(
            p_person_id           Varchar2,
            p_meta_id             Varchar2,

            p_emp_workspace_array typ_tab_string,
            p_message_type Out    Varchar2,
            p_message_text Out    Varchar2
        ) As
            v_workspace_code      Number;
            v_mod_by_empno        Varchar2(5);
            v_count               Number;
            v_key                 Varchar2(10);
            v_empno               Varchar2(5);
            rec_config_week       swp_config_weeks%rowtype;
            c_planning_future     Constant Number(1) := 2;
            c_planning_current    Constant Number(1) := 1;
            c_planning_is_open    Constant Number(1) := 1;
            Type typ_tab_primary_workspace Is Table Of swp_primary_workspace%rowtype Index By Binary_Integer;
            tab_primary_workspace typ_tab_primary_workspace;
            v_ows_desk_id         Varchar2(10);
        Begin
            v_mod_by_empno := get_empno_from_meta_id(p_meta_id);
            If v_mod_by_empno = 'ERRRR' Then
                p_message_type := 'KO';
                p_message_text := 'Invalid employee number';
                Return;
            End If;
            Begin

                Select
                    *
                Into
                    rec_config_week
                From
                    swp_config_weeks
                Where
                    planning_flag = c_planning_future
                    And pws_open  = c_planning_is_open;
            Exception
                When Others Then
                    p_message_type := 'KO';
                    p_message_text := 'Err - SWP Planning is not open. Cannot proceed.';
                    Return;
            End;

            For i In 1..p_emp_workspace_array.count
            Loop

                With
                    csv As (
                        Select
                            p_emp_workspace_array(i) str
                        From
                            dual
                    )
                Select
                    Trim(regexp_substr(str, '[^~!~]+', 1, 1)) empno,
                    Trim(regexp_substr(str, '[^~!~]+', 1, 2)) workspace_code
                Into
                    v_empno, v_workspace_code
                From
                    csv;

                Select
                    * Bulk Collect
                Into
                    tab_primary_workspace
                From
                    (
                        Select
                            *
                        From
                            swp_primary_workspace
                        Where
                            empno = Trim(v_empno)
                        Order By start_date Desc
                    )
                Where
                    Rownum <= 2;

                If tab_primary_workspace.count > 0 Then
                    --If same FUTURE record exists in database then continue
                    --If no change then continue
                    If tab_primary_workspace(1).primary_workspace = v_workspace_code Then
                        Continue;
                    End If;

                    --Delete existing SWP DESK ASSIGNMENT planning
                    del_emp_future_planning(
                        p_empno               => v_empno,
                        p_planning_start_date => trunc(rec_config_week.start_date)
                    );
                    --
                    v_ows_desk_id := iot_swp_common.get_swp_planned_desk(v_empno);
                    --Remove user desk association in DMS
                    If Trim(v_ows_desk_id) Is Not Null Then
                        iot_swp_dms.sp_remove_desk_user(
                            p_person_id => p_person_id,
                            p_meta_id   => p_meta_id,

                            p_empno     => v_empno,
                            p_deskid    => v_ows_desk_id
                        );
                    End If;

                    --If furture planning is reverted to old planning then continue
                    If tab_primary_workspace(1).active_code = c_planning_future Then
                        If tab_primary_workspace.Exists(2) Then
                            If tab_primary_workspace(2).primary_workspace = v_workspace_code Then
                                Continue;
                            End If;
                        End If;
                    End If;
                End If;
                v_key := dbms_random.string('X', 10);
                Insert Into swp_primary_workspace (
                    key_id,
                    empno,
                    primary_workspace,
                    start_date,
                    modified_on,
                    modified_by,
                    active_code
                )
                Values (
                    v_key,
                    v_empno,
                    v_workspace_code,
                    rec_config_week.start_date,
                    sysdate,
                    v_mod_by_empno,
                    c_planning_future
                );
                Commit;
            End Loop;

            p_message_type := 'OK';
            p_message_text := 'Procedure executed successfully.';
        Exception
            When Others Then
                Rollback;
                p_message_type := 'KO';
                p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
        End;
    */
    Procedure sp_add_office_ws_desk(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_deskid           Varchar2,
        p_empno            Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        strsql            Varchar2(600);
        v_count           Number;
        v_status          Varchar2(5);
        v_mod_by_empno    Varchar2(5);
        v_pk              Varchar2(10);
        v_fk              Varchar2(10);
        v_empno           Varchar2(5);
        v_attendance_date Date;
        v_desk            Varchar2(20);
    Begin

        v_mod_by_empno := get_empno_from_meta_id(p_meta_id);

        If v_mod_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        If Not iot_swp_common.fn_can_do_desk_plan_4_emp(p_empno) Then
            p_message_type := 'KO';
            p_message_text := 'Planning not allowed for employee assign code.';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            swp_primary_workspace
        Where
            Trim(empno)                 = Trim(p_empno)
            And Trim(primary_workspace) = '1';

        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number ' || p_empno;
            Return;
        End If;

        Insert Into dm_vu_emp_desk_map (
            empno,
            deskid
        --,modified_on,
        --modified_by
        )
        Values (
            p_empno,
            p_deskid
        --,sysdate,
        --v_mod_by_empno
        );
        Commit;

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End sp_add_office_ws_desk;

    Procedure sp_workspace_summary(
        p_person_id                      Varchar2,
        p_meta_id                        Varchar2,

        p_assign_code                    Varchar2 Default Null,
        p_start_date                     Date     Default Null,

        p_total_emp_count            Out Number,
        p_emp_count_office_workspace Out Number,
        p_emp_count_smart_workspace  Out Number,
        p_emp_count_not_in_ho        Out Number,

        p_emp_perc_office_workspace  Out Number,
        p_emp_perc_smart_workspace   Out Number,

        p_message_type               Out Varchar2,
        p_message_text               Out Varchar2
    ) As
        v_empno              Varchar2(5);
        v_total              Number;
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_friday_date        Date;
        Cursor cur_sum Is

            With
                assign_codes As (
                    Select
                        assign
                    From
                        (
                            Select
                                assign
                            From
                                (
                                    Select
                                        costcode As assign
                                    From
                                        ss_costmast
                                    Where
                                        hod = v_empno
                                    Union
                                    Select
                                        parent As assign
                                    From
                                        ss_user_dept_rights
                                    Where
                                        empno = v_empno
                                )
                            Where
                                assign = nvl(p_assign_code, assign)
                            Order By assign
                        )
                    Where
                        Rownum = 1
                ),
                primary_work_space As(
                    Select
                        a.empno, a.primary_workspace, a.start_date
                    From
                        swp_primary_workspace a
                    Where
                        trunc(a.start_date) = (
                            Select
                                Max(trunc(start_date))
                            From
                                swp_primary_workspace b
                            Where
                                b.empno = a.empno
                                And b.start_date <= v_friday_date
                        )
                )
            Select
                workspace, Count(empno) emp_count
            From
                (
                    Select
                        empno, nvl(primary_workspace, 3) workspace
                    From
                        (
                            Select
                                e.empno, emptype, status, aw.primary_workspace
                            From
                                ss_emplmast        e,
                                primary_work_space aw,
                                assign_codes       ac
                            Where
                                e.assign    = ac.assign
                                And e.empno = aw.empno(+)
                                And status  = 1
                                And emptype In (
                                    Select
                                        emptype
                                    From
                                        swp_include_emptype
                                )
                                And e.assign Not In (
                                    Select
                                        assign
                                    From
                                        swp_exclude_assign
                                )

                        )
                )
            Group By
                workspace;
    Begin
        v_friday_date               := iot_swp_common.get_friday_date(nvl(p_start_date, sysdate));
        v_empno                     := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;
        For c1 In cur_sum
        Loop
            If c1.workspace = 1 Then
                p_emp_count_office_workspace := c1.emp_count;
            Elsif c1.workspace = 2 Then
                p_emp_count_smart_workspace := c1.emp_count;
            Elsif c1.workspace = 3 Then
                p_emp_count_not_in_ho := c1.emp_count;
            End If;

        End Loop;
        p_total_emp_count           := nvl(p_emp_count_office_workspace, 0) + nvl(p_emp_count_smart_workspace, 0) + nvl(p_emp_count_not_in_ho, 0);
        v_total                     := (nvl(p_total_emp_count, 0) - nvl(p_emp_count_not_in_ho, 0));
        p_emp_perc_office_workspace := round(((nvl(p_emp_count_office_workspace, 0) / v_total) * 100), 1);
        p_emp_perc_smart_workspace  := round(((nvl(p_emp_count_smart_workspace, 0) / v_total) * 100), 1);

        p_message_type              := 'OK';
        p_message_text              := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure sp_workspace_plan_summary(
        p_person_id                      Varchar2,
        p_meta_id                        Varchar2,

        p_assign_code                    Varchar2 Default Null,

        p_total_emp_count            Out Number,
        p_emp_count_office_workspace Out Number,
        p_emp_count_smart_workspace  Out Number,
        p_emp_count_not_in_ho        Out Number,

        p_emp_perc_office_workspace  Out Number,
        p_emp_perc_smart_workspace   Out Number,

        p_message_type               Out Varchar2,
        p_message_text               Out Varchar2
    ) As
        v_plan_friday_date Date;
        rec_config_week    swp_config_weeks%rowtype;
    Begin
        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            planning_flag = 2;
        v_plan_friday_date := rec_config_week.end_date;
        sp_workspace_summary(
            p_person_id                  => p_person_id,
            p_meta_id                    => p_meta_id,

            p_assign_code                => p_assign_code,
            p_start_date                 => v_plan_friday_date,

            p_total_emp_count            => p_total_emp_count,
            p_emp_count_office_workspace => p_emp_count_office_workspace,
            p_emp_count_smart_workspace  => p_emp_count_smart_workspace,
            p_emp_count_not_in_ho        => p_emp_count_not_in_ho,

            p_emp_perc_office_workspace  => p_emp_perc_office_workspace,
            p_emp_perc_smart_workspace   => p_emp_perc_smart_workspace,

            p_message_type               => p_message_type,
            p_message_text               => p_message_text
        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure sp_hod_assign_work_space(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_emp_workspace_array typ_tab_string,
        p_message_type Out    Varchar2,
        p_message_text Out    Varchar2
    ) As
        v_workspace_code      Number;
        v_mod_by_empno        Varchar2(5);
        v_count               Number;
        v_key                 Varchar2(10);
        v_empno               Varchar2(5);
        rec_config_week       swp_config_weeks%rowtype;
        c_planning_future     Constant Number(1) := 2;
        c_planning_current    Constant Number(1) := 1;
        c_planning_is_open    Constant Number(1) := 1;
        Type typ_tab_primary_workspace Is Table Of swp_primary_workspace%rowtype Index By Binary_Integer;
        tab_primary_workspace typ_tab_primary_workspace;
        v_ows_desk_id         Varchar2(10);
    Begin

        sp_assign_work_space(
            p_person_id           => p_person_id,
            p_meta_id             => p_meta_id,

            p_emp_workspace_array => p_emp_workspace_array,
            p_message_type        => p_message_type,
            p_message_text        => p_message_text
        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure sp_hr_assign_work_space(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_emp_workspace_array typ_tab_string,
        p_message_type Out    Varchar2,
        p_message_text Out    Varchar2
    ) As
        v_workspace_code      Number;
        v_mod_by_empno        Varchar2(5);
        v_count               Number;
        v_key                 Varchar2(10);
        v_empno               Varchar2(5);
        rec_config_week       swp_config_weeks%rowtype;
        c_planning_future     Constant Number(1) := 2;
        c_planning_current    Constant Number(1) := 1;
        c_planning_is_open    Constant Number(1) := 1;
        Type typ_tab_primary_workspace Is Table Of swp_primary_workspace%rowtype Index By Binary_Integer;
        tab_primary_workspace typ_tab_primary_workspace;
        v_ows_desk_id         Varchar2(10);
    Begin

        sp_assign_work_space(
            p_person_id           => p_person_id,
            p_meta_id             => p_meta_id,
            p_is_admin_call       => 1,
            p_emp_workspace_array => p_emp_workspace_array,
            p_message_type        => p_message_type,
            p_message_text        => p_message_text
        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End;

End iot_swp_primary_workspace;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_OFFICE_WORKSPACE_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_OFFICE_WORKSPACE_QRY" As

    Function fn_office_planning(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,
        p_date                   Date,
        p_assign_code            Varchar2 Default Null,

        p_emptype_csv            Varchar2 Default Null,
        p_grade_csv              Varchar2 Default Null,
        p_generic_search         Varchar2 Default Null,
        p_desk_assignment_status Varchar2 Default Null,

        p_row_number             Number,
        p_page_length            Number

    ) Return Sys_Refcursor As
        c                     Sys_Refcursor;
        v_hod_sec_empno       Varchar2(5);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query               Varchar2(6000);
        v_hod_sec_assign_code Varchar2(4);
    Begin

        v_query               := c_qry_office_planning;

        v_hod_sec_empno       := get_empno_from_meta_id(p_meta_id);
        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;

        v_hod_sec_assign_code := iot_swp_common.get_default_dept4plan_hod_sec(
                                     p_hod_sec_empno => v_hod_sec_empno,
                                     p_assign_code   => p_assign_code
                                 );

        If p_grade_csv Is Not Null Then
            v_query := replace(v_query, '!GRADES_SUBQUERY!', sub_qry_grades_csv);
        Else
            v_query := replace(v_query, '!GRADES_SUBQUERY!', '');
        End If;

        If p_emptype_csv Is Not Null Then
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_csv);
        Else
            v_query := replace(v_query, '!EMPTYPE_SUBQUERY!', sub_qry_emptype_default);
        End If;

        If Trim(p_generic_search) Is Not Null Then
            v_query := replace(v_query, '!GENERIC_SEARCH!', where_clause_generic_search);
        Else
            v_query := replace(v_query, '!GENERIC_SEARCH!', '');
        End If;

        If p_desk_assignment_status = 'Pending' Then
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', ' where deskid is null ');
        Elsif p_desk_assignment_status = 'Assigned' Then
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', ' where deskid is not null ');
        Else
            v_query := replace(v_query, '!DESK_ASSIGNMENT_STATUS!', '');
        End If;

        /*
                Insert Into swp_mail_log (subject, mail_sent_to_cc_bcc, modified_on)
                Values (v_empno || '-' || p_row_number || '-' || p_page_length || '-' || to_char(v_start_date, 'yyyymmdd') || '-' ||
                    to_char(v_end_date, 'yyyymmdd'),
                    v_query, sysdate);
                Commit;
          */
        Open c For v_query Using
            p_person_id,
            p_meta_id,
            p_row_number,
            p_page_length,

            v_hod_sec_assign_code,
            p_emptype_csv,
            p_grade_csv,
            '%' || upper(trim(p_generic_search)) || '%',
            p_desk_assignment_status;
        Return c;

    End;

    Function fn_general_area_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2 Default Null,
        p_date        Date     Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                      Sys_Refcursor;
        v_count                Number;
        v_empno                Varchar2(5);
        e_employee_not_found   Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        c_restricted_area_catg Constant Varchar2(4) := 'A003';
        v_emp_area_code        Varchar2(3);
    Begin
        v_emp_area_code := iot_swp_common.get_emp_work_area_code(p_empno);
        Open c For
            With
                desk_list As (
                    Select
                        *
                    From
                        dm_vu_desk_list  dl,
                        dm_vu_desk_areas da
                    Where
                        da.area_key_id        = dl.work_area
                        And (da.area_catg_code != c_restricted_area_catg
                            Or da.area_key_id = v_emp_area_code
                        )
                        And deskid Not In(
                            Select
                                deskid
                            From
                                dm_vu_desk_lock_swp_plan
                        )
                )
            Select
                *
            From
                (
                    Select
                        a.*,
                        a.total_count - a.occupied_count                            As available_count,
                        Row_Number() Over (Order By area_desc, office, wing, floor) As row_number,
                        Count(*) Over ()                                            As total_row
                    From
                        (
                            Select
                                d.work_area,
                                d.area_catg_code,
                                d.area_desc,
                                d.office,
                                d.floor,
                                d.wing,
                                Count(d.deskid) total_count,
                                Count(ed.empno) occupied_count
                            From
                                desk_list          d,
                                DM_VU_EMP_DESK_MAP_SWP_PLAN ed
                            Where
                                d.deskid = ed.deskid(+)
                            Group By office, wing, floor, work_area, area_desc, area_catg_code
                            Order By area_desc, office, wing, floor
                        ) a
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_general_area_list;

    Function fn_work_area_desk(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_date        Date,
        p_work_area   Varchar2,
        p_office      Varchar2 Default Null,
        p_floor       Varchar2 Default Null,
        p_wing        Varchar2 Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_office             dm_vu_desk_list.office%Type;
        v_floor              dm_vu_desk_list.floor%Type;
        v_wing               dm_vu_desk_list.wing%Type;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        If p_office Is Null Then
            v_office := '%';
        Else
            v_office := p_office;
        End If;

        If p_floor Is Null Then
            v_floor := '%';
        Else
            v_floor := p_floor;
        End If;

        If p_wing Is Null Then
            v_wing := '%';
        Else
            v_wing := p_wing;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        mast.deskid                              As deskid,
                        mast.office                              As office,
                        mast.floor                               As floor,
                        mast.seatno                              As seat_no,
                        mast.wing                                As wing,
                        mast.assetcode                           As asset_code,
                        mast.bay                                 As bay,
                        Row_Number() Over (Order By deskid Desc) row_number,
                        Count(*) Over ()                         total_row
                    From
                        dms.dm_deskmaster mast
                    Where
                        mast.work_area = Trim(p_work_area)
                        And mast.office Like v_office
                        And mast.floor Like v_floor
                        And nvl(mast.wing, '-') Like v_wing

                        And mast.deskid
                        Not In(
                            Select
                                swptbl.deskid
                            From
                                swp_smart_attendance_plan swptbl
                            --where (trunc(ATTENDANCE_DATE) = TRUNC(p_date) or p_date is null)
                            Union
                            Select
                                c.deskid
                            From
                                DM_VU_EMP_DESK_MAP_SWP_PLAN c
                            Union
                            Select
                                deskid
                            From
                                dm_vu_desk_lock_swp_plan
                        )
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                deskid,
                seat_no;
        Return c;
    End fn_work_area_desk;

End iot_swp_office_workspace_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_OFFICE_WORKSPACE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_OFFICE_WORKSPACE" As
    Procedure sp_add_office_ws_desk(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_deskid           Varchar2,
        p_empno            Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        strsql            Varchar2(600);
        v_count           Number;
        v_ststue          Varchar2(5);
        v_mod_by_empno    Varchar2(5);
        v_pk              Varchar2(10);
        v_fk              Varchar2(10);
        v_empno           Varchar2(5);
        v_attendance_date Date;
        v_desk            Varchar2(20);
        v_parent          Varchar2(4);
    Begin

        v_mod_by_empno := get_empno_from_meta_id(p_meta_id);

        If v_mod_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            swp_primary_workspace
        Where
            Trim(empno)                 = Trim(p_empno)
            And Trim(primary_workspace) = '1';

        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number ' || p_empno;
            Return;
        End If;
        Select
            parent
        Into
            v_parent
        From
            ss_emplmast
        Where
            empno = p_empno;


        iot_swp_dms.sp_add_desk_user(
            p_person_id    => p_person_id,
            p_meta_id      => p_meta_id,

            p_empno        => p_empno,
            p_deskid       => p_deskid,
            p_parent       => v_parent,

            p_message_type => p_message_type,
            p_message_text => p_message_text
        );

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End sp_add_office_ws_desk;
End iot_swp_office_workspace;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_MAIL
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_MAIL" As
    c_ows_code Constant Number := 1;
    c_sws_code Constant Number := 2;

    Function fn_get_prev_working_day Return Date As
        v_date  Date := sysdate;
        v_count Number;
    Begin
        Loop
            v_date := v_date - 1;
            Select
                Count(*)
            Into
                v_count
            From
                ss_holidays
            Where
                holiday = v_date;
            If v_count = 0 Then
                Exit;
            End If;
        End Loop;
        Return v_date;
    End;

    Procedure sp_send_to_ows_absent_emp As

        Cursor cur_ows_absent_emp(cp_date Date) Is
            Select
                group_id,
                Listagg(user_email, ';') Within
                    Group (Order By
                        empno) email_csv_list
            From
                (
                    Select
                        empno,
                        name                                           employee_name,
                        replace(email, ',', '.')                       user_email,
                        ceil((Row_Number() Over(Order By empno)) / 50) group_id
                    From
                        (
                            Select
                                a.empno,
                                e.name,
                                e.email,
                                iot_swp_common.fn_is_present_4_swp(a.empno, cp_date) is_swp_present
                            From
                                swp_primary_workspace       a,
                                ss_emplmast                 e,
                                swp_primary_workspace_types wt,
                                swp_include_emptype         et
                            Where
                                trunc(a.start_date)     = (
                                        Select
                                            Max(trunc(start_date))
                                        From
                                            swp_primary_workspace b
                                        Where
                                            b.empno = a.empno
                                            And b.start_date <= sysdate
                                    )
                                And a.empno             = e.empno
                                And e.emptype           = et.emptype
                                And status              = 1
                                And a.primary_workspace = wt.type_code
                                And a.primary_workspace = c_ows_code
                                And e.email Is Not Null
                                And e.empno Not In ('04132', '04600', '04484')
                                And e.grade <> 'X1'
                                And e.doj <= cp_date
                                and e.assign not in(
                                select assign from swp_exclude_assign
                                )
                        )
                    Where
                        is_swp_present = 0
                    Order By empno
                )
            Group By
                group_id;

        --
        Type typ_tab_ows_absent_emp Is
            Table Of cur_ows_absent_emp%rowtype;
        tab_ows_abent_emp typ_tab_ows_absent_emp;

        v_count           Number;
        v_mail_csv        Varchar2(2000);
        v_subject         Varchar2(1000);
        v_msg_body        Varchar2(2000);
        v_success         Varchar2(1000);
        v_message         Varchar2(500);
        v_absent_date     Date;
    Begin

        v_absent_date := trunc(sysdate - 1);

        Select
            Count(*)
        Into
            v_count
        From
            ss_holidays
        Where
            holiday = v_absent_date;

        If v_count > 0 Then
            Return;
        End If;

        v_msg_body    := v_mail_body_ows_absent;
        v_subject     := 'SWP : Office Workspace allocated but not reporting to office';
        For email_csv_row In cur_ows_absent_emp(v_absent_date)
        Loop
            v_mail_csv := email_csv_row.email_csv_list;

            tcmpl_app_config.pkg_app_mail_queue.sp_add_to_queue(
                p_person_id    => Null,
                p_meta_id      => Null,
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body1   => v_msg_body,
                p_mail_body2   => Null,
                p_mail_type    => 'HTML',
                p_mail_from    => 'SWP',
                p_message_type => v_success,
                p_message_text => v_message
            );

            /*
            send_mail_from_api(
                p_mail_to      => Null,
                p_mail_cc      => Null,
                p_mail_bcc     => v_mail_csv,
                p_mail_subject => v_subject,
                p_mail_body    => v_msg_body,
                p_mail_profile => 'SELFSERVICE',
                --(example --> SQSI, OSD, ALHR, etc...)
                p_mail_format  => 'HTML',
                p_success      => v_success,
                p_message      => v_message
            );
            */
        End Loop;
    End;

End;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_FLAGS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_FLAGS" As
    Procedure get_all_flags(
        p_person_id                        Varchar2,
        p_meta_id                          Varchar2,

        p_restricted_desks_in_sws_plan Out Varchar2,
        p_open_desks_in_sws_plan       Out Varchar2,

        p_message_type                 Out Varchar2,
        p_message_text                 Out Varchar2

    ) As
        Type typ_tab_swp_flags Is Table Of swp_flags%rowtype Index By Pls_Integer;
        tab_swp_flags typ_tab_swp_flags;
    Begin
        Select
            *
        Bulk Collect
        Into
            tab_swp_flags
        From
            swp_flags;
        For i In 1..tab_swp_flags.count
        Loop
            If tab_swp_flags(i).flag_code = 'SWP_RESTRICTED_OPEN_DESK_AREA_FOR_SMART_PLANNING' Then
                p_restricted_desks_in_sws_plan := trim(tab_swp_flags(i).flag_value);
            End If;
            If tab_swp_flags(i).flag_code = 'SWP_OPEN_DESK_AREA_FOR_SMART_PLANNING' Then
                p_open_desks_in_sws_plan := trim(tab_swp_flags(i).flag_value);
            End If;

        End Loop;
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;

     procedure get_flag_details(
        p_person_id             varchar2,
        p_meta_id               varchar2,

        p_flag_id               varchar2,
        p_flag_code         out varchar2,
        p_flag_desc         out varchar2,
        p_flag_value        out varchar2,
        p_flag_value_number out number,
        p_flag_value_date   out date,

        p_message_type      out varchar2,
        p_message_text      out varchar2

    ) as
   v_count number;
   begin

      select flag_code, flag_desc, flag_value, flag_value_number, flag_value_date
        into p_flag_code, p_flag_desc, p_flag_value, p_flag_value_number, p_flag_value_date
        from swp_flags
       where flag_id = p_flag_id;

      p_message_type := 'OK';
      p_message_text := 'Procedure executed successfully.';
       exception
      when others then
         p_message_type := 'KO';
         p_message_text := 'ERR :- '
                           || sqlcode
                           || ' - '
                           || sqlerrm;
   end get_flag_details;


End iot_swp_flags;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_EXCLUDE_EMP_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_EXCLUDE_EMP_QRY" as

   function fn_Swp_Exclude_Emp_list(
      p_person_id      varchar2,
      p_meta_id        varchar2,

      p_generic_search varchar2 default null,

      p_start_date     date     default null,
      p_end_date       date     default null,
      P_Is_Active      number   default null,

      p_row_number     number,
      p_page_length    number
   ) return sys_refcursor as
      v_empno              varchar2(5);
      e_employee_not_found exception;
      pragma exception_init(e_employee_not_found, -20001);
      c                    sys_refcursor;
   begin

      v_empno := get_empno_from_meta_id(p_meta_id);
      if v_empno = 'ERRRR' then
         raise e_employee_not_found;
         return null;
      end if;

      open c for
         select *
           from (
                   select a.key_id as key_id,
                          a.empno as Empno,
                          b.name as Employee_Name,
                          to_char(a.start_date, 'dd-Mon-yyyy') as start_date,
                          to_char(a.end_date, 'dd-Mon-yyyy') as end_date,
                          a.reason as Reason,
                          a.Is_Active as Is_Active , 
                          to_char(a.modified_on, 'dd-Mon-yyyy') as modified_on,
                          get_emp_name(a.modified_by) as modified_by,
                          row_number() over (order by a.key_id desc) row_number,
                          count(*) over () total_row
                     from Swp_Exclude_Emp a, ss_emplmast b
                    where a.EMPNO = b.EMPNO
                      and a.Is_Active = nvl(P_Is_Active, a.Is_Active)
                      --and (b.name like nvl(p_generic_search,'%') or b.empno like nvl(p_generic_search,'%'))
                    and (  upper(b.name) like upper('%'||p_generic_search||'%') 
                           or 
                           upper(b.empno) like upper('%'||p_generic_search||'%') 
                         )
                    order by a.start_date, a.end_date
                )
          where row_number between (nvl(p_row_number, 0) + 1) and (nvl(p_row_number, 0) + p_page_length);
      return c;

   end;

 function fn_Swp_Exclude_Emp_excel(
      p_person_id      varchar2,
      p_meta_id        varchar2,

      p_generic_search varchar2 default null,

      p_start_date     date     default null,
      p_end_date       date     default null,
      P_Is_Active      number   default null,

      p_row_number     number,
      p_page_length    number
   ) return sys_refcursor as
      v_empno              varchar2(5);
      e_employee_not_found exception;
      pragma exception_init(e_employee_not_found, -20001);
      c                    sys_refcursor;
   begin

      v_empno := get_empno_from_meta_id(p_meta_id);
      if v_empno = 'ERRRR' then
         raise e_employee_not_found;
         return null;
      end if;

      open c for
         select *
           from (
                   select a.key_id as key_id,
                          a.empno as Empno,
                          b.name as Employee_Name,
                          to_char(a.start_date, 'dd-Mon-yyyy') as start_date,
                          to_char(a.end_date, 'dd-Mon-yyyy') as end_date,
                          a.reason as Reason,
                          CASE a.Is_Active WHEN 1 THEN 'Yes'
                           WHEN 0 THEN 'No'
                           ELSE 'Error' END  as Is_Active ,  
                          to_char(a.modified_on, 'dd-Mon-yyyy') as modified_on,
                          get_emp_name(a.modified_by) as modified_by 
                     from Swp_Exclude_Emp a, ss_emplmast b
                    where a.EMPNO = b.EMPNO
                      and a.Is_Active = nvl(P_Is_Active, a.Is_Active)
                    and (  upper(b.name) like upper('%'||p_generic_search||'%') 
                           or 
                           upper(b.empno) like upper('%'||p_generic_search||'%') 
                         )
                    order by a.start_date, a.end_date
                );
      return c;

   end;

   procedure sp_Swp_Exclude_Emp_details(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_Application_Id   varchar2,

      p_Empno        out varchar2,
      p_Emp_name     out varchar2,
      p_start_date   out varchar2,
      p_end_date     out varchar2,
      p_Reason       out varchar2,
      P_Is_Active    out varchar2,

      p_modified_on  out varchar2,
      p_modified_by  out varchar2,

      p_message_type out varchar2,
      p_message_text out varchar2
   ) as
      v_empno        varchar2(5);
      v_user_tcp_ip  varchar2(5) := 'NA';
      v_message_type number      := 0;
   begin
      v_empno        := get_empno_from_meta_id(p_meta_id);

      if v_empno = 'ERRRR' then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         return;
      end if;

      select a.empno as Empno,
             b.name as Emp_name,
             to_char(a.start_date, 'dd-Mon-yyyy') as start_date,
             to_char(a.end_date, 'dd-Mon-yyyy') as end_date,
             a.reason as Reason,
             a.Is_Active as Is_Active,
             to_char(a.modified_on, 'dd-Mon-yyyy') as modified_on,
             a.modified_by modified_by
        into p_Empno,
             p_Emp_name,
             p_start_date,
             p_end_date,
             p_Reason,
             P_Is_Active,
             p_modified_on,
             p_modified_by
        from Swp_Exclude_Emp a, ss_emplmast b
       where a.EMPNO = b.EMPNO
         and a.key_id = p_Application_Id;

      p_message_type := 'OK';
      p_message_text := 'Procedure executed successfully.';

   exception
      when others then
         p_message_type := 'KO';
         p_message_text := 'ERR :- '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   end sp_Swp_Exclude_Emp_details;

end IOT_SWP_EXCLUDE_EMP_QRY;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_EXCLUDE_EMP
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_EXCLUDE_EMP" as

   procedure sp_add_swp_exclude_emp(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_empno            varchar2,
      p_start_date       date,
      p_end_date         date,
      p_reason           varchar2,

      p_message_type out varchar2,
      p_message_text out varchar2
   ) as
      v_empno    varchar2(5);
      v_emp_name varchar2(60);
      v_key_id   varchar2(8);
      v_Is_Active number := 1;
   begin
      v_empno        := get_empno_from_meta_id(p_meta_id);
      if v_empno = 'ERRRR' then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         return;
      end if;

      v_key_id       := dbms_random.string('X', 8);

      commit;

      insert into swp_exclude_emp
         (key_id, empno, start_date, end_date, reason,Is_Active, modified_on, modified_by)
      values
         (v_key_id, p_empno, p_start_date, p_end_date, p_reason,v_Is_Active, Sysdate, v_empno);

      commit;

      p_message_type := 'OK';
      p_message_text := 'Procedure executed successfully.';

   exception
      when others then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;
   end sp_add_swp_exclude_emp;

   procedure sp_update_swp_exclude_emp(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_Application_Id   varchar2,

      p_empno            varchar2,
      p_start_date       date,
      p_end_date         date,
      p_reason           varchar2,
      P_Is_Active        number,

      p_message_type out varchar2,
      p_message_text out varchar2
   ) as
      v_empno    varchar2(5);
      v_emp_name varchar2(60);
      v_key_id   varchar2(8);
   begin
      v_empno        := get_empno_from_meta_id(p_meta_id);
      if v_empno = 'ERRRR' then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         return;
      end if;

      update swp_exclude_emp
         set empno = p_empno,
             start_date = p_start_date,
             end_date = p_end_date,
             reason = p_reason,
             is_active = P_Is_Active,
             modified_on = sysdate,
             modified_by = v_empno
       where key_id = p_application_id;

      commit;

      p_message_type := 'OK';
      p_message_text := 'Procedure executed successfully.';

   exception
      when others then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;
   end sp_update_swp_exclude_emp;

   procedure sp_delete_swp_exclude_emp(
      p_person_id        varchar2,
      p_meta_id          varchar2,

      p_application_id   varchar2,

      p_message_type out varchar2,
      p_message_text out varchar2
   ) as
      v_count    number;
      v_empno    varchar2(5);
      v_tab_from varchar2(2);
   begin
      v_count        := 0;
      v_empno        := get_empno_from_meta_id(p_meta_id);

      if v_empno = 'ERRRR' then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         return;
      end if;

      delete from swp_exclude_emp
       where key_id = p_application_id;

      commit;

      p_message_type := 'OK';
      p_message_text := 'Procedure executed successfully.';

   exception
      when others then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   end sp_delete_swp_exclude_emp;

end IOT_SWP_EXCLUDE_EMP;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_EMP_PROJ_MAP_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_EMP_PROJ_MAP_QRY" As

    Function fn_emp_proj_map_list(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_assign_code Varchar2 Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor
    Is
        c                     Sys_Refcursor;
        v_count               Number;
        v_empno               Varchar2(5);
        v_hod_sec_assign_code Varchar2(4);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        If v_empno Is Null Or p_assign_code Is Not Null Then
            v_hod_sec_assign_code := iot_swp_common.get_default_costcode_hod_sec(
                                         p_hod_sec_empno => v_empno,
                                         p_assign_code   => p_assign_code
                                     );
        End If;
        Open c For
        with proj as (select distinct proj_no, name from ss_projmast)
            Select
                *
            From
                (
                    Select
                        empprojmap.key_id                                   As keyid,
                        empprojmap.empno                                    As empno,
                        a.name                                              As empname,
                        empprojmap.projno                                   As projno,
                        b.name                                              As projname,
                        Row_Number() Over (Order By empprojmap.key_id Desc) row_number,
                        Count(*) Over ()                                    total_row
                    From
                        swp_emp_proj_mapping empprojmap,
                        ss_emplmast          a,
                        proj          b
                    Where
                        a.empno       = empprojmap.empno
                        And b.proj_no = empprojmap.projno
                        And empprojmap.empno In (
                            Select
                            Distinct empno
                            From
                                ss_emplmast
                            Where
                                status       = 1
                                And a.assign = nvl(v_hod_sec_assign_code, a.assign)
                        /*
                        And assign In (
                                Select parent
                                  From ss_user_dept_rights
                                 Where empno = v_empno
                                Union
                                Select costcode
                                  From ss_costmast
                                 Where hod = v_empno
                             )
                        */
                        )

                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                empno,
                projno;
        Return c;

    End fn_emp_proj_map_list;

    --  GRANT EXECUTE ON "IOT_SWP_EMP_PROJ_MAP_QRY" TO "TCMPL_APP_CONFIG";

End iot_swp_emp_proj_map_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_EMP_PROJ_MAP
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_EMP_PROJ_MAP" As

   Procedure sp_add_emp_proj(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_empno            Varchar2,
      p_projno           Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno       Varchar2(5);
      v_user_tcp_ip Varchar2(5)  := 'NA';
      v_key_id      Varchar2(10) := dbms_random.string('X', 10);
      v_count       Number       := 0;
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Select Count(*) into  v_count
        From SWP_EMP_PROJ_MAPPING
       Where EMPNO = p_empno ;

      If v_count > 0 Then
         p_message_type := 'KO';
         p_message_text := 'Employee record already present';
         Return;
      End If;

      Insert Into SWP_EMP_PROJ_MAPPING
         (key_id, EMPNO, PROJNO, MODIFIED_ON, MODIFIED_BY)
      Values (v_key_id, p_empno, p_projno, sysdate, v_empno);

      If (Sql%ROWCOUNT > 0) Then
         p_message_type := 'OK';
         p_message_text := 'Procedure executed successfully.';
      Else
         p_message_type := 'KO';
         p_message_text := 'Procedure not executed.';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_add_emp_proj;

   Procedure sp_update_emp_proj(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_application_id   Varchar2,
      p_projno           Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno       Varchar2(5);
      v_user_tcp_ip Varchar2(5) := 'NA';
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Update SWP_EMP_PROJ_MAPPING
         Set PROJNO = p_projno,
             MODIFIED_ON = sysdate, MODIFIED_BY = v_empno
       Where key_id = p_application_id;

      If (Sql%ROWCOUNT > 0) Then
         p_message_type := 'OK';
         p_message_text := 'Procedure executed successfully.';
      Else
         p_message_type := 'KO';
         p_message_text := 'Procedure not executed.';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_update_emp_proj;

   Procedure sp_delete_emp_proj(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_application_id   Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno        Varchar2(5);
      v_user_tcp_ip  Varchar2(5) := 'NA';
      v_message_type Number      := 0;
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Delete From SWP_EMP_PROJ_MAPPING
       Where key_id = p_application_id;

      If (Sql%ROWCOUNT > 0) Then
         p_message_type := 'OK';
         p_message_text := 'Procedure executed successfully.';
      Else
         p_message_type := 'KO';
         p_message_text := 'Procedure not executed.';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_delete_emp_proj;

End IOT_SWP_EMP_PROJ_MAP;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_DMS_REP_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_DMS_REP_QRY" As
    e_employee_not_found Exception;
    Pragma exception_init(e_employee_not_found, -20001);

    Function fn_non_sws_emp_athome(
        p_hod_sec_empno Varchar2,
        p_is_admin      Boolean,
        p_row_number    Number,
        p_page_length   Number
    ) Return Sys_Refcursor As
        v_query Varchar2(6500);
        c       Sys_Refcursor;
    Begin
        v_query := c_query_non_sws_emp_home;
        If p_is_admin Then
            v_query := replace(v_query, '!ASSIGN_SUB_QUERY!', '');
        Else
            v_query := replace(v_query, '!ASSIGN_SUB_QUERY!', c_assign_sub_query);
        End If;
        Open c For v_query Using p_hod_sec_empno, p_row_number, p_page_length;
        Return c;
    End;

    Function fn_non_sws_emp_athome_4hodsec(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c               Sys_Refcursor;
        v_hod_sec_empno Varchar2(5);
    Begin

        v_hod_sec_empno := get_empno_from_meta_id(p_meta_id);
        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        c               := fn_non_sws_emp_athome(
                               p_hod_sec_empno => v_hod_sec_empno,
                               p_is_admin      => false,
                               p_row_number    => p_row_number,
                               p_page_length   => p_page_length
                           );
        /*
                Open c For
                    Select
                        *
                    From
                        (
                            Select
                                a.empno                                   As empno,
                                a.name                                    As employee_name,
                                a.parent                                  As parent,
                                a.emptype                                 As emptype,
                                a.grade                                   As emp_grade,
                                a.is_swp_eligible                         As is_swp_eligible,
                                a.is_laptop_user                          As is_laptop_user,
                                a.email                                   As emp_email,
                                iot_swp_common.get_desk_from_dms(a.empno) As deskid,
                                a.present_count                           As present_count,
                                Row_Number() Over (Order By parent)       As row_number,
                                Count(*) Over ()                          As total_row
                            From
                                (

                                    Select
                                        *
                                    From
                                        (
                                            Select
                                                empno,
                                                name,
                                                parent,
                                                grade,
                                                emptype,
                                                is_swp_eligible,
                                                is_laptop_user,
                                                email,
                                                Sum(is_present) present_count
                                            From
                                                (
                                                    With
                                                        dates As (
                                                            Select
                                                                d_date
                                                            From
                                                                (
                                                                    Select
                                                                        dd.*
                                                                    From
                                                                        ss_days_details dd
                                                                    Where
                                                                        dd.d_date Between sysdate - 14 And sysdate
                                                                        And dd.d_date Not In (
                                                                            Select
                                                                                holiday
                                                                            From
                                                                                ss_holidays
                                                                            Where
                                                                                holiday Between sysdate - 14 And sysdate
                                                                        )
                                                                    Order By d_date Desc
                                                                )
                                                            Where
                                                                Rownum < 7

                                                        )
                                                    Select
                                                        a.*, iot_swp_common.fn_is_present_4_swp(empno, dates.d_date) is_present
                                                    From
                                                        (
                                                            Select
                                                                *
                                                            From
                                                                (

                                                                    Select
                                                                        e.empno,
                                                                        e.name,
                                                                        e.parent,
                                                                        e.grade,
                                                                        e.emptype,
                                                                        iot_swp_common.is_emp_eligible_for_swp(e.empno) is_swp_eligible,
                                                                        iot_swp_common.is_emp_laptop_user(e.empno)      is_laptop_user,
                                                                        e.email
                                                                    From
                                                                        ss_emplmast e
                                                                    Where
                                                                        e.status = 1
                                                                        And e.assign In (
                                                                            Select
                                                                                parent
                                                                            From
                                                                                ss_user_dept_rights
                                                                            Where
                                                                                empno = v_hod_sec_empno
                                                                            Union

                                                                            Select
                                                                                costcode
                                                                            From
                                                                                ss_costmast
                                                                            Where
                                                                                hod = v_hod_sec_empno
                                                                        )

                                                                )
                                                            Where
                                                                (
                                                                    is_swp_eligible != 'OK'
                                                                    Or is_laptop_user = 0
                                                                    Or emptype In ('S')
                                                                )
                                                                And emptype Not In ('O')
                                                        ) a, dates
                                                )
                                            Group By empno, name, parent, grade, emptype, is_swp_eligible, is_laptop_user, email
                                            Order By parent
                                        )
                                    Where
                                        present_count < 3

                                ) a
                        )
                    Where
                        row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
                        */
        Return c;
    End;

    Function fn_non_sws_emp_athome_4admin(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c             Sys_Refcursor;
        v_admin_empno Varchar2(5);
    Begin

        v_admin_empno := get_empno_from_meta_id(p_meta_id);
        If v_admin_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        c             := fn_non_sws_emp_athome(
                             p_hod_sec_empno => Null,
                             p_is_admin      => true,
                             p_row_number    => p_row_number,
                             p_page_length   => p_page_length
                         );

        Return c;
    End;

    Function fn_deskallocation_swp(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;

    Begin
        Open c For
            Select
                deskid,
                office,
                floor,
                wing,
                cabin,
                empno1,
                initcap(name1)                                              As name1,
                userid1,
                dept1,
                grade1,
                desg1,
                shift1,
                email1,
                empno2,
                initcap(name2)                                              As name2,
                userid2,
                dept2,
                grade2,
                desg2,
                shift2,
                email2,
                compname,
                computer,
                pcmodel                                                     As pc_model,
                monitor1,
                monmodel1                                                   As monitor1_model,
                monitor2,
                monmodel2                                                   As monitor2_model,
                telephone,
                telmodel                                                    As tel_model,
                printer,
                printmodel                                                  As printer_model,
                docstn                                                      As docking_station,
                docstnmodel                                                 As docking_station_model,
                dms.dmsv2.get_ram(computer)                                 As pc_ram,
                nvl(dms.dmsv2.get_gcard(computer), '-')                     As graphic_card,

                iot_swp_common.fn_get_emp_pws_planning(empno1)              As emp1_pws,
                iot_swp_common.get_emp_is_eligible_4swp(empno1)             As emp1_is_swp_eligible,

                selfservice.iot_swp_common.fn_get_emp_pws_planning(empno2)  As emp2_pws,
                selfservice.iot_swp_common.get_emp_is_eligible_4swp(empno2) As emp2_is_swp_eligible,

                selfservice.iot_swp_common.get_emp_projno_desc(empno1)      As emp1_project,
                selfservice.iot_swp_common.get_emp_projno_desc(empno2)      As emp2_project

            From
                desmas_allocation
            Order By
                deskid;
        Return c;
    End;

End iot_swp_dms_rep_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_DMS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_DMS" As

    /*  p_unqid := 'SWPF'  -- fixed desk
        p_unqid := 'SWPV'  -- variable desk     */

    c_empno_swpv       Constant Varchar2(4)  := 'SWPV';
    c_blockdesk_4_swpv Constant Number(1)    := 7;
    c_unqid_swpv       Constant Varchar2(20) := 'Desk block SWPV';


    Procedure sp_add_desk_user(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2,
        p_deskid           Varchar2,
        p_parent           Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_exists Number;
    Begin
        If Not iot_swp_common.fn_can_do_desk_plan_4_emp(p_empno) Then
            p_message_type := 'KO';
            p_message_text := 'Planning not allowed for employee assign code.';
            Return;
        End If;
        Select
            Count(du.empno)
        Into
            v_exists
        From
            dms.dm_usermaster_swp_plan du
        Where
            du.empno        = p_empno
            And du.deskid   = p_deskid
            And du.costcode = p_parent;

        If v_exists = 0 Then
            Insert Into dms.dm_usermaster_swp_plan(empno, deskid, costcode, dep_flag)
            Values
                (p_empno, p_deskid, p_parent, 0);
        Else
            p_message_type := 'KO';
            p_message_text := 'Err : User already assigned desk in DMS';
            Return;
        End If;
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_add_desk_user;

    Procedure sp_remove_desk_user(
        p_person_id Varchar2,
        p_meta_id   Varchar2,

        p_empno     Varchar2,
        p_deskid    Varchar2
    ) As
        v_pk              Varchar2(20);
        v_create_by_empno Varchar2(5);
    Begin

        If Not iot_swp_common.fn_can_do_desk_plan_4_emp(p_empno) Then
            Return;
        End If;

        v_create_by_empno := get_empno_from_meta_id(p_meta_id);

        Delete
            From dms.dm_usermaster_swp_plan du
        Where
            du.empno      = p_empno
            And du.deskid = p_deskid;
        /*
        If p_unqid = 'SWPV' Then
            --send assets to orphan table

            v_pk := dbms_random.string('X', 20);

            Insert Into dms.dm_orphan_asset(unqid, empno, deskid, assetid, createdon, createdby, confirmed)
            Select
                v_pk,
                p_empno,
                deskid,
                assetid,
                sysdate,
                v_create_by_empno,
                0
            From
                dms.dm_deskallocation
            Where
                deskid = p_deskid;

            -- release assets of desk from dm_deskallocation table 

            Delete
                From dms.dm_deskallocation
            Where
                deskid = p_deskid;
        End If;
        */
    End sp_remove_desk_user;

    Procedure sp_lock_desk(
        p_person_id Varchar2,
        p_meta_id   Varchar2,

        p_deskid    Varchar2
    ) As
        v_exists Number;
    Begin

        Select
            Count(dl.empno)
        Into
            v_exists
        From
            dms.dm_desklock_swp_plan dl
        Where
            dl.empno      = c_empno_swpv
            And dl.deskid = p_deskid;

        If v_exists = 0 Then
            Insert Into dms.dm_desklock_swp_plan(unqid, empno, deskid, targetdesk, blockflag, blockreason)
            Values
                (c_unqid_swpv, c_empno_swpv, p_deskid, 0, 1, c_blockdesk_4_swpv);
        Else
            Update
                dms.dm_desklock_swp_plan
            Set
                unqid = c_unqid_swpv,
                targetdesk = 0,
                blockflag = 1,
                blockreason = c_blockdesk_4_swpv
            Where
                empno      = c_empno_swpv
                And deskid = p_deskid;
        End If;
    End sp_lock_desk;

    Procedure sp_unlock_desk(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,

        p_deskid      Varchar2,
        p_week_key_id Varchar2
    ) As
        v_count Number;
    Begin


        Select
            Count(*)
        Into
            v_count
        From
            swp_smart_attendance_plan
        Where
            Trim(deskid)    = Trim(p_deskid)
            And week_key_id = p_week_key_id;

        --
        If v_count > 0 Then
            Return;
        End If;
        Delete
            From dms.dm_desklock_swp_plan dl
        Where
            Trim(dl.empno)      = Trim(c_empno_swpv)
            And Trim(dl.deskid) = Trim(p_deskid)
            And Trim(dl.unqid)  = Trim(c_unqid_swpv);
    End sp_unlock_desk;

    Procedure sp_clear_desk(
        p_person_id Varchar2,
        p_meta_id   Varchar2,

        p_deskid    Varchar2
    ) As
        v_pk              Varchar2(20);
        v_create_by_empno Varchar2(5);
    Begin
        v_create_by_empno := get_empno_from_meta_id(p_meta_id);

        /* send assets to orphan table */

        v_pk              := dbms_random.string('X', 20);

        Insert Into dms.dm_orphan_asset(unqid, empno, deskid, assetid, createdon, createdby, confirmed)
        Select
            v_pk,
            '',
            deskid,
            assetid,
            sysdate,
            v_create_by_empno,
            0
        From
            dms.dm_deskallocation_swp_plan
        Where
            deskid = p_deskid;

        /* release assets of desk from dm_deskallocation table */

        Delete
            From dms.dm_deskallocation_swp_plan
        Where
            deskid = p_deskid;

    End sp_clear_desk;

End iot_swp_dms;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_DESK_AREA_MAP_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_DESK_AREA_MAP_QRY" As
 
Function fn_desk_area_map_list(
     p_person_id   Varchar2,
      p_meta_id     Varchar2,
      P_area        Varchar2 Default Null,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor
   Is
   c                    Sys_Refcursor;
   v_count              Number;
   v_empno              Varchar2(5);
   v_hod_sec_assign_code              Varchar2(4);
   e_employee_not_found Exception;
   Pragma exception_init(e_employee_not_found, -20001);

Begin

   v_empno := get_empno_from_meta_id(p_meta_id);
   If v_empno = 'ERRRR' Then
      Raise e_employee_not_found;
      Return Null;
   End If;

   /*
   Select a.KYE_ID, a.DESKID, a.AREA_KEY_ID ,
      b.AREA_KEY_ID, b.AREA_DESC, b.AREA_CATG_CODE, b.AREA_INFO
   From SWP_DESK_AREA_MAPPING a , DMS.DM_DESK_AREAS b
   where a.AREA_KEY_ID = b.AREA_KEY_ID(+);
   */
 /*
   If v_empno Is Null Or p_assign_code Is Not Null Then
            v_hod_sec_assign_code := iot_swp_common.get_default_costcode_hod_sec(
                                         p_hod_sec_empno => v_empno,
                                         p_assign_code   => p_assign_code
                                     );
     end if;       

   Open c For
      Select *
        From (
                Select empprojmap.KYE_ID As keyid,
                       empprojmap.EMPNO As Empno,
                        a.name As Empname,
                       empprojmap.PROJNO As Projno,
                       b.name As Projname,
                       Row_Number() Over (Order By empprojmap.KYE_ID Desc) row_number,
                       Count(*) Over () total_row
                  From SWP_EMP_PROJ_MAPPING empprojmap , 
                        ss_emplmast a , ss_projmast b
                 Where a.empno = empprojmap.empno 
                     and b.projno = empprojmap.PROJNO
                     and  empprojmap.EMPNO In (
                          Select Distinct empno
                            From ss_emplmast
                           Where status = 1
                            And a.assign = nvl(v_hod_sec_assign_code, a.assign)
                       )

             )
       Where row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
       Order By Empno,PROJNO;
   Return c;
	*/
 RETURN NULL;

End fn_desk_area_map_list;


End IOT_SWP_DESK_AREA_MAP_QRY;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_DESK_AREA_MAP
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_DESK_AREA_MAP" As

   Procedure sp_add_desk_area(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_deskid           Varchar2,
      p_area             Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno       Varchar2(5);
      v_user_tcp_ip Varchar2(5)  := 'NA';
      v_key_id      Varchar2(10) := dbms_random.string('X', 10);
      v_count       Number       := 0;
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Select Count(*) Into v_count
        From SWP_DESK_AREA_MAPPING
       Where deskid = p_deskid;

      If v_count > 0 Then
         p_message_type := 'KO';
         p_message_text := 'Record already present';
         Return;
      End If;

      Insert Into SWP_DESK_AREA_MAPPING
         (KYE_ID, DESKID, AREA_KEY_ID, MODIFIED_ON, MODIFIED_BY)
      Values (v_key_id, p_deskid, p_area, sysdate, v_empno);

      If (Sql%ROWCOUNT > 0) Then
         p_message_type := 'OK';
         p_message_text := 'Procedure executed successfully.';
      Else
         p_message_type := 'KO';
         p_message_text := 'Procedure not executed.';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_add_desk_area;

   Procedure sp_update_desk_area(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_application_id   Varchar2,
      p_deskid           Varchar2,
      p_area             Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno       Varchar2(5);
      v_user_tcp_ip Varchar2(5) := 'NA';
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Update SWP_DESK_AREA_MAPPING
         Set DESKID = p_deskid, AREA_KEY_ID = p_area,
             MODIFIED_ON = sysdate, MODIFIED_BY = v_empno
       Where KYE_ID = p_application_id;

      If (Sql%ROWCOUNT > 0) Then
         p_message_type := 'OK';
         p_message_text := 'Procedure executed successfully.';
      Else
         p_message_type := 'KO';
         p_message_text := 'Procedure not executed.';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_update_desk_area;

   Procedure sp_delete_desk_area(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_application_id   Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno        Varchar2(5);
      v_user_tcp_ip  Varchar2(5) := 'NA';
      v_message_type Number      := 0;
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Delete From SWP_DESK_AREA_MAPPING
       Where KYE_ID = p_application_id;

      If (Sql%ROWCOUNT > 0) Then
         p_message_type := 'OK';
         p_message_text := 'Procedure executed successfully.';
      Else
         p_message_type := 'KO';
         p_message_text := 'Procedure not executed.';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_delete_desk_area;

End IOT_SWP_DESK_AREA_MAP;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_CONFIG_WEEK
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_CONFIG_WEEK" As
    c_plan_close_code  Constant Number := 0;
    c_plan_open_code   Constant Number := 1;
    c_past_plan_code   Constant Number := 0;
    c_cur_plan_code    Constant Number := 1;
    c_future_plan_code Constant Number := 2;

    Function fn_is_second_last_day_of_week(p_sysdate Date) Return Boolean As
        v_secondlast_workdate Date;
        v_fri_date            Date;
        Type rec Is Record(
                work_date     Date,
                work_day_desc Varchar2(100),
                rec_num       Number
            );

        Type typ_tab_work_day Is Table Of rec;
        tab_work_day          typ_tab_work_day;
    Begin
        v_fri_date := iot_swp_common.get_friday_date(trunc(p_sysdate));
        Select
            d_date As work_date,
            Case Rownum
                When 1 Then
                    'LAST'
                When 2 Then
                    'SECOND_LAST'
                Else
                    Null
            End    work_day_desc,
            Rownum As rec_num
        Bulk Collect
        Into
            tab_work_day
        From
            (
                Select
                    *
                From
                    ss_days_details
                Where
                    d_date <= v_fri_date
                    And d_date >= trunc(p_sysdate)
                    And d_date Not In
                    (
                        Select
                            trunc(holiday)
                        From
                            ss_holidays
                        Where
                            (holiday <= v_fri_date
                                And holiday >= trunc(p_sysdate))
                    )
                Order By d_date Desc
            )
        Where
            Rownum In(1, 2);
        If tab_work_day.count = 2 Then
            --v_sysdate EQUAL SECOND_LAST working day "THURSDAY"
            If p_sysdate = tab_work_day(2).work_date Then --SECOND_LAST working day
                Return true;
            End If;
        End If;
        Return false;
    Exception
        When Others Then
            Return false;
    End;

    Procedure sp_del_dms_desk_for_sws_users As
        Cursor cur_desk_plan_dept Is
            Select
                *
            From
                swp_include_assign_4_seat_plan;
        c1      Sys_Refcursor;

        --
        Cursor cur_sws Is
            Select
                a.empno,
                a.primary_workspace,
                a.start_date,
                iot_swp_common.get_swp_planned_desk(
                    p_empno => a.empno
                ) swp_desk_id
            From
                swp_primary_workspace a,
                ss_emplmast           e
            Where
                a.empno                 = e.empno
                And e.status            = 1
                And a.primary_workspace = 2
                And trunc(a.start_date) = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = a.empno
                        And b.start_date <= sysdate
                )
                And e.assign In (
                    Select
                        assign
                    From
                        swp_include_assign_4_seat_plan
                );
        Type typ_tab_sws Is Table Of cur_sws%rowtype Index By Binary_Integer;
        tab_sws typ_tab_sws;
    Begin
        Open cur_sws;
        Loop
            Fetch cur_sws Bulk Collect Into tab_sws Limit 50;
            For i In 1..tab_sws.count
            Loop
                iot_swp_dms.sp_remove_desk_user(
                    p_person_id => Null,
                    p_meta_id   => Null,
                    p_empno     => tab_sws(i).empno,
                    p_deskid    => tab_sws(i).swp_desk_id
                );
            End Loop;
            Exit When cur_sws%notfound;
        End Loop;
    End;

    --

    Procedure sp_mail_plan_to_emp
    As
        cur_dept_rows      Sys_Refcursor;
        cur_emp_week_plan  Sys_Refcursor;
        row_config_week    swp_config_weeks%rowtype;
        v_mail_body        Varchar2(4000);
        v_day_row          Varchar2(1000);
        v_emp_mail         Varchar2(100);
        v_msg_type         Varchar2(15);
        v_msg_text         Varchar2(1000);
        v_emp_desk         Varchar2(10);
        Cursor cur_sws_emp_list(cp_monday_date Date,
                                cp_friday_date Date) Is
            Select
                a.empno,
                e.name As employee_name,
                a.primary_workspace,
                a.start_date
            From
                swp_primary_workspace a,
                ss_emplmast           e
            Where
                e.status                = 1
                And a.empno             = e.empno
                And a.primary_workspace = 2
                And emptype In (
                    Select
                        emptype
                    From
                        swp_include_emptype
                )
                And assign Not In(
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                And trunc(a.start_date) = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = a.empno
                        And b.start_date <= cp_friday_date
                )
                And e.empno Not In(
                    Select
                        empno
                    From
                        swp_exclude_emp
                    Where
                        empno = e.empno
                        And (cp_monday_date Between start_date And end_date
                            Or cp_friday_date Between start_date And end_date)
                )
                And grade <> 'X1';

        Type typ_tab_sws_emp_list Is Table Of cur_sws_emp_list%rowtype;
        tab_sws_emp_list   typ_tab_sws_emp_list;

        Cursor cur_emp_smart_attend_plan(cp_empno      Varchar2,
                                         cp_start_date Date,
                                         cp_end_date   Date) Is
            With
                atnd_days As (
                    Select
                        w.empno,
                        Trim(w.attendance_date) As attendance_date,
                        Trim(w.deskid)          As deskid,
                        1                       As planned,
                        dm.office               As office,
                        dm.floor                As floor,
                        dm.wing                 As wing,
                        dm.bay                  As bay
                    From
                        swp_smart_attendance_plan w,
                        dms.dm_deskmaster         dm
                    Where
                        w.empno      = cp_empno
                        And w.deskid = dm.deskid(+)
                        And attendance_date Between cp_start_date And cp_end_date
                )
            Select
                e.empno                   As empno,
                dd.d_day,
                dd.d_date,
                nvl(atnd_days.planned, 0) As planned,
                atnd_days.deskid          As deskid,
                atnd_days.office          As office,
                atnd_days.floor           As floor,
                atnd_days.wing            As wing,
                atnd_days.bay             As bay
            From
                ss_emplmast     e,
                ss_days_details dd,
                atnd_days
            Where
                e.empno       = Trim(cp_empno)

                And dd.d_date = atnd_days.attendance_date
                And d_date Between cp_start_date And cp_end_date
            Order By
                dd.d_date;
        Type typ_tab_emp_smart_plan Is Table Of cur_emp_smart_attend_plan%rowtype;
        tab_emp_smart_plan typ_tab_emp_smart_plan;
    Begin

        Select
            *
        Into
            row_config_week
        From
            swp_config_weeks
        Where
            planning_flag = 2;

        Open cur_sws_emp_list(trunc(row_config_week.start_date), trunc(row_config_week.end_date));
        Loop
            Fetch cur_sws_emp_list Bulk Collect Into tab_sws_emp_list Limit 50;
            For i In 1..tab_sws_emp_list.count
            Loop
                Begin
                    Select
                        email
                    Into
                        v_emp_mail
                    From
                        ss_emplmast
                    Where
                        empno      = tab_sws_emp_list(i).empno
                        And status = 1;
                    If v_emp_mail Is Null Then
                        Continue;
                    End If;
                Exception
                    When Others Then
                        Continue;
                End;

                --PRIMARY WORK SPACE
                If tab_sws_emp_list(i).primary_workspace = 1 Then
                    v_mail_body := v_ows_mail_body;
                    v_mail_body := replace(v_mail_body, '!@User@!', tab_sws_emp_list(i).employee_name);
                    v_mail_body := replace(v_mail_body, '!@StartDate@!', to_char(row_config_week.start_date, 'dd-Mon-yyyy'));
                    v_mail_body := replace(v_mail_body, '!@EndDate@!', to_char(row_config_week.end_date, 'dd-Mon-yyyy'));

                    /*
                    v_emp_desk := get_swp_planned_desk(
                            p_empno => emp_row.empno
                    );
                    */
                    --SMART WORK SPACE
                Elsif tab_sws_emp_list(i).primary_workspace = 2 Then
                    If cur_emp_smart_attend_plan%isopen Then
                        Close cur_emp_smart_attend_plan;
                    End If;
                    Open cur_emp_smart_attend_plan(tab_sws_emp_list(i).empno, row_config_week.start_date, row_config_week.
                    end_date);
                    Fetch cur_emp_smart_attend_plan Bulk Collect Into tab_emp_smart_plan Limit 5;
                    For i In 1..tab_emp_smart_plan.count
                    Loop

                        v_day_row := nvl(v_day_row, '') || v_sws_empty_day_row;
                        v_day_row := replace(v_day_row, 'DESKID', tab_emp_smart_plan(i).deskid);
                        v_day_row := replace(v_day_row, 'DATE', tab_emp_smart_plan(i).d_date);
                        v_day_row := replace(v_day_row, 'DAY', tab_emp_smart_plan(i).d_day);
                        v_day_row := replace(v_day_row, 'OFFICE', tab_emp_smart_plan(i).office);
                        v_day_row := replace(v_day_row, 'FLOOR', tab_emp_smart_plan(i).floor);
                        v_day_row := replace(v_day_row, 'WING', tab_emp_smart_plan(i).wing);

                    End Loop;

                    If v_day_row = v_sws_empty_day_row Or v_day_row Is Null Then
                        Continue;
                    End If;
                    v_mail_body := v_sws_mail_body;
                    v_mail_body := replace(v_mail_body, '!@StartDate@!', to_char(row_config_week.start_date, 'dd-Mon-yyyy'));
                    v_mail_body := replace(v_mail_body, '!@EndDate@!', to_char(row_config_week.end_date, 'dd-Mon-yyyy'));
                    v_mail_body := replace(v_mail_body, '!@User@!', tab_sws_emp_list(i).employee_name);
                    v_mail_body := replace(v_mail_body, '!@WEEKLYPLANNING@!', v_day_row);

                End If;
                tcmpl_app_config.pkg_app_mail_queue.sp_add_to_queue(
                    p_person_id    => Null,
                    p_meta_id      => Null,
                    p_mail_to      => v_emp_mail,
                    p_mail_cc      => Null,
                    p_mail_bcc     => Null,
                    p_mail_subject => 'SWP : Attendance schedule for Smart Workspace',
                    p_mail_body1   => v_mail_body,
                    p_mail_body2   => Null,
                    p_mail_type    => 'HTML',
                    p_mail_from    => 'SELFSERVICE',
                    p_message_type => v_msg_type,
                    p_message_text => v_msg_text
                );
                Commit;
                v_day_row   := Null;
                v_mail_body := Null;
                v_msg_type  := Null;
                v_msg_text  := Null;
            End Loop;
            Exit When cur_sws_emp_list%notfound;

        End Loop;

    End;
    --
    Procedure sp_add_new_joinees_to_pws
    As
    Begin
        Insert Into swp_primary_workspace (key_id, empno, primary_workspace, start_date, modified_on, modified_by, active_code,
            assign_code)
        Select
            dbms_random.string('X', 10),
            empno,
            1 As pws,
            greatest(doj, to_date('31-Jan-2022')),
            sysdate,
            'Sys',
            2,
            e.assign
        From
            ss_emplmast                e,
            swp_deputation_departments dd
        Where
            e.status     = 1
            And e.assign = dd.assign(+)
            And emptype In (
                Select
                    emptype
                From
                    swp_include_emptype
            )
            And e.assign Not In (
                Select
                    assign
                From
                    swp_exclude_assign
            )
            And empno Not In (
                Select
                    empno
                From
                    swp_primary_workspace
            );
    End sp_add_new_joinees_to_pws;

    Procedure init_configuration(p_sysdate Date) As
        v_cur_week_mon        Date;
        v_cur_week_fri        Date;
        v_next_week_key_id    Varchar2(8);
        v_current_week_key_id Varchar2(8);
        v_count               Number;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            swp_config_weeks;
        If v_count > 0 Then
            Return;
        End If;
        v_cur_week_mon        := iot_swp_common.get_monday_date(p_sysdate);
        v_cur_week_fri        := iot_swp_common.get_friday_date(p_sysdate);
        v_current_week_key_id := dbms_random.string('X', 8);
        --Insert New Plan dates
        Insert Into swp_config_weeks(
            key_id,
            start_date,
            end_date,
            planning_flag,
            pws_open,
            ows_open,
            sws_open
        )
        Values(
            v_current_week_key_id,
            v_cur_week_mon,
            v_cur_week_fri,
            c_cur_plan_code,
            c_plan_close_code,
            c_plan_close_code,
            c_plan_close_code
        );

    End;

    --
    Procedure close_planning As
        b_update_planning_flag Boolean := false;
    Begin
        Update
            swp_config_weeks
        Set
            pws_open = c_plan_close_code,
            ows_open = c_plan_close_code,
            sws_open = c_plan_close_code
        Where
            pws_open    = c_plan_open_code
            Or ows_open = c_plan_open_code
            Or sws_open = c_plan_open_code;
        If b_update_planning_flag Then
            Update
                swp_config_weeks
            Set
                planning_flag = c_past_plan_code
            Where
                planning_flag = c_cur_plan_code;

            Update
                swp_config_weeks
            Set
                planning_flag = c_cur_plan_code
            Where
                planning_flag = c_future_plan_code;

        End If;
    End close_planning;
    --

    Procedure do_dms_data_to_plan(p_week_key_id Varchar2) As
    Begin
        Delete
            From dms.dm_usermaster_swp_plan;
        Delete
            From dms.dm_deskallocation_swp_plan;
        Delete
            From dms.dm_desklock_swp_plan;
        Commit;

        Insert Into dms.dm_usermaster_swp_plan(
            fk_week_key_id,
            empno,
            deskid,
            costcode,
            dep_flag
        )
        Select
            p_week_key_id,
            empno,
            deskid,
            costcode,
            dep_flag
        From
            dms.dm_usermaster;

        Insert Into dms.dm_deskallocation_swp_plan(
            fk_week_key_id,
            deskid,
            assetid
        )
        Select
            p_week_key_id,
            deskid,
            assetid
        From
            dms.dm_deskallocation;

        Insert Into dms.dm_desklock_swp_plan(
            fk_week_key_id,
            unqid,
            empno,
            deskid,
            targetdesk,
            blockflag,
            blockreason
        )
        Select
            p_week_key_id,
            unqid,
            empno,
            deskid,
            targetdesk,
            blockflag,
            blockreason
        From
            dms.dm_desklock;
    End;

    Procedure do_dms_snapshot(p_sysdate Date) As

    Begin
        Delete
            From dms.dm_deskallocation_snapshot;

        Insert Into dms.dm_deskallocation_snapshot(
            snapshot_date,
            deskid,
            assetid
        )
        Select
            p_sysdate,
            deskid,
            assetid
        From
            dms.dm_deskallocation;

        Delete
            From dms.dm_usermaster_snapshot;

        Insert Into dms.dm_usermaster_snapshot(
            snapshot_date,
            empno,
            deskid,
            costcode,
            dep_flag
        )
        Select
            p_sysdate,
            empno,
            deskid,
            costcode,
            dep_flag
        From
            dms.dm_usermaster;

        Delete
            From dms.dm_desklock_snapshot;

        Insert Into dms.dm_desklock_snapshot(
            snapshot_date,
            unqid,
            empno,
            deskid,
            targetdesk,
            blockflag,
            blockreason
        )
        Select
            p_sysdate,
            unqid,
            empno,
            deskid,
            targetdesk,
            blockflag,
            blockreason
        From
            dms.dm_desklock;

        Commit;

    End;
    --
    Procedure toggle_plan_future_to_curr(
        p_sysdate Date
    ) As
        rec_config_week swp_config_weeks%rowtype;
        v_sysdate       Date;
    Begin
        v_sysdate := trunc(p_sysdate);

        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            key_id In (
                Select
                    key_id
                From
                    (
                        Select
                            key_id
                        From
                            swp_config_weeks
                        Order By start_date Desc
                    )
                Where
                    Rownum = 1
            );

        If rec_config_week.start_date != v_sysdate Then
            Return;
        End If;
        --Close Planning
        close_planning;

        --toggle CURRENT to PAST
        Update
            swp_config_weeks
        Set
            planning_flag = c_past_plan_code
        Where
            planning_flag = c_cur_plan_code;

        --toggle FUTURE to CURRENT 
        Update
            swp_config_weeks
        Set
            planning_flag = c_cur_plan_code
        Where
            planning_flag = c_future_plan_code;

        --Toggle WorkSpace planning FUTURE to CURRENT
        Update
            swp_primary_workspace
        Set
            active_code = c_past_plan_code
        Where
            active_code = c_cur_plan_code
            And empno In (
                Select
                    empno
                From
                    swp_primary_workspace
                Where
                    active_code = c_future_plan_code
            );

        Update
            swp_primary_workspace
        Set
            active_code = c_cur_plan_code
        Where
            active_code = c_future_plan_code;

    End toggle_plan_future_to_curr;
    --
    Procedure rollover_n_open_planning(p_sysdate Date) As
        v_next_week_mon    Date;
        v_next_week_fri    Date;
        v_next_week_key_id Varchar2(8);

        rec_config_week    swp_config_weeks%rowtype;
    Begin
        --Close and toggle existing planning
        toggle_plan_future_to_curr(p_sysdate);

        v_next_week_mon    := iot_swp_common.get_monday_date(p_sysdate + 6);
        v_next_week_fri    := iot_swp_common.get_friday_date(p_sysdate + 6);

        v_next_week_mon    := trunc(v_next_week_mon);
        v_next_week_fri    := trunc(v_next_week_fri);

        v_next_week_key_id := dbms_random.string('X', 8);
        --Insert New Plan dates
        Insert Into swp_config_weeks(
            key_id,
            start_date,
            end_date,
            planning_flag,
            pws_open,
            ows_open,
            sws_open
        )
        Values(
            v_next_week_key_id,
            v_next_week_mon,
            v_next_week_fri,
            c_future_plan_code,
            c_plan_close_code,
            c_plan_close_code,
            c_plan_close_code
        );

        --Get current week key id
        Select
            *
        Into
            rec_config_week
        From
            swp_config_weeks
        Where
            key_id In (
                Select
                    key_id
                From
                    (
                        Select
                            key_id
                        From
                            swp_config_weeks
                        Where
                            key_id <> v_next_week_key_id
                        Order By start_date Desc
                    )
                Where
                    Rownum = 1
            );

        Insert Into swp_smart_attendance_plan(
            key_id,
            ws_key_id,
            empno,
            attendance_date,
            modified_on,
            modified_by,
            deskid,
            week_key_id
        )
        Select
            dbms_random.string('X', 10),
            a.ws_key_id,
            a.empno,
            trunc(a.attendance_date) + 7,
            p_sysdate,
            'Sys',
            a.deskid,
            v_next_week_key_id
        From
            swp_smart_attendance_plan a
        Where
            week_key_id = rec_config_week.key_id;
        --
        Delete
            From swp_smart_attendance_plan
        Where
            empno Not In (
                Select
                    empno
                From
                    ss_emplmast
                Where
                    status = 1
            )
            And week_key_id = v_next_week_key_id;
        Delete
            From swp_smart_attendance_plan
        Where
            attendance_date In (
                Select
                    trunc(holiday)
                From
                    ss_holidays
                Where
                    holiday Between v_next_week_mon And v_next_week_fri
            );
        --
        --
        --do snapshot of DESK+USER & DESK+ASSET & Also DESKLOCK mapping
        do_dms_snapshot(trunc(p_sysdate));
        ---

        do_dms_data_to_plan(v_next_week_key_id);
    End rollover_n_open_planning;

    --
    Procedure sp_configuration Is
        v_secondlast_workdate Date;
        v_sysdate             Date;
        v_fri_date            Date;
        v_is_second_last_day  Boolean;
        Type rec Is Record(
                work_date     Date,
                work_day_desc Varchar2(100),
                rec_num       Number
            );

        Type typ_tab_work_day Is Table Of rec;
        tab_work_day          typ_tab_work_day;
    Begin
        sp_add_new_joinees_to_pws;
        v_sysdate            := trunc(sysdate);
        v_fri_date           := iot_swp_common.get_friday_date(trunc(v_sysdate));
        --
        init_configuration(v_sysdate);

        v_is_second_last_day := fn_is_second_last_day_of_week(v_sysdate);

        If v_is_second_last_day Then --SECOND_LAST working day (THURSDAY)
            rollover_n_open_planning(v_sysdate);
            --v_sysdate EQUAL LAST working day "FRIDAY"
            --        ElsIf V_SYSDATE = tab_work_day(1).work_date Then --LAST working day
        Elsif v_sysdate = v_fri_date Then
            close_planning;
        Elsif to_char(v_sysdate, 'Dy') = 'Mon' Then
            toggle_plan_future_to_curr(v_sysdate);
        Else
            Null;
            --ToBeDecided
        End If;
    End sp_configuration;

End iot_swp_config_week;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_COMMON
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_COMMON" As

    Function fn_get_pws_text(
        p_pws_type_code Number
    ) Return Varchar2 As
        v_ret_val Varchar2(100);
    Begin
        If p_pws_type_code Is Null Or p_pws_type_code = -1 Then
            Return Null;
        End If;
        Select
            type_desc
        Into
            v_ret_val
        From
            swp_primary_workspace_types
        Where
            type_code = p_pws_type_code;
        Return v_ret_val;
    Exception
        When Others Then
            Return Null;
    End;

    Function fn_get_dept_group(
        p_costcode Varchar2
    ) Return Varchar2 As
        v_retval Varchar2(100);
    Begin
        Select
            group_name
        Into
            v_retval
        From
            ss_dept_grouping
        Where
            parent = p_costcode;
        Return v_retval;
    Exception
        When Others Then
            Return Null;
    End;

    Function get_emp_work_area(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2
    ) Return Varchar2 As
        v_count  Number;
        v_projno Varchar2(5);
        v_area   Varchar2(60);
    Begin

        Select
            Count(dapm.office || ' - ' || ep.projno || ' - ' || da.area_desc)
        Into
            v_count
        From
            swp_emp_proj_mapping      ep,
            dms.dm_desk_area_proj_map dapm,
            dms.dm_desk_areas         da
        Where
            ep.projno          = dapm.projno
            And dapm.area_code = da.area_key_id
            And ep.empno       = p_empno;

        If (v_count > 0) Then

            Select
                dapm.office || ' - ' || ep.projno || ' - ' || da.area_desc
            Into
                v_area
            From
                swp_emp_proj_mapping      ep,
                dms.dm_desk_area_proj_map dapm,
                dms.dm_desk_areas         da
            Where
                ep.projno          = dapm.projno
                And dapm.area_code = da.area_key_id
                And ep.empno       = p_empno
                And Rownum         = 1;

        Else
            Begin
                Select
                    da.area_desc
                Into
                    v_area
                From
                    dms.dm_desk_area_dept_map dad,
                    dms.dm_desk_areas         da,
                    ss_emplmast               e
                Where
                    dad.area_code = da.area_key_id
                    And e.assign  = dad.assign
                    And e.empno   = p_empno;

            Exception
                When Others Then
                    v_area := Null;
            End;
        End If;

        Return v_area;
    Exception
        When Others Then
            Return Null;
    End get_emp_work_area;

    Function get_emp_work_area_code(
        p_empno Varchar2
    ) Return Varchar2 As
        v_count     Number;
        v_projno    Varchar2(5);
        v_area_code Varchar2(3);
    Begin
        Select
            da.area_key_id
        Into
            v_area_code
        From
            dms.dm_desk_area_dept_map dad,
            dms.dm_desk_areas         da,
            ss_emplmast               e
        Where
            dad.area_code = da.area_key_id
            And e.assign  = dad.assign
            And e.empno   = p_empno;

        Return v_area_code;
    Exception
        When Others Then
            Return Null;
    End get_emp_work_area_code;

    Function get_desk_from_dms(
        p_empno In Varchar2
    ) Return Varchar2 As
        v_retval Varchar(50) := 'NA';
    Begin

        Select
        Distinct dmst.deskid As desk
        Into
            v_retval
        From
            dm_vu_emp_desk_map dmst
        Where
            dmst.empno = Trim(p_empno)
            And dmst.deskid Not Like 'H%';

        Return v_retval;
    Exception
        When Others Then
            Return Null;
    End get_desk_from_dms;

    Function get_swp_planned_desk(
        p_empno In Varchar2
    ) Return Varchar2 As
        v_retval Varchar(50) := 'NA';
    Begin

        Select
        Distinct deskid As desk
        Into
            v_retval
        From
            dms.dm_usermaster_swp_plan dmst
        Where
            dmst.empno = Trim(p_empno)
            And dmst.deskid Not Like 'H%';

        Return v_retval;
    Exception
        When Others Then
            Return Null;
    End get_swp_planned_desk;

    Function get_total_desk(
        p_work_area Varchar2,
        p_office    Varchar2,
        p_floor     Varchar2,
        p_wing      Varchar2
    ) Return Number As
        v_count Number := 0;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            dms.dm_deskmaster                         mast, dms.dm_desk_areas area
        Where
            mast.work_area       = p_work_area
            And area.area_key_id = mast.work_area
            And mast.office      = Trim(p_office)
            And mast.floor       = Trim(p_floor)
            And (mast.wing       = p_wing Or p_wing Is Null);

        Return v_count;
    End;

    Function get_occupied_desk(
        p_work_area Varchar2,
        p_office    Varchar2,
        p_floor     Varchar2,
        p_wing      Varchar2,
        p_date      Date Default Null
    ) Return Number As
        v_count Number := 0;
    Begin

        Select
            Count(*)
        Into
            v_count
        From
            dms.dm_deskmaster                         mast, dms.dm_desk_areas area
        Where
            mast.work_area        = p_work_area
            And area.area_key_id  = mast.work_area
            And Trim(mast.office) = Trim(p_office)
            And Trim(mast.floor)  = Trim(p_floor)
            And (mast.wing        = p_wing Or p_wing Is Null)
            And mast.deskid
            In (
                (
                    Select
                    Distinct swptbl.deskid
                    From
                        swp_smart_attendance_plan swptbl
                    Where
                        (trunc(attendance_date) = trunc(p_date) Or p_date Is Null)
                    Union
                    Select
                    Distinct c.deskid
                    From
                        dm_vu_emp_desk_map_swp_plan c
                )
            );
        Return v_count;
    End;

    Function get_monday_date(p_date Date) Return Date As
        v_day_num Number;
    Begin
        v_day_num := to_number(to_char(p_date, 'd'));
        If v_day_num <= 2 Then
            Return p_date + (2 - v_day_num);
        Else
            Return p_date - v_day_num + 2;
        End If;

    End;

    Function get_friday_date(p_date Date) Return Date As
        v_day_num Number;
    Begin
        v_day_num := to_char(p_date, 'd');

        Return p_date + (6 - v_day_num);

    End;

    Function is_emp_eligible_for_swp(
        p_empno Varchar2
    ) Return Varchar2
    As
        v_count Number;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            swp_emp_response
        Where
            empno        = p_empno
            And hr_apprl = 'OK';
        If v_count = 1 Then
            Return 'OK';
        Else
            Return 'KO';
        End If;
    End;

    Function get_default_costcode_hod_sec(
        p_hod_sec_empno Varchar2,
        p_assign_code   Varchar2 Default Null
    ) Return Varchar2
    As
        v_assign        Varchar2(4);
        v_hod_sec_empno Varchar2(5);
    Begin
        Select
            p_hod_sec_empno
        Into
            v_hod_sec_empno
        From
            ss_emplmast
        Where
            status    = 1
            And empno = lpad(p_hod_sec_empno, 5, '0');
        Select
            assign
        Into
            v_assign
        From
            (
                Select
                    assign
                From
                    (
                        Select
                            costcode As assign
                        From
                            ss_costmast
                        Where
                            hod = v_hod_sec_empno
                        Union
                        Select
                            parent As assign
                        From
                            ss_user_dept_rights
                        Where
                            empno = v_hod_sec_empno
                    )
                Where
                    assign = nvl(p_assign_code, assign)
                Order By assign
            )
        Where
            Rownum = 1;
        Return v_assign;
    Exception
        When Others Then
            Return Null;
    End;

    Function get_default_dept4plan_hod_sec(
        p_hod_sec_empno Varchar2,
        p_assign_code   Varchar2 Default Null
    ) Return Varchar2
    As
        v_assign        Varchar2(4);
        v_hod_sec_empno Varchar2(5);
    Begin
        Select
            p_hod_sec_empno
        Into
            v_hod_sec_empno
        From
            ss_emplmast
        Where
            status    = 1
            And empno = lpad(p_hod_sec_empno, 5, '0');
        Select
            assign
        Into
            v_assign
        From
            (
                Select
                    assign
                From
                    (
                        Select
                            parent As assign
                        From
                            ss_user_dept_rights                                   a, swp_include_assign_4_seat_plan b
                        Where
                            empno        = v_hod_sec_empno
                            And a.parent = b.assign
                        Union
                        Select
                            costcode As assign
                        From
                            ss_costmast                                   a, swp_include_assign_4_seat_plan b
                        Where
                            hod            = v_hod_sec_empno
                            And a.costcode = b.assign
                    )
                Where
                    assign = nvl(p_assign_code, assign)
                Order By assign
            )
        Where
            Rownum = 1;
        Return v_assign;
    Exception
        When Others Then
            Return Null;
    End;

    Function get_hod_sec_costcodes_csv(
        p_hod_sec_empno    Varchar2,
        p_assign_codes_csv Varchar2 Default Null
    ) Return Varchar2
    As
        v_assign        Varchar2(4);
        v_hod_sec_empno Varchar2(5);
        v_ret_val       Varchar2(4000);
    Begin
        Select
            p_hod_sec_empno
        Into
            v_hod_sec_empno
        From
            ss_emplmast
        Where
            status    = 1
            And empno = lpad(p_hod_sec_empno, 5, '0');
        If p_assign_codes_csv Is Null Then
            Select
                Listagg(assign, ',') Within
                    Group (Order By
                        assign)
            Into
                v_ret_val
            From
                (
                    Select
                        costcode As assign
                    From
                        ss_costmast
                    Where
                        hod = v_hod_sec_empno
                    Union
                    Select
                        parent As assign
                    From
                        ss_user_dept_rights
                    Where
                        empno = v_hod_sec_empno
                );
        Else
            Select
                Listagg(assign, ',') Within
                    Group (Order By
                        assign)
            Into
                v_ret_val
            From
                (
                    Select
                        costcode As assign
                    From
                        ss_costmast
                    Where
                        hod = v_hod_sec_empno
                    Union
                    Select
                        parent As assign
                    From
                        ss_user_dept_rights
                    Where
                        empno = v_hod_sec_empno
                )
            Where
                assign In (
                    Select
                        regexp_substr(p_assign_codes_csv, '[^,]+', 1, level) value
                    From
                        dual
                    Connect By
                        level <=
                        length(p_assign_codes_csv) - length(replace(p_assign_codes_csv, ',')) + 1
                );

        End If;
        Return v_ret_val;
    Exception
        When Others Then
            Return Null;
    End;

    Function is_emp_laptop_user(
        p_empno Varchar2
    ) Return Number
    As
        v_laptop_count Number;
    Begin
        v_laptop_count := itinv_stk.dist.is_laptop_user(p_empno);
        If v_laptop_count > 0 Then
            Return 1;
        Else
            Return 0;
        End If;
    End;

    Function csv_to_ary_grades(
        p_grades_csv Varchar2 Default Null
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        If p_grades_csv Is Null Then
            Open c For
                Select
                    grade_id grade
                From
                    ss_vu_grades
                Where
                    grade_id <> '-';
        Else
            Open c For
                Select
                    regexp_substr(p_grades_csv, '[^,]+', 1, level) grade
                From
                    dual
                Connect By
                    level <=
                    length(p_grades_csv) - length(replace(p_grades_csv, ',')) + 1;
        End If;
    End;

    Function is_desk_in_general_area(p_deskid Varchar2) Return Boolean

    As
        v_general_area Varchar2(4) := 'A002';
        v_count        Number;
    Begin
        --Check if the desk is General desk.
        Select
            Count(*)
        Into
            v_count
        From
            dms.dm_deskmaster d,
            dms.dm_desk_areas da
        Where
            deskid                = p_deskid
            And d.work_area       = da.area_key_id
            And da.area_catg_code = v_general_area;
        Return v_count = 1;

    End;

    Function fn_get_emp_pws(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_is_planning Boolean
    ) Return Number As
        v_plan_start_date Date;
        v_plan_end_date   Date;
        v_curr_start_date Date;
        v_curr_end_date   Date;
        v_planning_exists Varchar2(2);
        v_pws_open        Varchar2(2);
        v_sws_open        Varchar2(2);
        v_ows_open        Varchar2(2);
        v_msg_type        Varchar2(10);
        v_msg_text        Varchar2(1000);
        v_emp_pws         Number;
        v_friday_date     Date;
    Begin
        get_planning_week_details(
            p_person_id       => p_person_id,
            p_meta_id         => p_meta_id,
            p_plan_start_date => v_plan_start_date,
            p_plan_end_date   => v_plan_end_date,
            p_curr_start_date => v_curr_start_date,
            p_curr_end_date   => v_curr_end_date,
            p_planning_exists => v_planning_exists,
            p_pws_open        => v_pws_open,
            p_sws_open        => v_sws_open,
            p_ows_open        => v_ows_open,
            p_message_type    => v_msg_type,
            p_message_text    => v_msg_text

        );
        If p_is_planning Then
            If v_planning_exists != 'OK' Then
                Return -1;
            End If;
            v_friday_date := v_plan_end_date;
        Else
            v_friday_date := v_curr_end_date;
        End If;
        Begin
            Select
                a.primary_workspace
            Into
                v_emp_pws
            From
                swp_primary_workspace a
            Where
                a.empno             = p_empno
                And
                trunc(a.start_date) = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = a.empno
                        And b.start_date <= v_friday_date
                );
            Return v_emp_pws;
        Exception
            When Others Then
                Return Null;
        End;
    End;

    Function fn_get_emp_pws_planning(
        p_empno Varchar2 Default Null
    ) Return Varchar2 As
        v_emp_pws Number;
    Begin
        If p_empno Is Null Then
            Return Null;
        End If;
        Select
            a.primary_workspace
        Into
            v_emp_pws
        From
            swp_primary_workspace a
        Where
            a.empno             = p_empno
            And
            trunc(a.start_date) = (
                Select
                    Max(trunc(start_date))
                From
                    swp_primary_workspace b
                Where
                    b.empno = a.empno
            );
        Return fn_get_pws_text(nvl(v_emp_pws, -1));
    Exception
        When Others Then
            Return Null;
    End;

    Function fn_can_do_desk_plan_4_emp(p_empno Varchar2) Return Boolean As
        v_count Number;
    Begin

        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast                    e,
            swp_include_assign_4_seat_plan sp
        Where
            empno        = p_empno
            And e.assign = sp.assign;
        Return v_count > 0;
    End;

    Function fn_is_present_4_swp(
        p_empno Varchar2,
        p_date  Date
    ) Return Number
    As
        v_count Number;
    Begin

        --Punch Count
        Select
            Count(*)
        Into
            v_count
        From
            ss_punch
        Where
            empno     = p_empno
            And pdate = p_date;
        If v_count > 0 Then
            Return 1;
        End If;

        --Approved Leave
        Select
            Count(*)
        Into
            v_count
        From
            ss_leaveledg
        Where
            empno           = p_empno
            And bdate <= p_date
            And nvl(edate, bdate) >= p_date
            And (adj_type   = 'LA'
                Or adj_type = 'LC');
        If v_count > 0 Then
            Return 1;
        End If;

        --Forgot Punch
        Select
            Count(*)
        Into
            v_count
        From
            ss_ondutyapp
        Where
            empno     = p_empno
            And pdate = p_date
            And type  = 'IO';
        If v_count > 0 Then
            Return 1;
        End If;

        --OnTour Deputation
        Select
            Count(*)
        Into
            v_count
        From
            ss_depu
        Where
            empno             = Trim(p_empno)
            And bdate <= p_date
            And nvl(edate, bdate) >= p_date
            And (hod_apprl    = 1
                And hrd_apprl = 1)
            And type <> 'RW';
        If v_count > 0 Then
            Return 1;
        End If;
        Return 0;
    End;

    Function get_emp_is_eligible_4swp(
        p_empno Varchar2 Default Null
    ) Return Varchar2 As
    Begin
        If Trim(p_empno) Is Null Then
            Return Null;
        End If;
        Return is_emp_eligible_for_swp(p_empno);
    End;

    Function is_emp_dualmonitor_user(
        p_empno Varchar2 Default Null
    ) Return Number As
        v_count Number;
    Begin
        Select
            Count(da.assetid)
        Into
            v_count
        From
            dms.dm_deskallocation da,
            dms.dm_usermaster     um,
            dms.dm_assetcode      ac
        Where
            um.deskid             = da.deskid
            And um.empno          = p_empno
            And ac.sub_asset_type = 'IT0MO'
            And da.assetid        = ac.barcode
            And um.deskid Not Like 'H%';
        If v_count >= 2 Then
            Return 1;
        Else
            Return 0;

        End If;

        --
        Select
            Count(da.assetid)
        Into
            v_count
        From
            dms.dm_deskallocation da,
            dms.dm_usermaster     um,
            dms.dm_assetcode      ac
        Where
            um.deskid             = da.deskid
            And um.empno          = p_empno
            And ac.sub_asset_type = 'IT0MO'
            And da.assetid        = ac.barcode
            And um.deskid Like 'H%';
        If v_count >= 2 Then
            Return 1;
        Else
            Return 0;

        End If;

    Exception
        When Others Then
            Return 0;
    End;

    Function get_emp_projno_desc(
        p_empno Varchar2
    ) Return Varchar2 As
        v_projno    Varchar2(5);
        v_proj_name ss_projmast.name%Type;
    Begin
        Select
            projno
        Into
            v_projno
        From
            swp_emp_proj_mapping
        Where
            empno = p_empno;
        Select
        Distinct name
        Into
            v_proj_name
        From
            ss_projmast
        Where
            proj_no = v_projno;
        Return v_projno || ' - ' || v_proj_name;
    Exception
        When Others Then
            Return '';
    End;

    Function fn_get_attendance_status(
        p_empno Varchar2,
        p_date  Date
    ) Return Varchar2 As
        v_count        Number;
        v_punch_exists Boolean;
        row_depu_tour  ss_depu%rowtype;
        row_onduty     ss_ondutyapp%rowtype;
        row_leave      ss_leaveapp%rowtype;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            ss_integratedpunch

        Where
            empno     = p_empno
            And pdate = p_date
            And mach <> 'WFH0';

        If v_count > 0 Then
            Return 'Punch exits';
        End If;
        
        --Check Leave
        Begin
            Select
                *
            Into
                row_leave
            From
                ss_leaveapp
            Where
                empno = p_empno
                And p_date Between bdate And nvl(edate, bdate);
            If row_leave.hrd_apprl = 1 Then
                Return 'Leave';
            Else
                Return 'Leave applied';
            End If;
        Exception
            When Others Then
                Null;
        End;

        --Check deputation
        Begin
            Select
                *
            Into
                row_depu_tour
            From
                ss_depu
            Where
                type In ('TR', 'DP')
                and empno = p_empno
                And p_date Between bdate And edate;

            If row_depu_tour.hrd_apprl = 1 Then
                Return 'Tour-Deputation';
            Else
                Return 'Tour-Deputation applied';
            End If;
        Exception
            When Others Then
                Null;
        End;
        --Check Missed / In-Out punch onduty
        Begin
            Select
                *
            Into
                row_onduty
            From
                ss_ondutyapp
            Where
                type In (
                    'MP', 'IO'
                )
                And empno = p_empno
                And pdate = trunc(p_date);
            If row_onduty.hrd_apprl = 1 Then
                Return 'Onduty MP/IO';
            Else
                Return 'Onduty MP/IO applied';

            End If;
        Exception
            When Others Then
                Null;
        End;
        
        Return 'Punch not exists';
    Exception
        When Others Then
            Return 'ERR';
    End;

    --

    Procedure sp_get_emp_workspace_details(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,
        p_empno                 Varchar2,
        p_current_pws       Out Number,
        p_planning_pws      Out Number,
        p_current_pws_text  Out Varchar2,
        p_planning_pws_text Out Varchar2,
        p_curr_desk_id      Out Varchar2,
        p_curr_office       Out Varchar2,
        p_curr_floor        Out Varchar2,
        p_curr_wing         Out Varchar2,
        p_curr_bay          Out Varchar2,
        p_plan_desk_id      Out Varchar2,
        p_plan_office       Out Varchar2,
        p_plan_floor        Out Varchar2,
        p_plan_wing         Out Varchar2,
        p_plan_bay          Out Varchar2,
        p_message_type      Out Varchar2,
        p_message_text      Out Varchar2
    ) As
        v_current_pws     Number;
        v_planning_pws    Number;
        v_plan_start_date Date;
        v_plan_end_date   Date;
        v_curr_start_date Date;
        v_curr_end_date   Date;
        v_planning_exists Varchar2(2);
        v_pws_open        Varchar2(2);
        v_sws_open        Varchar2(2);
        v_ows_open        Varchar2(2);
        v_msg_type        Varchar2(10);
        v_msg_text        Varchar2(1000);
        v_emp_pws         Number;
        v_friday_date     Date;
    Begin
        get_planning_week_details(
            p_person_id       => p_person_id,
            p_meta_id         => p_meta_id,
            p_plan_start_date => v_plan_start_date,
            p_plan_end_date   => v_plan_end_date,
            p_curr_start_date => v_curr_start_date,
            p_curr_end_date   => v_curr_end_date,
            p_planning_exists => v_planning_exists,
            p_pws_open        => v_pws_open,
            p_sws_open        => v_sws_open,
            p_ows_open        => v_ows_open,
            p_message_type    => v_msg_type,
            p_message_text    => v_msg_text

        );

        p_current_pws       := fn_get_emp_pws(
                                   p_person_id   => p_person_id,
                                   p_meta_id     => p_meta_id,
                                   p_empno       => p_empno,
                                   p_is_planning => false
                               );
        p_planning_pws      := fn_get_emp_pws(
                                   p_person_id   => p_person_id,
                                   p_meta_id     => p_meta_id,
                                   p_empno       => p_empno,
                                   p_is_planning => true
                               );
        p_current_pws_text  := fn_get_pws_text(p_current_pws);
        p_planning_pws_text := fn_get_pws_text(p_planning_pws);
        If p_current_pws = 1 Then --Office
            Begin
                Select
                    u.deskid,
                    dm.office,
                    dm.floor,
                    dm.wing,
                    dm.bay
                Into
                    p_curr_desk_id,
                    p_curr_office,
                    p_curr_floor,
                    p_curr_wing,
                    p_curr_bay
                From
                    dms.dm_usermaster u,
                    dms.dm_deskmaster dm
                Where
                    u.empno      = p_empno
                    And u.deskid = dm.deskid;
            Exception
                When Others Then
                    Null;
            End;
            /*
        Elsif p_current_pws = 2 Then --SMART
            p_curr_sws := iot_swp_smart_workspace_qry.fn_emp_week_attend_planning(
                              p_person_id => p_person_id,
                              p_meta_id   => p_meta_id,
                              p_empno     => p_empno,
                              p_date      => v_curr_start_date
                          );
*/
        End If;

        If p_planning_pws = 1 Then --Office
            Begin
                Select
                    u.deskid,
                    dm.office,
                    dm.floor,
                    dm.wing,
                    dm.bay
                Into
                    p_plan_desk_id,
                    p_plan_office,
                    p_plan_floor,
                    p_plan_wing,
                    p_plan_bay
                From
                    dms.dm_usermaster_swp_plan u,
                    dms.dm_deskmaster          dm
                Where
                    u.empno      = p_empno
                    And u.deskid = dm.deskid;
            Exception
                When Others Then
                    Null;
            End;
            /*
        Elsif p_planning_pws = 2 Then --SMART
            p_plan_sws := iot_swp_smart_workspace_qry.fn_emp_week_attend_planning(
                              p_person_id => p_person_id,
                              p_meta_id   => p_meta_id,
                              p_empno     => p_empno,
                              p_date      => v_plan_start_date
                          );
*/
        End If;
    End;

    Procedure sp_emp_office_workspace(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2,

        p_office       Out Varchar2,
        p_floor        Out Varchar2,
        p_wing         Out Varchar2,
        p_desk         Out Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2

    ) As
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        v_empno        := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;

        Select
        Distinct
            'P_Office' As p_office,
            'P_Floor'  As p_floor,
            'P_Desk'   As p_desk,
            'P_Wing'   As p_wing
        Into
            p_office,
            p_floor,
            p_wing,
            p_desk
        From
            dual;

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End sp_emp_office_workspace;

    Procedure sp_primary_workspace(
        p_person_id                   Varchar2,
        p_meta_id                     Varchar2,
        p_empno                       Varchar2 Default Null,

        p_current_workspace_text  Out Varchar2,
        p_current_workspace_val   Out Varchar2,
        p_current_workspace_date  Out Varchar2,

        p_planning_workspace_text Out Varchar2,
        p_planning_workspace_val  Out Varchar2,
        p_planning_workspace_date Out Varchar2,

        p_message_type            Out Varchar2,
        p_message_text            Out Varchar2

    ) As
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        If p_empno Is Not Null Then
            v_empno := p_empno;
        Else
            v_empno := get_empno_from_meta_id(p_meta_id);
        End If;

        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
        End If;
        Begin
            Select
            Distinct
                a.primary_workspace As p_primary_workspace_val,
                b.type_desc         As p_primary_workspace_text,
                a.start_date        As p_primary_workspace_date
            Into
                p_current_workspace_val,
                p_current_workspace_text,
                p_current_workspace_date
            From
                swp_primary_workspace       a,
                swp_primary_workspace_types b
            Where
                a.primary_workspace = b.type_code
                And a.empno         = v_empno
                And a.active_code   = 1;
        Exception
            When Others Then
                p_current_workspace_text := 'NA';
        End;

        Begin
            Select
            Distinct
                a.primary_workspace As p_primary_workspace_val,
                b.type_desc         As p_primary_workspace_text,
                a.start_date        As p_primary_workspace_date
            Into
                p_planning_workspace_val,
                p_planning_workspace_text,
                p_planning_workspace_date
            From
                swp_primary_workspace       a,
                swp_primary_workspace_types b
            Where
                a.primary_workspace = b.type_code
                And a.empno         = v_empno
                And a.active_code   = 2;
        Exception
            When Others Then
                p_planning_workspace_text := 'NA';
        End;
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End sp_primary_workspace;

    Procedure get_planning_week_details(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,
        p_plan_start_date Out Date,
        p_plan_end_date   Out Date,
        p_curr_start_date Out Date,
        p_curr_end_date   Out Date,
        p_planning_exists Out Varchar2,
        p_pws_open        Out Varchar2,
        p_sws_open        Out Varchar2,
        p_ows_open        Out Varchar2,
        p_message_type    Out Varchar2,
        p_message_text    Out Varchar2

    ) As
        v_count         Number;
        v_rec_plan_week swp_config_weeks%rowtype;
        v_rec_curr_week swp_config_weeks%rowtype;
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            swp_config_weeks
        Where
            planning_flag = 2;
        If v_count = 0 Then
            p_pws_open        := 'KO';
            p_sws_open        := 'KO';
            p_ows_open        := 'KO';
            p_planning_exists := 'KO';
        Else
            Select
                *
            Into
                v_rec_plan_week
            From
                swp_config_weeks
            Where
                planning_flag = 2;

            p_plan_start_date := v_rec_plan_week.start_date;
            p_plan_end_date   := v_rec_plan_week.end_date;
            p_planning_exists := 'OK';
            p_pws_open        := Case
                                     When nvl(v_rec_plan_week.pws_open, 0) = 1 Then
                                         'OK'
                                     Else
                                         'KO'
                                 End;
            p_sws_open        := Case
                                     When nvl(v_rec_plan_week.sws_open, 0) = 1 Then
                                         'OK'
                                     Else
                                         'KO'
                                 End;
            p_ows_open        := Case
                                     When nvl(v_rec_plan_week.ows_open, 0) = 1 Then
                                         'OK'
                                     Else
                                         'KO'
                                 End;
        End If;
        Select
            *
        Into
            v_rec_curr_week
        From
            (
                Select
                    *
                From
                    swp_config_weeks
                Where
                    planning_flag <> 2
                Order By start_date Desc
            )
        Where
            Rownum = 1;

        p_curr_start_date := v_rec_curr_week.start_date;
        p_curr_end_date   := v_rec_curr_week.end_date;

        p_message_type    := 'OK';
        p_message_text    := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End get_planning_week_details;

End iot_swp_common;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_AUTO_ASSIGN_DESK
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_AUTO_ASSIGN_DESK" As

    Function fn_get_available_smart_desk(
        p_date   Date,
        p_office Varchar2 Default Null
    ) Return Varchar2 As
        v_ret_desk_id     Varchar2(7);
        v_smart_area_code Varchar2(4) := 'A001';
    Begin
        Select
            deskid
        Into
            v_ret_desk_id
        From
            (
                Select
                    deskid
                From
                    dms.dm_deskmaster
                Where
                    Trim(office) = nvl(Trim(p_office), Trim(office))
                    And work_area In (
                        Select
                            area_key_id
                        From
                            dms.dm_desk_areas
                        Where
                            area_catg_code = v_smart_area_code
                    )
                    And deskid Not In (
                        Select
                            deskid
                        From
                            swp_smart_attendance_plan
                        Where
                            trunc(attendance_date) = p_date
                    )
                Order By deskid
            )
        Where
            Rownum = 1;
        Return v_ret_desk_id;
    Exception
        When Others Then
            Return Null;
    End;

    Function fn_get_available_dept_desk(
        p_area_code Varchar2,
        p_date      Date,
        p_office    Varchar2
    ) Return Varchar2 As
        v_deskid Varchar2(7);
    Begin
        Select
            deskid
        Into
            v_deskid
        From
            (

                Select
                    deskid
                From
                    dms.dm_deskmaster
                Where
                    Trim(office)  = Trim(p_office)
                    And work_area = Trim(p_area_code)
                    And deskid Not In (
                        Select
                            deskid
                        From
                            dms.dm_usermaster
                    )
                    And deskid Not In (
                        Select
                            deskid
                        From
                            dms.dm_desklock
                    )

                    And deskid Not In (
                        Select
                            deskid
                        From
                            swp_smart_attendance_plan
                        Where
                            trunc(attendance_date) = p_date
                    )
                Order By deskid
            )
        Where
            Rownum = 1;
        Return v_deskid;
    Exception
        When Others Then
            Return Null;
    End;

    Procedure assign_sws_desk(
        p_empno  Varchar2,
        p_date   Date,
        p_deskid Varchar2
    ) As
        v_message_type Varchar2(10);
        v_message_text Varchar2(1000);
    Begin
        iot_swp_smart_workspace.sp_sys_assign_sws_desk(
            p_empno           => p_empno,
            p_attendance_date => p_date,
            p_deskid          => p_deskid,
            p_message_type    => v_message_type,
            p_message_text    => v_message_text
        );
    End;

    Procedure sp_assign_desk_to_sws_tf_emp(
        p_config_row swp_config_weeks%rowtype
    ) As
        Cursor cur_tf_emp_list(cp_office Varchar2) Is
            Select
                pws.empno,
                e.name,
                ep.projno,
                apm.office
            From
                swp_primary_workspace     pws,
                swp_emp_proj_mapping      ep,
                ss_emplmast               e,
                dms.dm_desk_area_proj_map apm
            Where
                pws.empno                 = ep.empno
                And e.empno               = pws.empno
                And e.status              = 1
                And apm.office            = cp_office
                And e.emptype In (
                    Select
                        emptype
                    From
                        swp_include_emptype
                )
                And e.assign Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                And pws.primary_workspace = 2
                And ep.projno             = apm.projno
                And trunc(pws.start_date) = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = pws.empno
                        And b.start_date <= p_config_row.end_date
                )
                And pws.empno Not In (
                    Select
                        empno
                    From
                        swp_smart_attendance_plan
                    Where
                        attendance_date Between p_config_row.start_date And p_config_row.end_date
                )
                And e.grade <> 'X1';

        Type typ_tab_tf_emp_list Is Table Of cur_tf_emp_list%rowtype;
        tab_tf_emp_list typ_tab_tf_emp_list;

        Cursor cur_week_dates Is
            Select
                d_date, 0 is_full
            From
                ss_days_details dd
            Where
                d_date Between p_config_row.start_date And p_config_row.end_date
                And dd.d_date Not In (
                    Select
                        holiday
                    From
                        ss_holidays
                )
            Order By
                d_date;

        Type typ_tab_week_dates Is Table Of cur_week_dates%rowtype;
        tab_week_dates  typ_tab_week_dates;

        Cursor cur_tf_office_list Is
            Select
            Distinct office
            From
                dms.dm_desk_area_proj_map
            Where
                is_active = 1;
        Type typ_tab_tf_office_list Is Table Of cur_tf_office_list%rowtype;

        v_start_cntr    Number := 1;
        v_cur_cntr      Number;
        v_found_cntr    Number := 0;
        v_desk_id       dms.dm_deskmaster.deskid%Type;
    Begin

        If cur_week_dates%isopen Then
            Close cur_week_dates;
        End If;
        Open cur_week_dates;
        Fetch cur_week_dates Bulk Collect Into tab_week_dates Limit 5;

        For task_force_office_row In cur_tf_office_list
        --1st Loop
        Loop
            v_start_cntr := 1;
            v_cur_cntr   := 0;
            If cur_tf_emp_list%isopen Then
                Close cur_tf_emp_list;
            End If;
            Open cur_tf_emp_list(task_force_office_row.office);
            --2nd Loop
            Loop
                Fetch cur_tf_emp_list Bulk Collect Into tab_tf_emp_list Limit 50;
                --3rd Loop
                For i In 1..tab_tf_emp_list.count
                Loop
                    --4th Loop
                    For ii In v_start_cntr..tab_week_dates.count
                    Loop
                        v_cur_cntr := ii;
                        v_desk_id  := Null;
                        If tab_week_dates(ii).is_full = 1 Then
                            Continue;
                        End If;
                        v_desk_id  := fn_get_available_smart_desk(tab_week_dates(ii).d_date, task_force_office_row.office);
                        If v_desk_id Is Null Then
                            tab_week_dates(ii).is_full := 1;
                            Continue;
                        End If;
                        assign_sws_desk(tab_tf_emp_list(i).empno, tab_week_dates(ii).d_date, v_desk_id);
                        Exit;
                    End Loop;
                    --4th Loop End
                    If v_cur_cntr In (tab_week_dates.count, 0) Then
                        v_start_cntr := 1;
                    Else
                        v_start_cntr := v_cur_cntr + 1;
                    End If;
                End Loop;
                Exit When cur_tf_emp_list%notfound;

                --3rd Loop End
                --
            End Loop;
            --2nd Loop End
            --
            Close cur_week_dates;
        End Loop;
        --1st Loop End
        --
    End;

    Procedure sp_assign_desk_to_sws_gen(
        p_config_row swp_config_weeks%rowtype
    ) As
        Cursor cur_emp_list Is

            Select
                pws.empno,
                e.name,
                e.parent,
                e.assign,
                pws.primary_workspace,
                e.emptype,
                e.status
            From
                swp_primary_workspace pws,
                ss_emplmast           e
            Where
                pws.empno                 = e.empno
                And e.empno               = pws.empno
                And e.status              = 1
                And e.emptype In (
                    Select
                        emptype
                    From
                        swp_include_emptype
                )
                And e.assign Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                And pws.primary_workspace = 2

                And trunc(pws.start_date) = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = pws.empno
                        And b.start_date <= p_config_row.end_date
                )

                And pws.empno Not In (
                    Select
                        empno
                    From
                        swp_smart_attendance_plan
                    Where
                        attendance_date Between p_config_row.start_date And p_config_row.end_date
                )
                And e.grade <> 'X1';

        Cursor cur_week_dates Is
            Select
                d_date, 0 is_full
            From
                ss_days_details dd
            Where
                d_date Between p_config_row.start_date And p_config_row.end_date
                And dd.d_date Not In (
                    Select
                        holiday
                    From
                        ss_holidays
                )
            Order By
                d_date;

        Type typ_tab_week_dates Is Table Of cur_week_dates%rowtype;
        tab_week_dates typ_tab_week_dates;

        Type typ_tab_emp Is Table Of cur_emp_list%rowtype;
        tab_emp        typ_tab_emp;
        v_start_cntr   Number := 1;
        v_cur_cntr     Number;
        v_desk_id      Varchar2(7);
    Begin

        Open cur_week_dates;
        Fetch cur_week_dates Bulk Collect Into tab_week_dates Limit 5;

        If cur_emp_list%isopen Then
            Close cur_emp_list;
        End If;
        Open cur_emp_list;
        --1nd Loop infinite loop
        Loop
            Fetch cur_emp_list Bulk Collect Into tab_emp Limit 50;
            --2rd Loop
            For i In 1..tab_emp.count
            Loop
                --3th Loop
                For ii In v_start_cntr..tab_week_dates.count
                Loop
                    v_cur_cntr := ii;
                    v_desk_id  := Null;
                    If tab_week_dates(ii).is_full = 1 Then
                        Continue;
                    End If;

                    v_desk_id  := fn_get_available_smart_desk(tab_week_dates(ii).d_date, Null);

                    If v_desk_id Is Null Then
                        tab_week_dates(ii).is_full := 1;
                        Continue;
                    End If;
                    assign_sws_desk(
                        tab_emp(i).empno,
                        tab_week_dates(ii).d_date,
                        v_desk_id
                    );
                    Exit;
                End Loop;
                --3th Loop End
                If v_cur_cntr In (tab_week_dates.count, 0) Then
                    v_start_cntr := 1;
                Else
                    v_start_cntr := v_cur_cntr + 1;
                End If;
            End Loop;
            --2rd Loop end

            --To exit infinite loop
            Exit When cur_emp_list%notfound;
        End Loop;
        --1nd Loop end
    End;

    Procedure sp_assign_desk_to_sws_deptemp(
        p_config_row swp_config_weeks%rowtype
    ) As
        Cursor cur_deptemp_list(
            cp_area_code   Varchar2,
            cp_office      Varchar2,
            cp_friday_date Date
        ) Is
            Select
                pws.empno,
                e.name,
                e.parent,
                e.assign,
                pws.primary_workspace,
                e.emptype,
                e.status
            From
                swp_primary_workspace pws,
                ss_emplmast           e
            Where
                pws.empno                 = e.empno
                And e.empno               = pws.empno
                And e.status              = 1
                And e.emptype In (
                    Select
                        emptype
                    From
                        swp_include_emptype
                )
                And e.assign Not In (
                    Select
                        assign
                    From
                        swp_exclude_assign
                )
                And pws.primary_workspace = 2
                And pws.empno Not In (
                    Select
                        empno
                    From
                        swp_emp_proj_mapping
                )

                And trunc(pws.start_date) = (
                    Select
                        Max(trunc(start_date))
                    From
                        swp_primary_workspace b
                    Where
                        b.empno = pws.empno
                        And b.start_date <= p_config_row.end_date
                )

                And pws.empno Not In (
                    Select
                        empno
                    From
                        swp_smart_attendance_plan
                    Where
                        attendance_date Between p_config_row.start_date And p_config_row.end_date
                )
                And e.assign In (
                    Select
                        assign
                    From
                        dms.dm_desk_area_dept_map
                    Where
                        area_code  = cp_area_code
                        And office = cp_office
                )
                And e.grade <> 'X1'
            Order By
                e.assign,
                pws.empno;
        Type typ_tab_deptemp Is Table Of cur_deptemp_list%rowtype;
        tab_deptemp     typ_tab_deptemp;

        Cursor cur_week_dates Is
            Select
                d_date, 0 is_full
            From
                ss_days_details dd
            Where
                d_date Between p_config_row.start_date And p_config_row.end_date
                And dd.d_date Not In (
                    Select
                        holiday
                    From
                        ss_holidays
                )
            Order By
                d_date;

        Type typ_tab_week_dates Is Table Of cur_week_dates%rowtype;
        tab_week_dates  typ_tab_week_dates;

        Cursor cur_dept_area_list Is
            Select
            Distinct
                area_code, office
            From
                dms.dm_desk_area_dept_map
            Order By
                office,
                area_code;
        v_start_cntr    Number := 1;
        v_cur_cntr      Number;
        v_desk_id       Varchar2(7);

        rec_config_week swp_config_weeks%rowtype;

    Begin

        Open cur_week_dates;
        Fetch cur_week_dates Bulk Collect Into tab_week_dates Limit 5;

        --1st Loop
        For dept_area_list_row In cur_dept_area_list
        Loop
            If cur_deptemp_list%isopen Then
                Close cur_deptemp_list;
            End If;
            Open cur_deptemp_list(dept_area_list_row.area_code, dept_area_list_row.office, rec_config_week.end_date);
            --2nd Loop infinite loop
            Loop
                Fetch cur_deptemp_list Bulk Collect Into tab_deptemp Limit 50;
                --3rd Loop
                For i In 1..tab_deptemp.count
                Loop
                    --4th Loop
                    For ii In v_start_cntr..tab_week_dates.count
                    Loop
                        v_cur_cntr := ii;
                        v_desk_id  := Null;
                        If tab_week_dates(ii).is_full = 1 Then
                            Continue;
                        End If;
                        v_desk_id  := fn_get_available_dept_desk(dept_area_list_row.area_code, tab_week_dates(ii).d_date,
                                                                 dept_area_list_row.office);
                        If v_desk_id Is Null Then
                            v_desk_id := fn_get_available_smart_desk(tab_week_dates(ii).d_date, dept_area_list_row.office);
                        End If;

                        If v_desk_id Is Null Then
                            tab_week_dates(ii).is_full := 1;
                            Continue;
                        End If;
                        assign_sws_desk(tab_deptemp(i).empno, tab_week_dates(ii).d_date,
                                        v_desk_id);
                        Exit;
                    End Loop;
                    --4th Loop End
                    If v_cur_cntr In (tab_week_dates.count, 0) Then
                        v_start_cntr := 1;
                    Else
                        v_start_cntr := v_cur_cntr + 1;
                    End If;
                End Loop;
                --3rd Loop end

                --To exit infinite loop
                Exit When cur_deptemp_list%notfound;
            End Loop;
            --2nd Loop end
        End Loop;
        --1st Loop end
    End;

    Procedure sp_auto_generate_plan As
        cur_sws_rows      Sys_Refcursor;
        cur_emp_week_plan Sys_Refcursor;
        row_config_week   swp_config_weeks%rowtype;
        v_mail_body       Varchar2(4000);
        v_day_row         Varchar2(300);
        v_emp_mail        Varchar2(100);
        v_msg_type        Varchar2(15);
        v_msg_text        Varchar2(1000);
        v_emp_desk        Varchar2(10);
        rec_sws_plan      typ_rec_sws;
        rec_pws_plan      typ_rec_pws;
        v_count           Number;
    Begin
        Select
            *
        Into
            row_config_week
        From
            swp_config_weeks
        Where
            planning_flag = 2;

        --XXXXXXXXXXXX--
        sp_assign_desk_to_sws_deptemp(row_config_week);
        --XXXXXXXXXXXX--

        --XXXXXXXXXXXX--
        sp_assign_desk_to_sws_tf_emp(row_config_week);
        --XXXXXXXXXXXX--

        --XXXXXXXXXXXX--
        sp_assign_desk_to_sws_gen(row_config_week);
        --XXXXXXXXXXXX--
        
        Delete
            From swp_smart_attendance_plan
        Where
            empno In (
                Select
                    empno
                From
                    swp_exclude_emp
                    where row_config_week.start_date between start_date and end_date
                    or row_config_week.start_date between start_date and end_date
                    
            );
        Commit;
    End;

End;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_ATTENDANCE_EXCEPTION
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_ATTENDANCE_EXCEPTION" As
    c_ows_code Constant Number := 1;
    c_sws_code Constant Number := 2;
    Function fn_admin_ows(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,

        p_row_number  Number,
        p_page_length Number

    ) Return Sys_Refcursor As
        c          Sys_Refcursor;
        v_is_admin Number;
    Begin
        --v_is_admin := nvl(p_is_admin, 0);

        Open c For
            Select
                *
            From
                (
                    Select
                        empno,
                        name                               employee_name,
                        parent,
                        assign,
                        grade,
                        emptype,
                        email,
                        primary_workspace_text,
                        desk_id,
                        Case
                            When is_swp_absent = 0 Then
                                'Yes'
                            Else
                                'No'
                        End                                is_absent,
                        Row_Number() Over (Order By empno) As row_number,
                        Count(*) Over ()                   As total_row
                    From
                        (
                            Select
                                a.empno,
                                e.name,
                                e.parent,
                                e.assign,
                                e.grade,
                                e.emptype,
                                e.email,
                                wt.type_desc                                               primary_workspace_text,
                                iot_swp_common.get_desk_from_dms(a.empno)                  desk_id,
                                iot_swp_common.fn_is_present_4_swp(a.empno, trunc(p_date)) is_swp_absent
                            From
                                swp_primary_workspace       a,
                                ss_emplmast                 e,
                                swp_primary_workspace_types wt,
                                swp_include_emptype         et
                            Where
                                trunc(a.start_date)     = (
                                        Select
                                            Max(trunc(start_date))
                                        From
                                            swp_primary_workspace b
                                        Where
                                            b.empno = a.empno
                                            And b.start_date <= sysdate
                                    )
                                And a.empno             = e.empno
                                And e.emptype           = et.emptype
                                And status              = 1
                                And a.primary_workspace = wt.type_code
                                And a.primary_workspace = c_ows_code
                                and e.empno not in ('04132', '04600')
                        )
                    Where
                        is_swp_absent = 0
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End;

    Function fn_admin_sws(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,

        p_row_number  Number,
        p_page_length Number

    ) Return Sys_Refcursor As
        c          Sys_Refcursor;
        v_is_admin Number;
    Begin
        --v_is_admin := nvl(p_is_admin, 0);

        Open c For
            Select
                *
            From
                (
                    Select
                        empno,
                        name                               employee_name,
                        parent,
                        assign,
                        grade,
                        emptype,
                        primary_workspace_text,
                        desk_id,
                        Case
                            When is_swp_present = 1 Then
                                'Yes'
                            Else
                                'No'
                        End                                is_present,
                        Row_Number() Over (Order By empno) As row_number,
                        Count(*) Over ()                   As total_row
                    From
                        (
                            Select
                                a.empno,
                                e.name,
                                e.parent,
                                e.assign,
                                e.grade,
                                e.emptype,
                                wt.type_desc                                               primary_workspace_text,
                                iot_swp_common.get_desk_from_dms(a.empno)                  desk_id,
                                iot_swp_common.fn_is_present_4_swp(a.empno, trunc(p_date)) is_swp_present,
                                isldt(p_date,a.empno)                                      is_leave_depu_tour
                            From
                                swp_primary_workspace       a,
                                ss_emplmast                 e,
                                swp_primary_workspace_types wt,
                                swp_include_emptype         et
                            Where
                                trunc(a.start_date)     = (
                                        Select
                                            Max(trunc(start_date))
                                        From
                                            swp_primary_workspace b
                                        Where
                                            b.empno = a.empno
                                            And b.start_date <= sysdate
                                    )
                                And a.empno             = e.empno
                                And e.emptype           = et.emptype
                                And status              = 1
                                And a.primary_workspace = wt.type_code
                                And a.primary_workspace = c_sws_code
                                and e.empno not in ('04132', '04600')
                        )
                    Where
                        is_swp_present = 1
                        and is_leave_depu_tour = 0
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End;

    Function fn_ows(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,

        p_row_number  Number,
        p_page_length Number

    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_is_admin           Number;
        v_hod_sec_empno      Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_hod_sec_empno := get_empno_from_meta_id(p_meta_id);

        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        empno,
                        name                               employee_name,
                        parent,
                        assign,
                        grade,
                        emptype,
                        primary_workspace_text,
                        desk_id,
                        Case
                            When is_swp_absent = 0 Then
                                'Yes'
                            Else
                                'No'
                        End                                is_absent,
                        Row_Number() Over (Order By empno) As row_number,
                        Count(*) Over ()                   As total_row
                    From
                        (
                            Select
                                a.empno,
                                e.name,
                                e.parent,
                                e.assign,
                                e.grade,
                                e.emptype,
                                wt.type_desc                                               primary_workspace_text,
                                iot_swp_common.get_desk_from_dms(a.empno)                  desk_id,
                                iot_swp_common.fn_is_present_4_swp(a.empno, trunc(p_date)) is_swp_absent
                            From
                                swp_primary_workspace       a,
                                ss_emplmast                 e,
                                swp_primary_workspace_types wt,
                                swp_include_emptype         et
                            Where
                                trunc(a.start_date)     = (
                                        Select
                                            Max(trunc(start_date))
                                        From
                                            swp_primary_workspace b
                                        Where
                                            b.empno = a.empno
                                            And b.start_date <= sysdate
                                    )
                                And a.empno             = e.empno
                                And e.emptype           = et.emptype
                                And status              = 1
                                And a.primary_workspace = wt.type_code
                                And a.primary_workspace = c_ows_code
                                And e.assign In
                                (
                                    Select
                                        parent
                                    From
                                        ss_user_dept_rights a
                                    Where
                                        empno = v_hod_sec_empno
                                    Union
                                    Select
                                        costcode
                                    From
                                        ss_costmast a
                                    Where
                                        hod = v_hod_sec_empno
                                )
                                And e.assign Not In (
                                    Select
                                        assign
                                    From
                                        swp_exclude_assign
                                )
                        )
                    Where
                        is_swp_absent = 0
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End;

    Function fn_sws(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_date        Date,

        p_row_number  Number,
        p_page_length Number

    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_is_admin           Number;
        v_hod_sec_empno      Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_hod_sec_empno := get_empno_from_meta_id(p_meta_id);

        If v_hod_sec_empno = 'ERRRR'  Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Open c For
            Select
                *
            From
                (
                    Select
                        empno,
                        name                               employee_name,
                        parent,
                        assign,
                        grade,
                        emptype,
                        primary_workspace_text,
                        desk_id,
                        Case
                            When is_swp_present = 1 Then
                                'Yes'
                            Else
                                'No'
                        End                                is_present,
                        Row_Number() Over (Order By empno) As row_number,
                        Count(*) Over ()                   As total_row
                    From
                        (
                            Select
                                a.empno,
                                e.name,
                                e.parent,
                                e.assign,
                                e.grade,
                                e.emptype,
                                wt.type_desc                                               primary_workspace_text,
                                iot_swp_common.get_desk_from_dms(a.empno)                  desk_id,
                                iot_swp_common.fn_is_present_4_swp(a.empno, trunc(p_date)) is_swp_present,
                                isldt(p_date,a.empno)                                      is_leave_depu_tour
                            From
                                swp_primary_workspace       a,
                                ss_emplmast                 e,
                                swp_primary_workspace_types wt,
                                swp_include_emptype         et
                            Where
                                trunc(a.start_date)     = (
                                        Select
                                            Max(trunc(start_date))
                                        From
                                            swp_primary_workspace b
                                        Where
                                            b.empno = a.empno
                                            And b.start_date <= sysdate
                                    )
                                And a.empno             = e.empno
                                And e.emptype           = et.emptype
                                And status              = 1
                                And a.primary_workspace = wt.type_code
                                And a.primary_workspace = c_sws_code
                                And e.assign In
                                (
                                    Select
                                        parent
                                    From
                                        ss_user_dept_rights a
                                    Where
                                        empno = v_hod_sec_empno
                                    Union
                                    Select
                                        costcode
                                    From
                                        ss_costmast a
                                    Where
                                        hod = v_hod_sec_empno
                                )
                                And e.assign Not In (
                                    Select
                                        assign
                                    From
                                        swp_exclude_assign
                                )
                        )
                    Where
                        is_swp_present = 1
                        and is_leave_depu_tour = 0
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End;

End;
/
---------------------------
--New PACKAGE BODY
--IOT_SWP_ATTENDANCE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_ATTENDANCE" As

    Function fn_get_sws_attendance(
        p_date           Date,

        p_hod_sec_empno  Varchar2 Default Null,

        p_is_admin       Number   Default Null,

        p_generic_search Varchar2 Default Null,

        p_row_number     Number,
        p_page_length    Number

    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_sec_empno      Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(6000);

    Begin
        v_query := v_sws_attendance_query;
        If p_is_admin = 1 Then
            v_query := replace(v_query, '!ASSIGN_SUBQUERY!', '');
        Else
            v_query := replace(v_query, '!ASSIGN_SUBQUERY!', v_sub_query_assign);
        End If;
        Open c For v_query Using p_date, p_hod_sec_empno, p_row_number, p_page_length;
        Return c;

    End;

    Function fn_sws_attendance_all(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,

        p_date           Date,

        p_generic_search Varchar2 Default Null,

        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_sec_empno      Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(6000);
    Begin
        v_hod_sec_empno := get_empno_from_meta_id(p_meta_id);

        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Return fn_get_sws_attendance(
            p_date           => trunc(p_date),

            p_hod_sec_empno  => Null,

            p_is_admin       => 1,

            p_generic_search => p_generic_search,

            p_row_number     => p_row_number,
            p_page_length    => p_page_length

        );
    End;

    Function fn_sws_attendance(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,

        p_date           Date,

        p_generic_search Varchar2 Default Null,

        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_sec_empno      Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_query              Varchar2(6000);
    Begin
        v_hod_sec_empno := get_empno_from_meta_id(p_meta_id);

        If v_hod_sec_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Return fn_get_sws_attendance(
            p_date           => p_date,

            p_hod_sec_empno  => v_hod_sec_empno,

            p_is_admin       => 0,

            p_generic_search => p_generic_search,

            p_row_number     => p_row_number,
            p_page_length    => p_page_length

        );
    End;

End;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SWP_ACTION
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SWP_ACTION" As

    Procedure sp_add_atnd(
        p_person_id         Varchar2,
        p_meta_id           Varchar2,

        p_weekly_attendance typ_tab_string,
        p_empno             Varchar2,
        p_message_type Out  Varchar2,
        p_message_text Out  Varchar2
    ) As
        strsql         Varchar2(600);
        vcount         Number;
        v_ststue       Varchar2(5);
        -- 0 for delete only , 1 delete old and insert new
        v_mod_by_empno Varchar2(5);
        v_pk           Varchar2(10);
        v_fk           Varchar2(10);
        v_empno        Varchar2(5);
        v_atnd_date    Date;
        v_desk         Varchar2(20);
    Begin

        v_mod_by_empno := get_empno_from_meta_id(p_meta_id);

        If v_mod_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        Select
            Count(*)
        Into
            vcount
        From
            swp_primary_workspace
        Where
            Trim(empno)         = Trim(p_empno)
            And Trim(primary_workspace) = '2';

        If vcount = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number ' || p_empno;
            Return;
        End If;

        For i In 1..p_weekly_attendance.count
        Loop

            With
                csv As (
                    Select
                        p_weekly_attendance(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1))          empno,
                to_date(Trim(regexp_substr(str, '[^~!~]+', 1, 2))) atnd_date,
                Trim(regexp_substr(str, '[^~!~]+', 1, 3))          desk,
                Trim(regexp_substr(str, '[^~!~]+', 1, 4))          ststue
            Into
                v_empno, v_atnd_date, v_desk, v_ststue
            From
                csv;

            Delete
                From swp_smart_attendance_plan
            Where
                empno         = v_empno
                And attendance_date = v_atnd_date;

            If v_ststue = '1' Then

                v_pk := dbms_random.string('X', 10);

                Select
                    key_id
                Into
                    v_fk
                From
                    swp_primary_workspace
                Where
                    Trim(empno)         = Trim(p_empno)
                    And Trim(primary_workspace) = '2';

                Insert Into swp_smart_attendance_plan
                (
                    key_id,
                    ws_key_id,
                    empno,
                    attendance_date,
                    deskid,
                    modified_on,
                    modified_by
                )
                Values
                (
                    v_pk,
                    v_fk,
                    v_empno,
                    v_atnd_date,
                    v_desk,
                    sysdate,
                    v_mod_by_empno
                );

            End If;

        End Loop;
        Commit;

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;

    End sp_add_atnd;

End iot_swp_action;
/
---------------------------
--Changed PACKAGE BODY
--IOT_SELECT_LIST_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_SELECT_LIST_QRY" As

    Function fn_leave_type_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                leavetype   data_value_field,
                description data_text_field
            From
                ss_leavetype
            Where
                is_active = 1
            Order By
                leavetype;
        Return c;
    End fn_leave_type_list;

    Function fn_leave_types_for_leaveclaims(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                leavetype   data_value_field,
                description data_text_field
            From
                ss_leavetype
            Order By
                leavetype;
        Return c;
    End fn_leave_types_for_leaveclaims;

    Function fn_approvers_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                'None'          data_value_field,
                'Head Of Dept.' data_text_field
            From
                dual
            Union
            Select
                a.empno data_value_field,
                b.name  data_text_field
            From
                ss_lead_approver a,
                ss_emplmast      b
            Where
                a.empno      = b.empno
                And a.parent In
                (
                    Select
                        e.assign
                    From
                        ss_emplmast e
                    Where
                        e.metaid = p_meta_id
                )
                And b.status = 1;
        Return c;
    End;

    Function fn_onduty_types_list_4_user(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_group_no  Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                type        data_value_field,
                description data_text_field
            From
                ss_ondutymast
            Where
                is_active    = 1
                And group_no = p_group_no
            Order By
                sort_order;

        Return c;
    End;

    Function fn_onduty_types_list_4_filter(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                type        data_value_field,
                description data_text_field
            From
                ss_ondutymast
            Where
                is_active = 1
            Order By
                sort_order;

        Return c;
    End;

    Function fn_onduty_types_list_4_hr(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_group_no  Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                type        data_value_field,
                description data_text_field
            From
                ss_ondutymast
            Where
                group_no = p_group_no
            Order By
                sort_order;

        Return c;
    End;

    Function fn_employee_list_4_hr(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                (status = 1
                    Or nvl(dol, sysdate) > sysdate - 730)
            Order By
                empno;

        Return c;
    End;

    Function fn_emplist_4_mngrhod(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_mngr_empno         Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_mngr_empno := get_empno_from_meta_id(p_meta_id);
        If v_mngr_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status       = 1
                And (mngr    = v_mngr_empno
                    Or empno = v_mngr_empno)
            Order By
                empno;

        Return c;
    End;

    Function fn_emp_list_4_mngrhod_onbehalf(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                     Sys_Refcursor;
        v_mngr_onbehalf_empno Varchar2(5);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_mngr_onbehalf_empno := get_empno_from_meta_id(p_meta_id);
        If v_mngr_onbehalf_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
                And mngr In (
                    Select
                        mngr
                    From
                        ss_delegate
                    Where
                        empno = v_mngr_onbehalf_empno
                )
            Order By
                empno;

        Return c;
    End;

    Function fn_employee_list_4_secretary(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_secretary_empno    Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_secretary_empno := get_empno_from_meta_id(p_meta_id);
        If v_secretary_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                empno                  data_value_field,
                empno || ' - ' || name data_text_field
            From
                ss_emplmast
            Where
                status = 1
                And parent In (
                    Select
                        parent
                    From
                        ss_user_dept_rights
                    Where
                        empno = v_secretary_empno
                )
            Order By
                empno;

        Return c;
    End;

    Function fn_project_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                 Sys_Refcursor;
        v_empno           Varchar2(5);
        timesheet_allowed Number;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);

        Select
            n_timesheetallowed(v_empno)
        Into
            timesheet_allowed
        From
            dual;

        If (timesheet_allowed = 1) Then
            Open c For
                Select
                    projno                  data_value_field,
                    projno || ' - ' || name data_text_field
                From
                    ss_projmast
                Where
                    active = 1
                    And (
                        Select
                            n_timesheetallowed(v_empno)
                        From
                            dual
                    )      = 1;

            Return c;
        Else
            Open c For
                Select
                    'None' data_value_field,
                    'None' data_text_field
                From
                    dual;
            Return c;
        End If;
    End;

    Function fn_costcode_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c                 Sys_Refcursor;
        v_empno           Varchar2(5);
        timesheet_allowed Number;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);

        Open c For
            Select
                costcode                  data_value_field,
                costcode || ' - ' || name data_text_field
            From
                ss_costmast
            Where
                noofemps > 0;

        Return c;
    End;

    Function fn_emp_list_for_filter(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_list_for  Varchar2
    -- Lead / Hod /HR
    ) Return Sys_Refcursor As
        c               Sys_Refcursor;
        v_empno         Varchar2(5);
        v_list_for_lead Varchar2(4) := 'Lead';
        v_list_for_hod  Varchar2(4) := 'Hod';
        v_list_for_hr   Varchar2(4) := 'HR';

    Begin

        -- v_empno := get_empno_from_meta_id(p_meta_id);
        v_empno := '10426';

        If (p_list_for = v_list_for_lead) Then
            Open c For
                Select
                Distinct
                    e.empno                    data_value_field,
                    a.empno || ' - ' || e.name data_text_field
                From
                    ss_leaveapp                a, ss_emplmast e
                Where
                    a.empno              = e.empno
                    And e.status         = 1
                    And personid Is Not Null
                    And lead_apprl_empno = v_empno;

            Return c;

        Elsif (p_list_for = v_list_for_hod) Then
            Open c For
                Select
                Distinct
                    e.empno                    data_value_field,
                    a.empno || ' - ' || e.name data_text_field
                From
                    ss_leaveapp                a, ss_emplmast e
                Where
                    a.empno      = e.empno
                    And e.status = 1
                    And personid Is Not Null
                    And a.empno In
                    (
                        Select
                            empno
                        From
                            ss_emplmast
                        Where
                            mngr = Trim(v_empno)
                    );

            Return c;

        Elsif (p_list_for = v_list_for_hr) Then
            Open c For
                Select
                Distinct
                    e.empno                    data_value_field,
                    a.empno || ' - ' || e.name data_text_field
                From
                    ss_leaveapp                a, ss_emplmast e
                Where
                    a.empno      = e.empno
                    And e.status = 1
                    And personid Is Not Null
                    And (
                        Select
                            Count(empno)
                        From
                            ss_usermast
                        Where
                            empno      = Trim(v_empno)
                            And active = 1
                            And type   = 1
                    ) >= 1;

            Return c;

        Else
            Open c For
                Select
                    'None' data_value_field,
                    'None' data_text_field
                From
                    dual;
            Return c;
        End If;
    End;

    Function fn_emp_list_for_lead_filter(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c       Sys_Refcursor;
        v_empno Varchar2(5);
    Begin

        v_empno := get_empno_from_meta_id(p_meta_id);
        --v_empno := '10426';
        Open c For
            Select
            Distinct
                e.empno                    data_value_field,
                a.empno || ' - ' || e.name data_text_field
            From
                ss_leaveapp                a, ss_emplmast e
            Where
                a.empno              = e.empno
                And e.status         = 1
                And personid Is Not Null
                And lead_apprl_empno = v_empno;
        Return c;
    End;

    Function fn_emp_list_for_hod_filter(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c       Sys_Refcursor;
        v_empno Varchar2(5);
    Begin

        v_empno := get_empno_from_meta_id(p_meta_id);

        Open c For
            Select
            Distinct
                e.empno                    data_value_field,
                a.empno || ' - ' || e.name data_text_field
            From
                ss_leaveapp                a, ss_emplmast e
            Where
                a.empno      = e.empno
                And e.status = 1
                And personid Is Not Null
                And a.empno
                In
                (
                    Select
                        empno
                    From
                        ss_emplmast
                    Where
                        mngr = Trim(v_empno)
                );

        Return c;

    End;

    Function fn_emp_list_for_hr_filter(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return Sys_Refcursor As
        c       Sys_Refcursor;
        v_empno Varchar2(5);
    Begin

        v_empno := get_empno_from_meta_id(p_meta_id);

        Open c For
            Select
            Distinct
                e.empno                    data_value_field,
                a.empno || ' - ' || e.name data_text_field
            From
                ss_leaveapp                a, ss_emplmast e
            Where
                a.empno      = e.empno
                And e.status = 1
                And personid Is Not Null
                And (
                    Select
                        Count(empno)
                    From
                        ss_usermast
                    Where
                        empno      = Trim(v_empno)
                        And active = 1
                        And type   = 1
                ) >= 1;

        Return c;

    End;

End iot_select_list_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_PUNCH_DETAILS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_PUNCH_DETAILS" As

    Procedure calculate_weekly_cfwd_hrs(
        p_wk_bfwd_dhrs   Number,
        p_wk_dhrs        Number,
        p_lday_lcome_ego Number,
        p_fri_sl_app     Number,
        p_cfwd_dhrs Out  Number,
        p_pn_hrs    Out  Number
    )
    As
        v_wk_negative_delta Number;
    Begin
        v_wk_negative_delta := nvl(p_wk_bfwd_dhrs, 0) + nvl(p_wk_dhrs, 0);
        If v_wk_negative_delta >= 0 Then
            p_pn_hrs    := 0;
            p_cfwd_dhrs := 0;
            Return;
        End If;
        If p_fri_sl_app <> 1 Then
            p_pn_hrs := ceil((v_wk_negative_delta * -1) / 60);
            If p_pn_hrs Between 5 And 8 Then
                p_pn_hrs := 8;
            End If;

            If p_pn_hrs * 60 > v_wk_negative_delta * -1 Then
                p_cfwd_dhrs := 0;
            Else
                p_cfwd_dhrs := v_wk_negative_delta + p_pn_hrs * 60;
            End If;
        Elsif p_fri_sl_app = 1 Then
            If v_wk_negative_delta > p_lday_lcome_ego Then
                p_pn_hrs    := 0;
                p_cfwd_dhrs := v_wk_negative_delta;
            Elsif v_wk_negative_delta < p_lday_lcome_ego Then
                p_pn_hrs := ceil((v_wk_negative_delta + (p_lday_lcome_ego * -1)) * -1 / 60);
                If p_pn_hrs Between 5 And 8 Then
                    p_pn_hrs := 8;
                End If;
                If p_pn_hrs * 60 > v_wk_negative_delta * -1 Then
                    p_cfwd_dhrs := 0;
                Else
                    p_cfwd_dhrs := v_wk_negative_delta + p_pn_hrs * 60;
                End If;
            End If;
        End If;
        p_pn_hrs            := nvl(p_pn_hrs, 0) * 60;
    End;
    /*
        Function fn_punch_details_4_self(
            p_person_id Varchar2,
            p_meta_id   Varchar2,
            p_yyyymm    Varchar2
        ) Return Sys_Refcursor As
            v_start_date             Date;
            v_end_date               Date;
            v_max_punch              Number;
            v_empno                  Varchar2(5);
            v_prev_delta_hrs         Number;
            v_prev_cfwd_lwd_deltahrs Number;
            v_prev_lc_app_cntr       Number;
            c                        Sys_Refcursor;
            e_employee_not_found     Exception;
            Pragma exception_init(e_employee_not_found, -20001);
        Begin
            v_empno      := get_empno_from_meta_id(p_meta_id);
            If v_empno = 'ERRRR' Then
                Raise e_employee_not_found;
                Return Null;
            End If;
            v_end_date   := last_day(to_date(p_yyyymm, 'yyyymm'));
            v_start_date := n_getstartdate(to_char(v_end_date, 'mm'), to_char(v_end_date, 'yyyy'));

            v_max_punch  := n_maxpunch(v_empno, v_start_date, v_end_date);

            --n_cfwd_lwd_deltahrs(v_empno, to_date(p_yyyymm, 'yyyymm'), 0, v_prev_delta_hrs, v_prev_cfwd_lwd_deltahrs, v_prev_lc_app_cntr);

            Open c For
                Select
                    empno,
                    days,
                    wk_of_year,
                    penaltyhrs,
                    mdate,
                    sday,
                    d_date,
                    shiftcode,
                    islod,
                    issunday,
                    islwd,
                    islcapp,
                    issleaveapp,
                    is_absent,
                    slappcntr,

                    ego,
                    wrkhrs,
                    tot_punch_nos,
                    deltahrs,
                    extra_hours,
                    last_day_c_fwd_dhrs,
                    Sum(wrkhrs) Over (Partition By wk_of_year)   As sum_work_hrs,
                    Sum(deltahrs) Over (Partition By wk_of_year) As sum_delta_hrs,
                    0                                            bfwd_delta_hrs,
                    0                                            cfwd_delta_hrs,
                    0                                            penalty_leave_hrs
                From
                    (
                        Select
                            main_main_query.*,
                            n_otperiod(v_empno, d_date, shiftcode, deltahrs) As extra_hours,
                            Case
                                When islwd = 1 Then

                                    lastday_cfwd_dhrs1(
                                        p_deltahrs  => deltahrs,
                                        p_ego       => ego,
                                        p_slapp     => issleaveapp,
                                        p_slappcntr => slappcntr,
                                        p_islwd     => islwd
                                    )
                                Else
                                    0
                            End                                              As last_day_c_fwd_dhrs

                        From
                            (
                                Select
                                    main_query.*, n_deltahrs(v_empno, d_date, shiftcode, penaltyhrs) As deltahrs
                                From
                                    (
                                        Select
                                            v_empno                                                  As empno,
                                            to_char(d_date, 'dd')                                    As days,
                                            wk_of_year,
                                            penaltyleave1(

                                                latecome1(v_empno, d_date),
                                                earlygo1(v_empno, d_date),
                                                islastworkday1(v_empno, d_date),

                                                Sum(islcomeegoapp(v_empno, d_date))
                                                    Over ( Partition By wk_of_year Order By d_date
                                                        Range Between Unbounded Preceding And Current Row),

                                                n_sum_slapp_count(v_empno, d_date),

                                                islcomeegoapp(v_empno, d_date),
                                                issleaveapp(v_empno, d_date)
                                            )                                                        As penaltyhrs,

                                            to_char(d_date, 'dd-Mon-yyyy')                           As mdate,
                                            d_dd                                                     As sday,
                                            d_date,
                                            getshift1(v_empno, d_date)                               As shiftcode,
                                            isleavedeputour(d_date, v_empno)                         As islod,
                                            get_holiday(d_date)                                      As issunday,
                                            islastworkday1(v_empno, d_date)                          As islwd,
                                            lc_appcount(v_empno, d_date)                             As islcapp,
                                            issleaveapp(v_empno, d_date)                             As issleaveapp,

                                            n_sum_slapp_count(v_empno, d_date)                       As slappcntr,

                                            isabsent(v_empno, d_date)                                As is_absent,
                                            earlygo1(v_empno, d_date)                                As ego,
                                            n_workedhrs(v_empno, d_date, getshift1(v_empno, d_date)) As wrkhrs,

                                            v_max_punch                                              tot_punch_nos

                                        From
                                            ss_days_details
                                        Where
                                            d_date Between v_start_date And v_end_date
                                        Order By d_date
                                    ) main_query
                            ) main_main_query
                    );

            Return c;
        End fn_punch_details_4_self;
    */
    Function fn_punch_details_4_self(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2 Default Null,
        p_yyyymm    Varchar2,
        p_for_ot    Varchar2 Default 'KO'
    ) Return typ_tab_punch_data
        Pipelined
    Is
        v_prev_delta_hrs               Number;
        v_prev_lwrk_day_cfwd_delta_hrs Number;
        v_prev_lcome_app_cntr          Number;
        tab_punch_data                 typ_tab_punch_data;
        v_start_date                   Date;
        v_end_date                     Date;
        v_max_punch                    Number;
        v_empno                        Varchar2(5);
        e_employee_not_found           Exception;
        v_is_fri_lcome_ego_app         Number;
        c_absent                       Constant Number := 1;
        c_ldt_leave                    Constant Number := 1;
        c_ldt_tour_depu                Constant Number := 2;
        c_ldt_remote_work              Constant Number := 3;
        v_count                        Number;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        If Trim(p_empno) Is Null Then
            v_empno := get_empno_from_meta_id(p_meta_id);
            If v_empno = 'ERRRR' Then
                Raise e_employee_not_found;
                Return;
            End If;
            /*Else
                Select
                    Count(*)
                Into
                    v_count
                From
                    ss_emplmast
                Where
                    empno      = p_empno
                    And status = 1;

                If v_count = 0 Then
                    Raise e_employee_not_found;
                    Return;
                Else
                    v_empno := p_empno;
                End If;*/
        Else
            v_empno := p_empno;

        End If;
        If p_for_ot = 'OK' Then
            v_end_date := n_getenddate(substr(p_yyyymm, 5, 2), substr(p_yyyymm, 1, 4));
        Else
            v_end_date := last_day(to_date(p_yyyymm, 'yyyymm'));
        End If;
        v_start_date := n_getstartdate(substr(p_yyyymm, 5, 2), substr(p_yyyymm, 1, 4));

        v_max_punch  := n_maxpunch(v_empno, v_start_date, v_end_date);

        n_cfwd_lwd_deltahrs(
            p_empno       => v_empno,
            p_pdate       => to_date(p_yyyymm, 'yyyymm'),
            p_savetot     => 0,
            p_deltahrs    => v_prev_delta_hrs,
            p_lwddeltahrs => v_prev_lwrk_day_cfwd_delta_hrs,
            p_lcappcntr   => v_prev_lcome_app_cntr
        );

        Open cur_for_punch_data(v_empno, v_start_date, v_end_date);
        Loop
            Fetch cur_for_punch_data Bulk Collect Into tab_punch_data Limit 7;
            For i In 1..tab_punch_data.count
            Loop

                --tab_punch_data(i).str_wrk_hrs              := to_hrs(tab_punch_data(i).wrk_hrs);
                --tab_punch_data(i).str_delta_hrs            := to_hrs(tab_punch_data(i).delta_hrs);
                --tab_punch_data(i).str_extra_hrs            := to_hrs(tab_punch_data(i).extra_hrs);

                If tab_punch_data(i).is_absent = 1 Then
                    tab_punch_data(i).remarks := 'Absent';
                Elsif tab_punch_data(i).penalty_hrs > 0 Then
                    If tab_punch_data(i).day_punch_count = 1 Then
                        tab_punch_data(i).remarks := tab_punch_data(i).penalty_hrs || '_HrsLeaveDedu(MissedPunch)';
                    Else
                        tab_punch_data(i).remarks := tab_punch_data(i).penalty_hrs || '_HrsLeaveDeducted';
                    End If;
                Elsif tab_punch_data(i).is_ldt = c_ldt_leave Then
                    tab_punch_data(i).remarks := 'OnLeave';
                Elsif tab_punch_data(i).is_ldt = c_ldt_tour_depu Then
                    tab_punch_data(i).remarks := 'OnTour-Depu';
                Elsif tab_punch_data(i).is_ldt = c_ldt_remote_work Then
                    tab_punch_data(i).remarks := 'RemoteWork';
                Elsif (tab_punch_data(i).is_sleave_app > 0 And tab_punch_data(i).sl_app_cntr < 3) Then
                    tab_punch_data(i).remarks := 'SLeave(Apprd)';
                Elsif tab_punch_data(i).is_lc_app > 0 Then
                    tab_punch_data(i).remarks := 'LCome(Apprd)';
                Elsif tab_punch_data(i).day_punch_count = 1 Then
                    tab_punch_data(i).remarks := 'MissedPunch';
                End If;
                If tab_punch_data(i).is_lwd = 1 And tab_punch_data(i).is_sleave_app = 1 And tab_punch_data(i).sl_app_cntr < 3
                Then
                    v_is_fri_lcome_ego_app := 1;
                Else
                    v_is_fri_lcome_ego_app := 0;
                End If;

                If i = 7 Then
                    tab_punch_data(i).wk_bfwd_delta_hrs := v_prev_lwrk_day_cfwd_delta_hrs;
                    calculate_weekly_cfwd_hrs(
                        p_wk_bfwd_dhrs   => tab_punch_data(i).wk_bfwd_delta_hrs,
                        p_wk_dhrs        => tab_punch_data(i).wk_sum_delta_hrs,
                        p_lday_lcome_ego => tab_punch_data(i).last_day_cfwd_dhrs,
                        p_fri_sl_app     => v_is_fri_lcome_ego_app,
                        p_cfwd_dhrs      => tab_punch_data(i).wk_cfwd_delta_hrs,
                        p_pn_hrs         => tab_punch_data(i).wk_penalty_leave_hrs
                    );
                    v_prev_lwrk_day_cfwd_delta_hrs      := tab_punch_data(i).wk_cfwd_delta_hrs;
                End If;

                --tab_punch_data(i).str_wk_sum_work_hrs      := to_hrs(tab_punch_data(i).wk_sum_work_hrs);
                --tab_punch_data(i).str_wk_sum_delta_hrs     := to_hrs(tab_punch_data(i).wk_sum_delta_hrs);
                --tab_punch_data(i).str_wk_bfwd_delta_hrs    := to_hrs(tab_punch_data(i).wk_bfwd_delta_hrs);
                --tab_punch_data(i).str_wk_cfwd_delta_hrs    := to_hrs(tab_punch_data(i).wk_cfwd_delta_hrs);
                --tab_punch_data(i).str_wk_penalty_leave_hrs := to_hrs(tab_punch_data(i).wk_penalty_leave_hrs);

                Pipe Row(tab_punch_data(i));
            End Loop;
            tab_punch_data := Null;
            Exit When cur_for_punch_data%notfound;
        End Loop;
        Close cur_for_punch_data;
        Return;
    End fn_punch_details_4_self;

    Function fn_day_punch_list(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2,
        p_date      Date
    ) Return typ_tab_day_punch_list
        Pipelined
    Is
        tab_day_punch_list   typ_tab_day_punch_list;
        v_count              Number;

        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);

    Begin

        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno = p_empno;
        If v_count = 0 Then
            Raise e_employee_not_found;
            Return;
        End If;

        Open cur_day_punch_list(p_empno, p_date);
        Loop
            Fetch cur_day_punch_list Bulk Collect Into tab_day_punch_list Limit 50;
            For i In 1..tab_day_punch_list.count
            Loop
                Pipe Row(tab_day_punch_list(i));
            End Loop;
            Exit When cur_day_punch_list%notfound;
        End Loop;
        Close cur_day_punch_list;
        Return;
    End fn_day_punch_list;

    Procedure punch_details_pipe(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_empno     Varchar2 Default Null,
        p_yyyymm    Varchar2,
        p_for_ot    Varchar2 Default 'KO'
    )
    Is
        v_prev_delta_hrs               Number;
        v_prev_lwrk_day_cfwd_delta_hrs Number;
        v_prev_lcome_app_cntr          Number;
        tab_punch_data                 typ_tab_punch_data;
        v_start_date                   Date;
        v_end_date                     Date;
        v_max_punch                    Number;
        v_empno                        Varchar2(5);
        e_employee_not_found           Exception;
        v_is_fri_lcome_ego_app         Number;
        c_absent                       Constant Number := 1;
        c_ldt_leave                    Constant Number := 1;
        c_ldt_tour_depu                Constant Number := 2;
        c_ldt_remote_work              Constant Number := 3;
        v_count                        Number;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        If Trim(p_empno) Is Null Then
            v_empno := get_empno_from_meta_id(p_meta_id);
            If v_empno = 'ERRRR' Then
                Raise e_employee_not_found;
                Return;
            End If;
        Else
            Select
                Count(*)
            Into
                v_count
            From
                ss_emplmast
            Where
                empno      = p_empno
                And status = 1;

            If v_count = 0 Then
                Raise e_employee_not_found;
                Return;
            Else
                v_empno := p_empno;
            End If;
        End If;
        If p_for_ot = 'OK' Then
            v_end_date := n_getenddate(substr(p_yyyymm, 5, 2), substr(p_yyyymm, 1, 4));
        Else
            v_end_date := last_day(to_date(p_yyyymm, 'yyyymm'));
        End If;
        v_start_date := n_getstartdate(substr(p_yyyymm, 5, 2), substr(p_yyyymm, 1, 4));

        v_max_punch  := n_maxpunch(v_empno, v_start_date, v_end_date);

        n_cfwd_lwd_deltahrs(
            p_empno       => v_empno,
            p_pdate       => to_date(p_yyyymm, 'yyyymm'),
            p_savetot     => 0,
            p_deltahrs    => v_prev_delta_hrs,
            p_lwddeltahrs => v_prev_lwrk_day_cfwd_delta_hrs,
            p_lcappcntr   => v_prev_lcome_app_cntr
        );

        Open cur_for_punch_data(v_empno, v_start_date, v_end_date);
        Loop
            Fetch cur_for_punch_data Bulk Collect Into tab_punch_data Limit 7;
            For i In 1..tab_punch_data.count
            Loop

                --tab_punch_data(i).str_wrk_hrs              := to_hrs(tab_punch_data(i).wrk_hrs);
                --tab_punch_data(i).str_delta_hrs            := to_hrs(tab_punch_data(i).delta_hrs);
                --tab_punch_data(i).str_extra_hrs            := to_hrs(tab_punch_data(i).extra_hrs);

                If tab_punch_data(i).is_absent = 1 Then
                    tab_punch_data(i).remarks := 'Absent';
                Elsif tab_punch_data(i).penalty_hrs > 0 Then
                    If tab_punch_data(i).day_punch_count = 1 Then
                        tab_punch_data(i).remarks := tab_punch_data(i).penalty_hrs || '-HoursLeaveDeducted(MissedPunch)';
                    Else
                        tab_punch_data(i).remarks := tab_punch_data(i).penalty_hrs || '-HoursLeaveDeducted';
                    End If;
                Elsif tab_punch_data(i).is_ldt = c_ldt_leave Then
                    tab_punch_data(i).remarks := 'OnLeave';
                Elsif tab_punch_data(i).is_ldt = c_ldt_tour_depu Then
                    tab_punch_data(i).remarks := 'OnTour-Depu';
                Elsif tab_punch_data(i).is_ldt = c_ldt_remote_work Then
                    tab_punch_data(i).remarks := 'RemoteWork';
                Elsif tab_punch_data(i).day_punch_count = 1 Then
                    tab_punch_data(i).remarks := 'MissedPunch';
                End If;
                If tab_punch_data(i).is_lwd = 1 And tab_punch_data(i).is_sleave_app = 1 And tab_punch_data(i).sl_app_cntr < 3
                Then
                    v_is_fri_lcome_ego_app := 1;
                Else
                    v_is_fri_lcome_ego_app := 0;
                End If;

                If i = 7 Then
                    tab_punch_data(i).wk_bfwd_delta_hrs := v_prev_lwrk_day_cfwd_delta_hrs;
                    calculate_weekly_cfwd_hrs(
                        p_wk_bfwd_dhrs   => tab_punch_data(i).wk_bfwd_delta_hrs,
                        p_wk_dhrs        => tab_punch_data(i).wk_sum_delta_hrs,
                        p_lday_lcome_ego => tab_punch_data(i).last_day_cfwd_dhrs,
                        p_fri_sl_app     => v_is_fri_lcome_ego_app,
                        p_cfwd_dhrs      => tab_punch_data(i).wk_cfwd_delta_hrs,
                        p_pn_hrs         => tab_punch_data(i).wk_penalty_leave_hrs
                    );
                    v_prev_lwrk_day_cfwd_delta_hrs      := tab_punch_data(i).wk_cfwd_delta_hrs;
                End If;

                --tab_punch_data(i).str_wk_sum_work_hrs      := to_hrs(tab_punch_data(i).wk_sum_work_hrs);
                --tab_punch_data(i).str_wk_sum_delta_hrs     := to_hrs(tab_punch_data(i).wk_sum_delta_hrs);
                --tab_punch_data(i).str_wk_bfwd_delta_hrs    := to_hrs(tab_punch_data(i).wk_bfwd_delta_hrs);
                --tab_punch_data(i).str_wk_cfwd_delta_hrs    := to_hrs(tab_punch_data(i).wk_cfwd_delta_hrs);
                --tab_punch_data(i).str_wk_penalty_leave_hrs := to_hrs(tab_punch_data(i).wk_penalty_leave_hrs);

            End Loop;
            tab_punch_data := Null;
            Exit When cur_for_punch_data%notfound;
        End Loop;
        Close cur_for_punch_data;
        Return;
    End;

End iot_punch_details;
/
---------------------------
--Changed PACKAGE BODY
--IOT_PRINT_LOG_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_PRINT_LOG_QRY" As

    Function fn_past_7days_4_self(
        p_person_id Varchar2,
        p_meta_id   Varchar2
    ) Return typ_self_7day_summary
        Pipelined
    Is

        tab_self_7day_summary typ_self_7day_summary;
        v_empno               Varchar2(5);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin

        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;

        Open cur_self_7day_summary(v_empno);
        Loop
            Fetch cur_self_7day_summary Bulk Collect Into tab_self_7day_summary Limit 10;
            For i In 1..tab_self_7day_summary.count
            Loop
                Pipe Row(tab_self_7day_summary(i));
            End Loop;
            Exit When cur_self_7day_summary%notfound;
        End Loop;
        Close cur_self_7day_summary;
        Return;

    End;

    Function get_print_log_detailed_list(
        p_empno       Varchar2,
        p_start_date  Date Default Null,
        p_end_date    Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        empno                                   As emp_no,
                        to_char(print_date, 'dd-Mon-yyyy')      As print_date,
                        time                                    As print_time,
                        que_name                                As que_name,
                        file_name                               As file_name,
                        nvl(pagecount, 0)                       As page_count,
                        color                                   As color,
                        Row_Number() Over (Order By empno Desc) As row_number,
                        Count(*) Over ()                        As total_row
                    From
                        ss_vu_print_log_pivot
                    Where
                        empno = p_empno
                        And print_date >= nvl(p_start_date, trunc(sysdate - 15))
                        And print_date <= nvl(p_end_date, trunc(sysdate + 1))
                    Order By print_date Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;

    End;

    Function fn_detailed_list_self(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date Default Null,
        p_end_date    Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := get_print_log_detailed_list(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
    End fn_detailed_list_self;

    Function fn_detailed_list_other(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_start_date  Date Default Null,
        p_end_date    Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        v_self_empno         Varchar2(5);
        v_req_for_self       Varchar2(2);
        v_for_empno          Varchar2(5);
        c                    Sys_Refcursor;
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_self_empno := get_empno_from_meta_id(p_meta_id);
        If v_self_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Select
            empno
        Into
            v_for_empno
        From
            ss_emplmast
        Where
            empno      = p_empno
            And status = 1;
        c            := get_print_log_detailed_list(v_for_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
    End fn_detailed_list_other;

    Function fn_past_7days_hod_sum(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        v_pivot_column_csv Varchar2(2000);
    Begin
        Select
            Listagg(Chr(39) || initcap(d_mon) || ' ' || d_dd || Chr(39) || ' as ' || Chr(34) || initcap(d_mon) || ' ' || d_dd ||
            Chr(34), ', ') Within
                Group (Order By
                    d_date) csv
        Into
            v_pivot_column_csv
        From
            ss_days_details
        Where
            d_date Between (sysdate - 8) And (sysdate - 1)
        Order By
            d_date;
    End;

End iot_print_log_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_ONDUTY_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_ONDUTY_QRY" As

    Function fn_get_onduty_applications(
        p_empno        Varchar2,
        p_req_for_self Varchar2,
        p_onduty_type  Varchar2 Default Null,
        p_start_date   Date     Default Null,
        p_end_date     Date     Default Null,
        p_row_number   Number,
        p_page_length  Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        a.empno,
                        app_date,
                        to_char(a.app_date, 'dd-Mon-yyyy')      As application_date,
                        a.app_no                                As application_id,
                        a.pdate                                 As application_for_date,
                        a.start_date                            As start_date,
                        description,
                        a.type                                  As onduty_type,
                        get_emp_name(a.lead_apprl_empno)        As lead_name,
                        a.lead_apprldesc                        As lead_approval,
                        hod_apprldesc                           As hod_approval,
                        hrd_apprldesc                           As hr_approval,
                        Case
                            When p_req_for_self = 'OK' Then
                                a.can_delete_app
                            Else
                                0
                        End                                     As can_delete_app,
                        Row_Number() Over (Order By a.start_date desc) As row_number,
                        Count(*) Over ()                        As total_row
                    From
                        ss_vu_od_depu a
                    Where
                        a.empno    = p_empno
                        And a.pdate >= add_months(sysdate, - 24)
                        And a.type = nvl(p_onduty_type, a.type)
                        And a.pdate Between trunc(nvl(p_start_date, a.pdate)) And trunc(nvl(p_end_date, a.pdate))
                    Order By start_date Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length)
            Order By
                start_date Desc;
        Return c;

    End;

    Function fn_onduty_applications_4_other(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_onduty_type Varchar2 Default Null,
        p_start_date  Date     Default Null,
        p_end_date    Date     Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_self_empno         Varchar2(5);
        v_req_for_self       Varchar2(2);
        v_for_empno          Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_self_empno := get_empno_from_meta_id(p_meta_id);
        If v_self_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Select
            empno
        Into
            v_for_empno
        From
            ss_emplmast
        Where
            empno      = p_empno;
            --And status = 1;
        If v_self_empno = v_for_empno Then
            v_req_for_self := 'OK';
        Else
            v_req_for_self := 'KO';
        End If;

        c            := fn_get_onduty_applications(v_for_empno, v_req_for_self, p_onduty_type, p_start_date, p_end_date, p_row_number,
                                                   p_page_length);
        Return c;
    End fn_onduty_applications_4_other;

    Function fn_onduty_applications_4_self(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_onduty_type Varchar2 Default Null,
        p_start_date  Date     Default Null,
        p_end_date    Date     Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        c                    Sys_Refcursor;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := fn_get_onduty_applications(v_empno, 'OK', p_onduty_type, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;

    End fn_onduty_applications_4_self;

    Function fn_pending_lead_approval(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_lead_empno         Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_lead_empno := get_empno_from_meta_id(p_meta_id);
        If v_lead_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        to_char(a.app_date, 'dd-Mon-yyyy')      As application_date,
                        a.app_no                                As application_id,
                        to_char(bdate, 'dd-Mon-yyyy')           As start_date,
                        to_char(edate, 'dd-Mon-yyyy')           As end_date,
                        type                                    As onduty_type,
                        dm_get_emp_office(a.empno)              As office,
                        a.empno || ' - ' || name                As emp_name,
                        a.empno                                 As emp_no,
                        parent                                  As parent,
                        getempname(lead_apprl_empno)            As lead_name,
                        lead_reason                             As lead_remarks,
                        Row_Number() Over (Order By a.app_date) As row_number,
                        Count(*) Over ()                        As total_row
                    From
                        ss_odapprl  a,
                        ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0)    = 0)
                        And a.empno            = e.empno
                        And e.status           = 1
                        And a.lead_apprl_empno = Trim(v_lead_empno)
                    Order By parent, a.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_lead_approval;

    Function fn_pending_hod_approval(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_empno          Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_hod_empno := get_empno_from_meta_id(p_meta_id);
        If v_hod_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        to_char(a.app_date, 'dd-Mon-yyyy')      As application_date,
                        a.app_no                                As application_id,
                        to_char(bdate, 'dd-Mon-yyyy')           As start_date,
                        to_char(edate, 'dd-Mon-yyyy')           As end_date,
                        type                                    As onduty_type,
                        dm_get_emp_office(a.empno)              As office,
                        a.empno || ' - ' || name                As emp_name,
                        a.empno                                 As emp_no,
                        parent                                  As parent,
                        getempname(lead_apprl_empno)            As lead_name,
                        hodreason                               As hod_remarks,
                        Row_Number() Over (Order By a.app_date) As row_number,
                        Count(*) Over ()                        As total_row
                    From
                        ss_odapprl  a,
                        ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0) In (1, 4))
                        And (nvl(hod_apprl, 0) = 0)
                        And a.empno            = e.empno
                        And e.status           = 1
                        And e.mngr             = Trim(v_hod_empno)

                    Order By parent, a.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_hod_approval;

    Function fn_pending_onbehalf_approval(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_empno          Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_hod_empno := get_empno_from_meta_id(p_meta_id);
        If v_hod_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        to_char(a.app_date, 'dd-Mon-yyyy')      As application_date,
                        a.app_no                                As application_id,
                        to_char(bdate, 'dd-Mon-yyyy')           As start_date,
                        to_char(edate, 'dd-Mon-yyyy')           As end_date,
                        type                                    As onduty_type,
                        dm_get_emp_office(a.empno)              As office,
                        a.empno || ' - ' || name                As emp_name,
                        a.empno                                 As emp_no,
                        parent                                  As parent,
                        getempname(lead_apprl_empno)            As lead_name,
                        hodreason                               As hod_remarks,
                        Row_Number() Over (Order By a.app_date) As row_number,
                        Count(*) Over ()                        As total_row
                    From
                        ss_odapprl  a,
                        ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0) In (1, 4))
                        And (nvl(hod_apprl, 0) = 0)
                        And a.empno            = e.empno
                        And e.status           = 1
                        And e.mngr In (
                            Select
                                mngr
                            From
                                ss_delegate
                            Where
                                empno = Trim(v_hod_empno)
                        )
                    Order By parent, a.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_onbehalf_approval;

    Function fn_pending_hr_approval(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c       Sys_Refcursor;
        v_empno Varchar2(5);
    Begin

        Open c For
            Select
                *
            From
                (
                    Select
                        to_char(a.app_date, 'dd-Mon-yyyy')             As application_date,
                        a.app_no                                       As application_id,
                        to_char(bdate, 'dd-Mon-yyyy')                  As start_date,
                        to_char(edate, 'dd-Mon-yyyy')                  As end_date,
                        type                                           As onduty_type,
                        dm_get_emp_office(a.empno)                     As office,
                        a.empno || ' - ' || name                       As emp_name,
                        a.empno                                        As emp_no,
                        parent                                         As parent,
                        getempname(lead_apprl_empno)                   As lead_name,
                        hrdreason                                      As hr_remarks,
                        Row_Number() Over (Order By e.parent, e.empno) As row_number,
                        Count(*) Over ()                               As total_row
                    From
                        ss_odapprl  a,
                        ss_emplmast e
                    Where
                        (nvl(hod_apprl, 0)     = 1)
                        And a.empno            = e.empno
                        And e.status           = 1
                        And (nvl(hrd_apprl, 0) = 0)
                    Order By e.parent, e.empno Asc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_hr_approval;

End iot_onduty_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_ONDUTY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_ONDUTY" As

    Procedure sp_onduty_details(
        p_application_id      Varchar2,

        p_emp_name        Out Varchar2,

        p_onduty_type     Out Varchar2,
        p_onduty_sub_type Out Varchar2,
        p_start_date      Out Varchar2,
        p_end_date        Out Varchar2,

        p_hh1             Out Varchar2,
        p_mi1             Out Varchar2,
        p_hh2             Out Varchar2,
        p_mi2             Out Varchar2,

        p_reason          Out Varchar2,
        p_lead_name       Out Varchar2,
        p_lead_approval   Out Varchar2,
        p_hod_approval    Out Varchar2,
        p_hr_approval     Out Varchar2,

        p_message_type    Out Varchar2,
        p_message_text    Out Varchar2
    ) As

        v_onduty_app ss_vu_ondutyapp%rowtype;
        v_depu       ss_vu_depu%rowtype;
        v_empno      Varchar2(5);
        v_count      Number;

    Begin
        Select
            Count(*)
        Into
            v_count
        From
            ss_vu_ondutyapp
        Where
            Trim(app_no) = Trim(p_application_id);
        If v_count = 1 Then
            Select
                *
            Into
                v_onduty_app
            From
                ss_vu_ondutyapp
            Where
                Trim(app_no) = Trim(p_application_id);
        Else
            Select
                Count(*)
            Into
                v_count
            From
                ss_vu_depu
            Where
                Trim(app_no) = Trim(p_application_id);

            If v_count = 1 Then
                Select
                    *
                Into
                    v_depu
                From
                    ss_vu_depu
                Where
                    Trim(app_no) = Trim(p_application_id);
            End If;
        End If;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Err - Invalid application id';
            Return;
        End If;
        If v_onduty_app.empno Is Not Null Then
            Select
                description
            Into
                p_onduty_type
            From
                ss_ondutymast
            Where
                type = v_onduty_app.type;
            p_onduty_type   := v_onduty_app.type || ' - ' || p_onduty_type;
            If nvl(v_onduty_app.odtype, 0) <> 0 Then
                Select
                    description
                Into
                    p_onduty_sub_type
                From
                    ss_onduty_sub_type
                Where
                    od_sub_type = v_onduty_app.odtype;
                p_onduty_sub_type := v_onduty_app.odtype || ' - ' || p_onduty_sub_type;
            End If;

            p_emp_name      := get_emp_name(v_onduty_app.empno);
            p_start_date    := v_onduty_app.pdate;
            p_hh1           := lpad(v_onduty_app.hh, 2, '0');
            p_mi1           := lpad(v_onduty_app.mm, 2, '0');
            p_hh2           := lpad(v_onduty_app.hh1, 2, '0');
            p_mi2           := lpad(v_onduty_app.mm1, 2, '0');
            p_reason        := v_onduty_app.reason;

            p_lead_name     := get_emp_name(v_onduty_app.lead_apprl_empno);
            p_lead_approval := v_onduty_app.lead_apprldesc;
            p_hod_approval  := v_onduty_app.hod_apprldesc;
            p_hr_approval   := v_onduty_app.hrd_apprldesc;

        Elsif v_depu.empno Is Not Null Then

            Select
                description
            Into
                p_onduty_type
            From
                ss_ondutymast
            Where
                type = v_depu.type;
            p_onduty_type   := v_depu.type || ' - ' || p_onduty_type;

            p_emp_name      := get_emp_name(v_depu.empno);

            p_onduty_type   := v_depu.type || ' - ' || p_onduty_type;
            p_start_date    := v_depu.bdate;
            p_end_date      := v_depu.edate;
            p_reason        := v_depu.reason;

            Select
                description
            Into
                p_onduty_type
            From
                ss_ondutymast
            Where
                type = v_depu.type;
            p_onduty_type   := v_depu.type || ' - ' || p_onduty_type;

            p_emp_name      := get_emp_name(v_depu.empno);
            p_lead_name     := get_emp_name(v_depu.lead_apprl_empno);

            p_lead_approval := v_depu.lead_apprldesc;
            p_hod_approval  := v_depu.hod_apprldesc;
            p_hr_approval   := v_depu.hrd_apprldesc;

        End If;

        p_message_type := 'OK';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_add_punch_entry(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2,
        p_hh1              Varchar2,
        p_mi1              Varchar2,
        p_hh2              Varchar2 Default Null,
        p_mi2              Varchar2 Default Null,
        p_date             Date,
        p_type             Varchar2,
        p_sub_type         Varchar2 Default Null,
        p_lead_approver    Varchar2,
        p_reason           Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_entry_by_empno Varchar2(5);
        v_count          Number;
        v_lead_approval  Number := 0;
        v_hod_approval   Number := 0;
        v_desc           Varchar2(60);
    Begin
        v_entry_by_empno := get_empno_from_meta_id(p_meta_id);
        If v_entry_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        od.add_onduty_type_1(
            p_empno         => p_empno,
            p_od_type       => p_type,
            p_od_sub_type   => nvl(Trim(p_sub_type), 0),
            p_pdate         => to_char(p_date, 'yyyymmdd'),
            p_hh            => to_number(Trim(p_hh1)),
            p_mi            => to_number(Trim(p_mi1)),
            p_hh1           => to_number(Trim(p_hh2)),
            p_mi1           => to_number(Trim(p_mi2)),
            p_lead_approver => p_lead_approver,
            p_reason        => p_reason,
            p_entry_by      => v_entry_by_empno,
            p_user_ip       => Null,
            p_success       => p_message_type,
            p_message       => p_message_text
        );

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_add_punch_entry;

    Procedure sp_add_depu_tour(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2,
        p_start_date       Date,
        p_end_date         Date,
        p_type             Varchar2,
        p_lead_approver    Varchar2,
        p_reason           Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_entry_by_empno Varchar2(5);
        v_count          Number;

    Begin
        v_entry_by_empno := get_empno_from_meta_id(p_meta_id);
        If v_entry_by_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        od.add_onduty_type_2(
            p_empno         => p_empno,
            p_od_type       => p_type,
            p_b_yyyymmdd    => to_char(p_start_date, 'yyyymmdd'),
            p_e_yyyymmdd    => to_char(p_end_date, 'yyyymmdd'),
            p_entry_by      => v_entry_by_empno,
            p_lead_approver => p_lead_approver,
            p_user_ip       => Null,
            p_reason        => p_reason,
            p_success       => p_message_type,
            p_message       => p_message_text
        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_add_depu_tour;

    Procedure sp_extend_depu(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_application_id   Varchar2,
        p_end_date         Date,
        p_reason           Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_entry_by_empno Varchar2(5);
        v_count          Number;
        rec_depu         ss_depu%rowtype;
    Begin
        Select
            *
        Into
            rec_depu
        From
            ss_depu
        Where
            Trim(app_no) = Trim(p_application_id);
        If rec_depu.edate > p_end_date Then
            p_message_type := 'KO';
            p_message_text := 'Extension end date should be greater than existing end date.';
            Return;
        End If;
        sp_add_depu_tour(
            p_person_id     => p_person_id,
            p_meta_id       => p_meta_id,

            p_empno         => rec_depu.empno,
            p_start_date    => rec_depu.edate + 1,
            p_end_date      => p_end_date,
            p_type          => rec_depu.type,
            p_lead_approver => 'None',
            p_reason        => p_reason,

            p_message_type  => p_message_type,
            p_message_text  => p_message_text
        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;

    --
    Procedure sp_delete_od_app_4_self(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_application_id   Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_count    Number;
        v_empno    Varchar2(5);
        v_tab_from Varchar2(2);
    Begin
        v_count        := 0;
        v_empno        := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_ondutyapp
        Where
            Trim(app_no) = Trim(p_application_id)
            And empno    = v_empno;
        If v_count = 1 Then
            v_tab_from := 'OD';
        Else
            Select
                Count(*)
            Into
                v_count
            From
                ss_depu
            Where
                Trim(app_no) = Trim(p_application_id)
                And empno    = v_empno;
            If v_count = 1 Then
                v_tab_from := 'DP';
            End If;
        End If;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Err - Invalid application id';
            Return;
        End If;
        del_od_app(p_app_no   => p_application_id,
                   p_tab_from => v_tab_from);
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_delete_od_app_4_self;

    Procedure sp_delete_od_app_force(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_application_id   Varchar2,
        p_empno            Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_count      Number;
        v_self_empno Varchar2(5);

        v_tab_from   Varchar2(2);
    Begin
        v_count        := 0;
        v_self_empno   := get_empno_from_meta_id(p_meta_id);
        If v_self_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_vu_ondutyapp
        Where
            Trim(app_no) = Trim(p_application_id)
            And empno    = p_empno;
        If v_count = 1 Then
            v_tab_from := 'OD';
        Else
            Select
                Count(*)
            Into
                v_count
            From
                ss_vu_depu
            Where
                Trim(app_no) = Trim(p_application_id)
                And empno    = p_empno;
            If v_count = 1 Then
                v_tab_from := 'DP';
            End If;
        End If;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Err - Invalid application id';
            Return;
        End If;
        del_od_app(
            p_app_no    => p_application_id,
            p_tab_from  => v_tab_from,
            p_force_del => 'OK'
        );
        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_delete_od_app_force;

    Procedure sp_onduty_application_details(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_application_id      Varchar2,

        p_emp_name        Out Varchar2,

        p_onduty_type     Out Varchar2,
        p_onduty_sub_type Out Varchar2,
        p_start_date      Out Varchar2,
        p_end_date        Out Varchar2,

        p_hh1             Out Varchar2,
        p_mi1             Out Varchar2,
        p_hh2             Out Varchar2,
        p_mi2             Out Varchar2,

        p_reason          Out Varchar2,

        p_lead_name       Out Varchar2,
        p_lead_approval   Out Varchar2,
        p_hod_approval    Out Varchar2,
        p_hr_approval     Out Varchar2,

        p_message_type    Out Varchar2,
        p_message_text    Out Varchar2
    ) As
        v_count    Number;
        v_empno    Varchar2(5);
        v_tab_from Varchar2(2);
    Begin
        v_count := 0;
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        sp_onduty_details(
            p_application_id  => p_application_id,

            p_emp_name        => p_emp_name,

            p_onduty_type     => p_onduty_type,
            p_onduty_sub_type => p_onduty_sub_type,
            p_start_date      => p_start_date,
            p_end_date        => p_end_date,

            p_hh1             => p_hh1,
            p_mi1             => p_mi1,
            p_hh2             => p_hh2,
            p_mi2             => p_mi2,

            p_reason          => p_reason,

            p_lead_name       => p_lead_name,
            p_lead_approval   => p_lead_approval,
            p_hod_approval    => p_hod_approval,
            p_hr_approval     => p_hr_approval,

            p_message_type    => p_message_type,
            p_message_text    => p_message_text

        );
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_onduty_approval(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_onduty_approvals typ_tab_string,
        p_approver_profile Number,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_app_no         Varchar2(70);
        v_approval       Number;
        v_remarks        Varchar2(70);
        c_onduty         Constant Varchar2(2) := 'OD';
        c_deputation     Constant Varchar2(2) := 'DP';
        v_count          Number;
        v_rec_count      Number;
        sqlpartod        Varchar2(60)         := 'Update SS_OnDutyApp ';
        sqlpartdp        Varchar2(60)         := 'Update SS_Depu ';
        sqlpart2         Varchar2(500);
        strsql           Varchar2(600);
        v_odappstat_rec  ss_odappstat%rowtype;
        v_approver_empno Varchar2(5);
        v_user_tcp_ip    Varchar2(30);
        v_msg_type       Varchar2(10);
        v_msg_text       Varchar2(1000);
    Begin

        v_approver_empno := get_empno_from_meta_id(p_meta_id);
        If v_approver_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        sqlpart2         := ' set ApproverProfile_APPRL = :Approval, ApproverProfile_Code = :Approver_EmpNo, ApproverProfile_APPRL_DT = Sysdate,
                    ApproverProfile_TCP_IP = :User_TCP_IP , ApproverProfileREASON = :Reason where App_No = :paramAppNo';
        If p_approver_profile = user_profile.type_hod Or p_approver_profile = user_profile.type_sec Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'HOD');
        Elsif p_approver_profile = user_profile.type_hrd Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'HRD');
        Elsif p_approver_profile = user_profile.type_lead Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'LEAD');
        End If;

        For i In 1..p_onduty_approvals.count
        Loop

            With
                csv As (
                    Select
                        p_onduty_approvals(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1))            app_no,
                to_number(Trim(regexp_substr(str, '[^~!~]+', 1, 2))) approval,
                Trim(regexp_substr(str, '[^~!~]+', 1, 3))            remarks
            Into
                v_app_no, v_approval, v_remarks
            From
                csv;

            Select
                *
            Into
                v_odappstat_rec
            From
                ss_odappstat
            Where
                Trim(app_no) = Trim(v_app_no);

            If (v_odappstat_rec.fromtab) = c_deputation Then
                strsql := sqlpartdp || ' ' || sqlpart2;
            Elsif (v_odappstat_rec.fromtab) = c_onduty Then
                strsql := sqlpartod || ' ' || sqlpart2;
            End If;
            /*
            p_message_type := 'OK';
            p_message_text := 'Debug 1 - ' || p_onduty_approvals(i);
            Return;
            */
            strsql := replace(strsql, 'LEADREASON', 'LEAD_REASON');
            Execute Immediate strsql
                Using v_approval, v_approver_empno, v_user_tcp_ip, v_remarks, trim(v_app_no);

            If v_odappstat_rec.fromtab = c_onduty And p_approver_profile = user_profile.type_hrd And v_approval = ss.approved
            Then
                Insert Into ss_onduty value
                (
                    Select
                        empno,
                        hh,
                        mm,
                        pdate,
                        0,
                        dd,
                        mon,
                        yyyy,
                        type,
                        app_no,
                        description,
                        getodhh(app_no, 1),
                        getodmm(app_no, 1),
                        app_date,
                        reason,
                        odtype
                    From
                        ss_ondutyapp
                    Where
                        Trim(app_no)                   = Trim(v_app_no)
                        And nvl(hrd_apprl, ss.pending) = ss.approved
                );

                Insert Into ss_onduty value
                (
                    Select
                        empno,
                        hh1,
                        mm1,
                        pdate,
                        0,
                        dd,
                        mon,
                        yyyy,
                        type,
                        app_no,
                        description,
                        getodhh(app_no, 2),
                        getodmm(app_no, 2),
                        app_date,
                        reason,
                        odtype
                    From
                        ss_ondutyapp
                    Where
                        Trim(app_no)                   = Trim(v_app_no)
                        And (type                      = 'OD'
                            Or type                    = 'IO')
                        And nvl(hrd_apprl, ss.pending) = ss.approved
                );

                If p_approver_profile = user_profile.type_hrd And v_approval = ss.approved Then
                    generate_auto_punch_4od(v_app_no);
                End If;
            Elsif v_approval = ss.disapproved Then

                sp_delete_od_app_force(
                    p_person_id      => p_person_id,
                    p_meta_id        => p_meta_id,

                    p_application_id => Trim(v_app_no),
                    p_empno          => v_odappstat_rec.empno,
                    p_message_type   => v_msg_type,
                    p_message_text   => v_msg_text
                );

            End If;

        End Loop;

        Commit;
        p_message_type   := 'OK';
        p_message_text   := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_onduty_approval_lead(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_onduty_approvals typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_onduty_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_onduty_approvals => p_onduty_approvals,
            p_approver_profile => user_profile.type_lead,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

    Procedure sp_onduty_approval_hod(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_onduty_approvals typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_onduty_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_onduty_approvals => p_onduty_approvals,
            p_approver_profile => user_profile.type_hod,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

    Procedure sp_onduty_approval_hr(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_onduty_approvals typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_onduty_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_onduty_approvals => p_onduty_approvals,
            p_approver_profile => user_profile.type_hrd,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

End iot_onduty;
/
---------------------------
--Changed PACKAGE BODY
--IOT_LEAVE_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_LEAVE_QRY" As

    Function get_leave_applications(
        p_empno        Varchar2,
        p_req_for_self Varchar2,
        p_start_date   Date     Default Null,
        p_end_date     Date     Default Null,
        p_leave_type   Varchar2 Default Null,
        p_row_number   Number,
        p_page_length  Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        app_date_4_sort,
                        lead,
                        app_no,
                        application_date,
                        start_date,
                        end_date,
                        leave_type,
                        leave_period,
                        lead_approval_desc,
                        hod_approval_desc,
                        hrd_approval_desc,
                        lead_reason,
                        hod_reason,
                        hrd_reason,
                        from_tab,
                        db_cr,
                        is_pl,
                        can_delete_app,
                        Sum(is_pl) Over (Order By start_date Desc, app_no)   As pl_total,
                        Case
                            When Sum(is_pl) Over (Order By start_date Desc, app_no) <= 3
                                And is_pl = 1
                            Then
                                1
                            Else
                                0
                        End                                                  As can_edit_pl_app,
                        Trim(med_cert_file_name)                             As med_cert_file_name,
                        Row_Number() Over (Order By start_date Desc, app_no) As row_number,
                        Count(*) Over ()                                     As total_row

                    From
                        (
                                (

                        Select
                            la.app_date                             As app_date_4_sort,
                            get_emp_name(la.lead_apprl_empno)       As lead,
                            ltrim(rtrim(la.app_no))                 As app_no,
                            to_char(la.app_date, 'dd-Mon-yyyy')     As application_date,
                            la.bdate                                As start_date,
                            la.edate                                As end_date,
                            Case
                                When nvl(is_covid_sick_leave, 0) = 1
                                    And Trim(leavetype)          = 'SL'
                                Then
                                    'SL-COVID'
                                Else
                                    Trim(leavetype)
                            End                                     As leave_type,
                            to_days(la.leaveperiod)                 As leave_period,
                            ss.approval_text(nvl(la.lead_apprl, 0)) As lead_approval_desc,
                            Case nvl(la.lead_apprl, 0)
                                When ss.disapproved Then
                                    '-'
                                Else
                                    ss.approval_text(nvl(la.hod_apprl, 0))
                            End                                     As hod_approval_desc,
                            Case nvl(la.hod_apprl, 0)
                                When ss.disapproved Then
                                    '-'
                                Else
                                    ss.approval_text(nvl(la.hrd_apprl, 0))
                            End                                     As hrd_approval_desc,
                            la.lead_reason,
                            la.hodreason                            As hod_reason,
                            la.hrdreason                            As hrd_reason,
                            '1'                                     As from_tab,
                            'D'                                     As db_cr,
                            Case
                                When is_rejected = 1 Then
                                    0
                                When nvl(la.hrd_apprl, 0) = 1
                                    And la.leavetype      = 'PL'
                                Then
                                    1
                                Else
                                    0
                            End                                     As is_pl,
                            med_cert_file_name                      As med_cert_file_name,
                            Case
                                When p_req_for_self                  = 'OK'
                                    And nvl(la.lead_apprl, c_pending) In (c_pending, c_apprl_none)
                                    And nvl(la.hod_apprl, c_pending) = c_pending
                                Then
                                    1
                                Else
                                    0
                            End                                     can_delete_app
                        From
                            ss_vu_leaveapp la
                        Where
                            la.app_no Not Like 'Prev%'
                            And Trim(la.empno) = p_empno
                            And la.leavetype   = nvl(p_leave_type, la.leavetype)

                        )
                        Union
                        (
                        Select
                            a.app_date                                                        As app_date_4_sort,
                            ''                                                                As lead,
                            Trim(a.app_no)                                                    As app_no,
                            to_char(a.app_date, 'dd-Mon-yyyy')                                As application_date,
                            a.bdate                                                           As start_date,
                            a.edate                                                           As end_date,
                            Case
                                When nvl(is_covid_sick_leave, 0) = 1
                                    And Trim(leavetype)          = 'SL'
                                Then
                                    'SL-COVID'
                                Else
                                    Trim(leavetype)
                            End                                                               As leave_type,
                            to_days(decode(a.db_cr, 'D', a.leaveperiod * - 1, a.leaveperiod)) As leave_period,
                            'NONE'                                                            As lead_approval_desc,
                            'Approved'                                                        As hod_approval_desc,
                            'Approved'                                                        As hrd_approval_desc,
                            ''                                                                As lead_reason,
                            ''                                                                As hod_reason,
                            ''                                                                As hrd_reason,
                            '2'                                                               As from_tab,
                            db_cr                                                             As db_cr,
                            0                                                                 As is_pl,
                            Null                                                              As med_cert_file_name,
                            0                                                                 As can_delete
                        From
                            ss_leaveledg a
                        Where
                            a.empno         = lpad(Trim(p_empno), 5, 0)
                            And a.app_no Not Like 'Prev%'
                            And a.leavetype = nvl(p_leave_type, a.leavetype)
                            And ltrim(rtrim(a.app_no)) Not In
                            (
                                Select
                                    ss_vu_leaveapp.app_no
                                From
                                    ss_vu_leaveapp
                                Where
                                    ss_vu_leaveapp.empno = p_empno
                            )
                        )

                        )
                    Where
                        start_date >= add_months(sysdate, - 24)
                        And trunc(start_date) Between nvl(p_start_date, trunc(start_date)) And nvl(p_end_date, trunc(start_date))
                    Order By start_date Desc, app_date_4_sort Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;

    End;

    Function get_leave_ledger(
        p_empno       Varchar2,
        p_start_date  Date Default Null,
        p_end_date    Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c            Sys_Refcursor;
        v_start_date Date;
        v_end_date   Date;
    Begin
        If p_start_date Is Null Then
            v_start_date := trunc(nvl(p_start_date, sysdate), 'YEAR');
            v_end_date   := add_months(trunc(nvl(p_end_date, sysdate), 'YEAR'), 12) - 1;
        Else
            v_start_date := trunc(p_start_date);
            v_end_date   := trunc(p_end_date);
        End If;
        Open c For
            Select
                app_no,
                app_date As application_date,
                leave_type,
                description,
                b_date   start_date,
                e_date   end_date,
                no_of_days_db,
                no_of_days_cr,
                row_number,
                total_row
            From
                (
                    Select
                        app_no,
                        app_date,
                        Case
                            When nvl(is_covid_sick_leave, 0) = 1
                                And Trim(leavetype)          = 'SL'
                            Then
                                'SL-COVID'
                            Else
                                Trim(leavetype)
                        End                                    As leave_type,
                        description,
                        dispbdate                              b_date,
                        dispedate                              e_date,
                        to_days(dbday)                         no_of_days_db,
                        to_days(crday)                         no_of_days_cr,
                        Row_Number() Over (Order By dispbdate) row_number,
                        Count(*) Over ()                       total_row
                    From
                        ss_displedg
                    Where
                        empno = p_empno
                        And dispbdate Between v_start_date And v_end_date
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;

    End get_leave_ledger;

    Function fn_leave_ledger_4_self(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date Default Null,
        p_end_date    Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := get_leave_ledger(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
    End fn_leave_ledger_4_self;

    Function fn_leave_ledger_4_other(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_start_date  Date Default Null,
        p_end_date    Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c       Sys_Refcursor;
        v_empno Varchar2(5);
    Begin
        Select
            empno
        Into
            v_empno
        From
            ss_emplmast
        Where
            empno = p_empno;
        --And status = 1;
        c := get_leave_ledger(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
    End fn_leave_ledger_4_other;

    Function fn_leave_applications_4_other(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_start_date  Date     Default Null,
        p_end_date    Date     Default Null,
        p_leave_type  Varchar2 Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_self_empno         Varchar2(5);
        v_req_for_self       Varchar2(2);
        v_for_empno          Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_self_empno := get_empno_from_meta_id(p_meta_id);
        If v_self_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Select
            empno
        Into
            v_for_empno
        From
            ss_emplmast
        Where
            empno = p_empno;
        --And status = 1;
        If v_self_empno = v_for_empno Then
            v_req_for_self := 'OK';
        Else
            v_req_for_self := 'KO';
        End If;
        c            := get_leave_applications(v_for_empno, v_req_for_self, p_start_date, p_end_date, p_leave_type, p_row_number,
                                               p_page_length);
        Return c;
    End fn_leave_applications_4_other;

    Function fn_leave_applications_4_self(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date     Default Null,
        p_end_date    Date     Default Null,
        p_leave_type  Varchar2 Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := get_leave_applications(v_empno, 'OK', p_start_date, p_end_date, p_leave_type, p_row_number, p_page_length);
        Return c;
    End fn_leave_applications_4_self;

    Function fn_pending_hod_approval(

        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_empno          Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_hod_empno := get_empno_from_meta_id(p_meta_id);
        If v_hod_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        l.empno || ' - ' || e.name                   As employee_name,
                        parent,
                        app_date                                     As application_date,
                        app_no                                       As application_id,
                        bdate                                        As start_date,
                        edate                                        As end_date,
                        to_days(leaveperiod)                         As leave_period,
                        Case
                            When nvl(is_covid_sick_leave, 0) = 1
                                And Trim(leavetype)          = 'SL'
                            Then
                                'SL-COVID'
                            Else
                                Trim(leavetype)
                        End                                          As leave_type,
                        get_emp_name(l.lead_apprl_empno)             As lead_name,
                        Trim(med_cert_file_name)                     As med_cert_file_name,
                        lead_reason                                  As lead_remarks,
                        hodreason                                    As hod_remarks,
                        hrdreason                                    As hr_remarks,
                        Row_Number() Over (Order By parent, l.empno) row_number,
                        Count(*) Over ()                             total_row

                    From
                        ss_leaveapp                l, ss_emplmast e
                    Where
                        (nvl(hod_apprl, c_pending) = c_pending)
                        And l.empno                = e.empno
                        And e.status               = 1
                        And nvl(lead_apprl, c_pending) In (c_approved, c_apprl_none)
                        And e.mngr                 = Trim(v_hod_empno)
                    Order By parent,
                        l.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_hod_approval;

    Function fn_pending_onbehalf_approval(

        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hod_empno          Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_hod_empno := get_empno_from_meta_id(p_meta_id);
        If v_hod_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        l.empno || ' - ' || e.name                   As employee_name,
                        parent,
                        app_date                                     As application_date,
                        app_no                                       As application_id,
                        bdate                                        As start_date,
                        edate                                        As end_date,
                        to_days(leaveperiod)                         As leave_period,
                        leavetype                                    As leave_type,
                        get_emp_name(l.lead_apprl_empno)             As lead_name,
                        Trim(med_cert_file_name)                     As med_cert_file_name,
                        lead_reason                                  As lead_remarks,
                        hodreason                                    As hod_remarks,
                        hrdreason                                    As hr_remarks,
                        Row_Number() Over (Order By parent, l.empno) row_number,
                        Count(*) Over ()                             total_row

                    From
                        ss_leaveapp                l, ss_emplmast e
                    Where
                        (nvl(hod_apprl, c_pending) = c_pending)
                        And l.empno                = e.empno
                        And e.status               = 1
                        And nvl(lead_apprl, c_pending) In (c_approved, c_apprl_none)
                        And e.mngr In (
                            Select
                                mngr
                            From
                                ss_delegate
                            Where
                                empno = Trim(v_hod_empno)
                        )
                    Order By parent,
                        l.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_onbehalf_approval;

    Function fn_pending_hr_approval(

        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_parent      Varchar2 Default Null,

        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_hr_empno           Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        /*
            v_hr_empno := get_empno_from_meta_id(p_meta_id);
            If v_hr_empno = 'ERRRR' Then
                Raise e_employee_not_found;
                Return Null;
            End If;
        */
        Open c For
            Select
                *
            From
                (
                    Select
                        l.empno || ' - ' || e.name                   As employee_name,
                        parent,
                        app_date                                     As application_date,
                        app_no                                       As application_id,
                        bdate                                        As start_date,
                        edate                                        As end_date,
                        to_days(leaveperiod)                         As leave_period,
                        Case
                            When nvl(is_covid_sick_leave, 0) = 1
                                And Trim(leavetype)          = 'SL'
                            Then
                                'SL-COVID'
                            Else
                                Trim(leavetype)
                        End                                          As leave_type,
                        Case leavetype
                            When 'CL' Then
                                closingclbal(l.empno, trunc(sysdate), 0)
                            When 'SL' Then
                                closingslbal(l.empno, trunc(sysdate), 0)
                            When 'PL' Then
                                closingplbal(l.empno, trunc(sysdate), 0)
                            When 'CO' Then
                                closingcobal(l.empno, trunc(sysdate), 0)
                            When 'EX' Then
                                closingexbal(l.empno, trunc(sysdate), 0)
                            When 'OH' Then
                                closingohbal(l.empno, trunc(sysdate), 0)
                            Else
                                0
                        End                                          As leave_balance,
                        --Get_Leave_Balance(l.empno,sysdate,ss.closing_bal,leavetype, :param_Leave_Count)                        
                        get_emp_name(l.lead_apprl_empno)             As lead_name,
                        Trim(med_cert_file_name)                     As med_cert_file_name,
                        lead_reason                                  As lead_remarks,
                        hodreason                                    As hod_marks,
                        hrdreason                                    As hr_remarks,
                        Row_Number() Over (Order By parent, l.empno) row_number,
                        Count(*) Over ()                             total_row

                    From
                        ss_leaveapp                l, ss_emplmast e
                    Where
                        l.empno                         = e.empno
                        And nvl(l.hod_apprl, c_pending) = c_approved
                        And nvl(l.hrd_apprl, c_pending) = c_pending
                        And e.status                    = 1
                        And e.parent                    = nvl(p_parent, e.parent)
                    Order By parent,
                        l.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_pending_hr_approval;

    Function fn_pending_lead_approval(

        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_lead_empno         Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_lead_empno := get_empno_from_meta_id(p_meta_id);
        If v_lead_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        l.empno || ' - ' || e.name                   As employee_name,
                        parent,
                        app_date                                     As application_date,
                        app_no                                       As application_id,
                        bdate                                        As start_date,
                        edate                                        As end_date,
                        to_days(leaveperiod)                         As leave_period,
                        Case
                            When nvl(is_covid_sick_leave, 0) = 1
                                And Trim(leavetype)          = 'SL'
                            Then
                                'SL-COVID'
                            Else
                                Trim(leavetype)
                        End                                          As leave_type,
                        get_emp_name(l.lead_apprl_empno)             As lead_name,
                        Trim(med_cert_file_name)                     As med_cert_file_name,
                        lead_reason                                  As lead_remarks,
                        hodreason                                    As hod_marks,
                        hrdreason                                    As hr_remarks,
                        Row_Number() Over (Order By parent, l.empno) row_number,
                        Count(*) Over ()                             total_row
                    From
                        ss_leaveapp                l, ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0)    = 0)
                        And l.empno            = e.empno
                        And e.status           = 1
                        And l.lead_apprl_empno = Trim(v_lead_empno)
                    Order By parent,
                        l.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;
    End fn_pending_lead_approval;

End iot_leave_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_LEAVE_CLAIMS_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_LEAVE_CLAIMS_QRY" As

    Function fn_leave_claims(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date     Default Null,
        p_end_date    Date     Default Null,
        p_leave_type  Varchar2 Default Null,
        p_empno       Varchar2 Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        la.empno,
                        get_emp_name(la.empno)                                As employee_name,
                        e.parent,
                        la.adj_no                                             As application_id,
                        la.leavetype                                          As leave_type,
                        la.db_cr,
                        la.adj_dt                                             As application_date,
                        la.bdate                                              As start_date,
                        la.edate                                              As end_date,
                        to_days(la.leaveperiod)                               As leave_period,
                        la.med_cert_file_name                                 As med_cert_file_name,
                        --la.entry_date                                         As application_date,
                        Row_Number() Over (Order By la.adj_dt Desc, la.adj_no) As row_number,
                        Count(*) Over ()                                      As total_row
                    From
                        ss_leave_adj la,
                        ss_emplmast  e
                    Where
                        la.empno        = e.empno
                        And la.adj_type = 'LC'
                        And la.db_cr    = 'D'
                        And la.bdate >= add_months(sysdate, - 24)
                        And trunc(la.adj_dt) Between nvl(p_start_date, trunc(la.adj_dt)) And nvl(p_end_date, trunc(la.adj_dt))
                        And la.empno    = nvl(p_empno, la.empno)
                        And leavetype   = nvl(p_leave_type, leavetype)

                    Order By adj_dt Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;
    End;

End iot_leave_claims_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_LEAVE_CLAIMS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_LEAVE_CLAIMS" As

    Procedure sp_add_leave_claim(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2,
        p_leave_type       Varchar2,
        p_leave_period     Number,
        p_start_date       Date,
        p_end_date         Date,
        p_half_day_on      Number,
        p_description      Varchar2,
        p_med_cert_file_nm Varchar2 Default Null,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2

    ) As

        v_empno               Varchar2(5);
        v_app_date            Date;
        v_message_type        Varchar2(2);
        v_count               Number;
        v_adj_date            Date;
        v_adj_seq_no          Number;
        v_hd_date             Date;
        v_entry_by_empno      Varchar2(5);
        v_hd_presnt_part      Number;
        v_adj_no              Varchar2(60);
        e_employee_not_found  Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_leave_type          Varchar2(2);
        v_is_covid_sick_leave Number(1);
    Begin
        v_leave_type     := p_leave_type;
        If v_leave_type = 'SC' Then
            v_leave_type          := 'SL';
            v_is_covid_sick_leave := 1;
        End If;
        v_entry_by_empno := get_empno_from_meta_id(p_meta_id);
        v_app_date       := sysdate;
        If v_entry_by_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;

        v_empno          := p_empno;
        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno = v_empno;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        v_adj_seq_no     := leave_adj_seq.nextval;
        v_adj_no         := 'LC/' || v_empno || '/' || to_char(sysdate, 'ddmmyyyy') || '/' || v_adj_seq_no;
        If nvl(p_half_day_on, half_day_on_none) = hd_bdate_presnt_part_2 Then
            v_hd_date        := p_start_date;
            v_hd_presnt_part := 2;
        Elsif nvl(p_half_day_on, half_day_on_none) = hd_edate_presnt_part_1 Then
            v_hd_date        := p_end_date;
            v_hd_presnt_part := 1;
        End If;

        Insert Into ss_leave_adj (
            empno,
            adj_dt,
            adj_no,
            leavetype,
            dataentryby,
            db_cr,
            adj_type,
            bdate,
            edate,
            leaveperiod,
            description,
            tcp_ip,
            hd_date,
            hd_part,
            entry_date,
            med_cert_file_name,
            is_covid_sick_leave
        )
        Values(
            v_empno,
            sysdate,
            v_adj_no,
            v_leave_type,
            v_entry_by_empno,
            'D',
            'LC',
            p_start_date,
            p_end_date,
            p_leave_period * 8,
            p_description,
            Null,
            v_hd_date,
            v_hd_presnt_part,
            v_app_date,
            p_med_cert_file_nm,
            v_is_covid_sick_leave
        );
        Insert Into ss_leaveledg(
            app_no,
            app_date,
            leavetype,
            description,
            empno,
            leaveperiod,
            db_cr,
            tabletag,
            bdate,
            edate,
            adj_type,
            hd_date,
            hd_part,
            is_covid_sick_leave
        )
        Values(
            v_adj_no,
            v_app_date,
            v_leave_type,
            p_description,
            v_empno,
            p_leave_period * 8 * - 1,
            'D',
            0,
            p_start_date,
            p_end_date,
            'LC',
            v_hd_date,
            v_hd_presnt_part,
            v_is_covid_sick_leave
        );
        Commit;
        p_message_type   := 'OK';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || '-' || sqlerrm;
    End;
    /*
        Procedure sp_delete_leave_claim(
            p_person_id                  Varchar2,
            p_meta_id                    Varchar2,

            p_application_id             Varchar2,

            p_medical_cert_file_name Out Varchar2,
            p_message_type           Out Varchar2,
            p_message_text           Out Varchar2
        ) As
            v_count      Number;
            v_empno      Varchar2(5);
            rec_leaveapp ss_leaveapp%rowtype;
        Begin
            v_empno        := get_empno_from_meta_id(p_meta_id);
            If v_empno = 'ERRRR' Then
                p_message_type := 'KO';
                p_message_text := 'Invalid employee number';
                Return;
            End If;

            Select
                Count(*)
            Into
                v_count
            From
                ss_leave_adj
            Where
                empno            = v_empno
                And Trim(app_no) = Trim(p_application_id);
            If v_count = 0 Then
                p_message_type := 'KO';
                p_message_text := 'Invalid application id';
                Return;
            End If;
            Select
                med_cert_file_name
            Into
                p_medical_cert_file_name
            From
                ss_leaveapp
            Where
                Trim(app_no) = Trim(p_application_id);

            deleteleave(trim(p_application_id));

            p_message_type := 'OK';
            p_message_text := 'Application deleted successfully.';
        Exception
            When Others Then
                p_message_type := 'KO';
                p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
        End;
    */

    Procedure sp_import(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,

        p_leave_claims           typ_tab_string,

        p_leave_claim_errors Out typ_tab_string,

        p_message_type       Out Varchar2,
        p_message_text       Out Varchar2
    ) As
        v_empno           Varchar2(5);
        v_leave_type      Varchar2(2);
        v_no_of_days      Number;
        v_start_date      Date;
        v_end_date        Date;
        v_remarks         Varchar2(30);

        v_valid_claim_num Number;
        tab_valid_claims  typ_tab_claims;
        v_rec_claim       rec_claim;
        v_err_num         Number;
        is_error_in_row   Boolean;
        v_half_day_on     Number;
        v_msg_text        Varchar2(200);
        v_msg_type        Varchar2(10);
        v_count           Number;
        v_reason          Varchar2(30);
    Begin
        v_err_num := 0;
        For i In 1..p_leave_claims.count
        Loop
            is_error_in_row := false;
            With
                csv As (
                    Select
                        p_leave_claims(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1))                      empno,
                Trim(regexp_substr(str, '[^~!~]+', 1, 2))                      leave_type,
                Trim(regexp_substr(str, '[^~!~]+', 1, 3))                      no_of_days,
                to_date(Trim(regexp_substr(str, '[^~!~]+', 1, 4)), 'yyyymmdd') start_date,
                to_date(Trim(regexp_substr(str, '[^~!~]+', 1, 5)), 'yyyymmdd') end_date,
                Trim(regexp_substr(str, '[^~!~]+', 1, 6))                      reason
            Into
                v_empno,
                v_leave_type,
                v_no_of_days,
                v_start_date,
                v_end_date,
                v_reason
            From
                csv;
            v_end_date      := nvl(v_end_date, v_start_date);
            v_empno         := lpad(v_empno, 5, '0');
            Select
                Count(*)
            Into
                v_count
            From
                ss_emplmast
            Where
                empno = v_empno
                And (dol Is Null Or dol > sysdate - 365);
            If v_count = 0 Then
                v_err_num       := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'Empno' || '~!~' ||     --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    'Employee not found';   --Message
                is_error_in_row := true;
            End If;
            Select
                Count(*)
            Into
                v_count
            From
                ss_leavetype
            Where
                leavetype     = v_leave_type
                And is_active = 1;
            If v_leave_type In ('SL', 'SC') And v_no_of_days >= 2 Then
                v_err_num       := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'LeaveType' || '~!~' || --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    'MEDICAL Certificate required'; --Message
                is_error_in_row := true;
            End If;
            If v_count = 0 Then
                v_err_num       := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'LeaveType' || '~!~' || --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    'Incorrect leave type'; --Message
                is_error_in_row := true;
            End If;
            If Mod(v_no_of_days, 0.5) <> 0 Then
                v_err_num       := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'NoOfDays' || '~!~' ||  --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    'NoOfDays should be in multiples of 0.5'; --Message
                is_error_in_row := true;
            End If;
            If v_start_date Is Null Or v_end_date Is Null Or v_end_date < v_start_date Then
                v_err_num       := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'StartDate' || '~!~' || --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    'Invalid date range';   --Message
                is_error_in_row := true;
            End If;
            If v_reason Is Null Then
                v_err_num       := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'Reason' || '~!~' ||   --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    'Reason are required'; --Message
                is_error_in_row := true;
            End If;
            If is_error_in_row = false Then
                If Mod(v_no_of_days, 1) > 0 Then
                    v_half_day_on := hd_bdate_presnt_part_2;
                Else
                    v_half_day_on := half_day_on_none;
                End If;
                v_valid_claim_num                                := nvl(v_valid_claim_num, 0) + 1;

                --v_rec_claim.empno := v_empno;

                tab_valid_claims(v_valid_claim_num).empno        := v_empno;
                tab_valid_claims(v_valid_claim_num).leave_type   := v_leave_type;
                tab_valid_claims(v_valid_claim_num).leave_period := v_no_of_days;
                tab_valid_claims(v_valid_claim_num).start_date   := v_start_date;
                tab_valid_claims(v_valid_claim_num).end_date     := v_end_date;
                tab_valid_claims(v_valid_claim_num).half_day_on  := v_half_day_on;
                tab_valid_claims(v_valid_claim_num).reason       := v_reason;
            End If;
        End Loop;
        If v_err_num != 0 Then
            p_message_type := 'OO';
            p_message_text := 'Not all records were imported.';
            Return;
        End If;

        For i In 1..v_valid_claim_num
        Loop
            sp_add_leave_claim(
                p_person_id        => p_person_id,
                p_meta_id          => p_meta_id,

                p_empno            => tab_valid_claims(i).empno,
                p_leave_type       => tab_valid_claims(i).leave_type,
                p_leave_period     => tab_valid_claims(i).leave_period,
                p_start_date       => tab_valid_claims(i).start_date,
                p_end_date         => tab_valid_claims(i).end_date,
                p_half_day_on      => tab_valid_claims(i).half_day_on,
                p_description      => tab_valid_claims(i).reason,
                p_med_cert_file_nm => Null,

                p_message_type     => v_msg_type,
                p_message_text     => v_msg_text

            );

            If v_msg_type <> 'OK' Then
                v_err_num := v_err_num + 1;
                p_leave_claim_errors(v_err_num) :=
                    v_err_num || '~!~' ||   --ID
                    '' || '~!~' ||          --Section
                    i || '~!~' ||           --XL row number
                    'Empno' || '~!~' ||     --FieldName
                    '0' || '~!~' ||         --ErrorType
                    'Critical' || '~!~' ||  --ErrorTypeString
                    v_msg_text;             --Message
            End If;
        End Loop;
        If v_err_num != 0 Then
            p_message_type := 'OO';
            p_message_text := 'Not all records were imported.';

        Else
            p_message_type := 'OK';
            p_message_text := 'File imported successfully.';
        End If;
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := sqlcode || ' - ' || sqlerrm;
    End;

End iot_leave_claims;
/
---------------------------
--Changed PACKAGE BODY
--IOT_LEAVE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_LEAVE" As

    Procedure sp_process_disapproved_app(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,
        p_application_id Varchar2
    ) As
        v_medical_cert_file Varchar2(100);
        v_msg_type          Varchar2(15);
        v_msg_text          Varchar2(1000);
    Begin
        Insert Into ss_leaveapp_rejected (
            app_no,
            empno,
            app_date,
            rep_to,
            projno,
            caretaker,
            leaveperiod,
            leavetype,
            bdate,
            edate,
            reason,
            mcert,
            work_ldate,
            resm_date,
            contact_add,
            contact_phn,
            contact_std,
            last_hrs,
            last_mn,
            resm_hrs,
            resm_mn,
            dataentryby,
            office,
            hod_apprl,
            hod_apprl_dt,
            hod_code,
            hrd_apprl,
            hrd_apprl_dt,
            hrd_code,
            discrepancy,
            user_tcp_ip,
            hod_tcp_ip,
            hrd_tcp_ip,
            hodreason,
            hrdreason,
            hd_date,
            hd_part,
            lead_apprl,
            lead_apprl_dt,
            lead_code,
            lead_tcp_ip,
            lead_apprl_empno,
            lead_reason,
            rejected_on,
            is_covid_sick_leave,
            med_cert_file_name
        )
        Select
            app_no,
            empno,
            app_date,
            rep_to,
            projno,
            caretaker,
            leaveperiod,
            leavetype,
            bdate,
            edate,
            reason,
            mcert,
            work_ldate,
            resm_date,
            contact_add,
            contact_phn,
            contact_std,
            last_hrs,
            last_mn,
            resm_hrs,
            resm_mn,
            dataentryby,
            office,
            hod_apprl,
            hod_apprl_dt,
            hod_code,
            hrd_apprl,
            hrd_apprl_dt,
            hrd_code,
            discrepancy,
            user_tcp_ip,
            hod_tcp_ip,
            hrd_tcp_ip,
            hodreason,
            hrdreason,
            hd_date,
            hd_part,
            lead_apprl,
            lead_apprl_dt,
            lead_code,
            lead_tcp_ip,
            lead_apprl_empno,
            lead_reason,
            sysdate,
            is_covid_sick_leave,
            med_cert_file_name
        From
            ss_leaveapp
        Where
            Trim(app_no) = p_application_id;
        commit;
        sp_delete_leave_app(
            p_person_id              => p_person_id,
            p_meta_id                => p_meta_id,

            p_application_id         => Trim(p_application_id),

            p_medical_cert_file_name => v_medical_cert_file,
            p_message_type           => v_msg_type,
            p_message_text           => v_msg_text
        );

        ss_mail.send_mail_leave_reject_async(
            p_app_id => p_application_id
        );

    End;

    Procedure get_leave_balance_all(
        p_empno            Varchar2,
        p_pdate            Date Default Null,
        p_open_close_flag  Number,

        p_cl           Out Varchar2,
        p_sl           Out Varchar2,
        p_pl           Out Varchar2,
        p_ex           Out Varchar2,
        p_co           Out Varchar2,
        p_oh           Out Varchar2,
        p_lv           Out Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As

        v_cl  Number;
        v_sl  Number;
        v_pl  Number;
        v_ex  Number;
        v_co  Number;
        v_oh  Number;
        v_lv  Number;
        v_tot Number;
    Begin
        get_leave_balance(
            param_empno       => p_empno,
            param_date        => p_pdate,
            param_open_close  => p_open_close_flag,
            param_leave_type  => 'LV',
            param_leave_count => v_lv
        );

        openbal(
            v_empno       => p_empno,
            v_opbaldtfrom => p_pdate,
            v_openbal     => p_open_close_flag,
            v_cl          => v_cl,
            v_pl          => v_pl,
            v_sl          => v_sl,
            v_ex          => v_ex,
            v_co          => v_co,
            v_oh          => v_oh,
            v_tot         => v_tot
        );

        p_cl := to_days(v_cl);
        p_pl := to_days(v_pl);
        p_sl := to_days(v_sl);
        p_ex := to_days(v_ex);
        p_co := to_days(v_co);
        p_oh := to_days(v_oh);
        p_lv := to_days(v_lv);

        p_cl := nvl(trim(p_cl), '0.0');
        p_pl := nvl(trim(p_pl), '0.0');
        p_sl := nvl(trim(p_sl), '0.0');
        p_ex := nvl(trim(p_ex), '0.0');
        p_co := nvl(trim(p_co), '0.0');
        p_oh := nvl(trim(p_oh), '0.0');
        p_lv := nvl(trim(p_lv), '0.0');

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure get_leave_details_from_app(
        p_application_id         Varchar2,

        p_emp_name           Out Varchar2,
        p_leave_type         Out Varchar2,
        p_application_date   Out Varchar2,
        p_start_date         Out Varchar2,
        p_end_date           Out Varchar2,

        p_leave_period       Out Number,
        p_last_reporting     Out Varchar2,
        p_resuming           Out Varchar2,

        p_projno             Out Varchar2,
        p_care_taker         Out Varchar2,
        p_reason             Out Varchar2,
        p_med_cert_available Out Varchar2,
        p_contact_address    Out Varchar2,
        p_contact_std        Out Varchar2,
        p_contact_phone      Out Varchar2,
        p_office             Out Varchar2,
        p_lead_name          Out Varchar2,
        p_discrepancy        Out Varchar2,
        p_med_cert_file_nm   Out Varchar2,

        p_lead_approval      Out Varchar2,
        p_hod_approval       Out Varchar2,
        p_hr_approval        Out Varchar2,

        p_lead_reason        Out Varchar2,
        p_hod_reason         Out Varchar2,
        p_hr_reason          Out Varchar2,

        p_flag_can_del       Out Varchar2,

        p_message_type       Out Varchar2,
        p_message_text       Out Varchar2

    ) As
        v_leave_app ss_vu_leaveapp%rowtype;
    Begin
        Select
            *
        Into
            v_leave_app
        From
            ss_vu_leaveapp
        Where
            Trim(app_no) = Trim(p_application_id);
        p_emp_name           := get_emp_name(v_leave_app.empno);
        p_leave_type         := v_leave_app.leavetype;
        p_application_date   := to_char(v_leave_app.app_date, 'dd-Mon-yyyy');
        p_start_date         := to_char(v_leave_app.bdate, 'dd-Mon-yyyy');
        p_end_date           := to_char(v_leave_app.edate, 'dd-Mon-yyyy');

        p_leave_period       := to_days(v_leave_app.leaveperiod);
        p_last_reporting     := to_char(v_leave_app.work_ldate, 'dd-Mon-yyyy');
        p_resuming           := to_char(v_leave_app.resm_date, 'dd-Mon-yyyy');

        p_projno             := v_leave_app.projno;
        p_care_taker         := v_leave_app.caretaker;
        p_reason             := v_leave_app.reason;
        p_med_cert_available := v_leave_app.mcert;
        p_contact_address    := v_leave_app.contact_add;
        p_contact_std        := v_leave_app.contact_std;
        p_contact_phone      := v_leave_app.contact_phn;
        p_office             := v_leave_app.office;
        p_lead_name          := get_emp_name(v_leave_app.lead_code);
        p_discrepancy        := v_leave_app.discrepancy;
        p_med_cert_file_nm   := v_leave_app.med_cert_file_name;

        If nvl(v_leave_app.lead_apprl, 0) != 0 Or nvl(v_leave_app.hod_apprl, 0) != 0 Or nvl(v_leave_app.hrd_apprl, 0) != 0
        Then
            p_flag_can_del := 'KO';
        Else
            p_flag_can_del := 'OK';
        End If;

        p_lead_approval      := ss.approval_text(v_leave_app.lead_apprl);
        p_hod_approval       := Case
                                    When v_leave_app.lead_apprl = ss.disapproved Then
                                        '-'
                                    Else
                                        ss.approval_text(v_leave_app.hod_apprl)
                                End;
        p_hr_approval        := Case
                                    When v_leave_app.hod_apprl = ss.disapproved Then
                                        '-'
                                    Else
                                        ss.approval_text(v_leave_app.hrd_apprl)
                                End;
        p_lead_reason        := v_leave_app.lead_reason;
        p_hod_reason         := v_leave_app.hodreason;
        p_hr_reason          := v_leave_app.hrdreason;

        p_message_text       := 'OK';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure get_leave_details_from_adj(
        p_application_id       Varchar2,

        p_emp_name         Out Varchar2,
        p_leave_type       Out Varchar2,
        p_application_date Out Varchar2,
        p_start_date       Out Varchar2,
        p_end_date         Out Varchar2,

        p_leave_period     Out Number,
        p_med_cert_file_nm Out Varchar2,

        p_reason           Out Varchar2,

        p_lead_approval    Out Varchar2,
        p_hod_approval     Out Varchar2,
        p_hr_approval      Out Varchar2,

        p_message_type     Out Varchar2,
        p_message_text     Out Varchar2
    ) As
        v_leave_adj ss_leave_adj%rowtype;
    Begin
        Select
            *
        Into
            v_leave_adj
        From
            ss_leave_adj
        Where
            adj_no = p_application_id;
        p_emp_name         := get_emp_name(v_leave_adj.empno);
        p_leave_type       := v_leave_adj.leavetype;
        p_application_date := to_char(v_leave_adj.adj_dt, 'dd-Mon-yyyy');
        p_start_date       := to_char(v_leave_adj.bdate, 'dd-Mon-yyyy');
        p_end_date         := to_char(v_leave_adj.edate, 'dd-Mon-yyyy');
        p_med_cert_file_nm := v_leave_adj.med_cert_file_name;

        p_leave_period     := to_days(v_leave_adj.leaveperiod);
        p_reason           := v_leave_adj.description;
        p_message_text     := 'OK';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_validate_new_leave(
        p_person_id          Varchar2,
        p_meta_id            Varchar2,

        p_leave_type         Varchar2,
        p_start_date         Date,
        p_end_date           Date,
        p_half_day_on        Number,

        p_leave_period   Out Number,
        p_last_reporting Out Varchar2,
        p_resuming       Out Varchar2,
        p_message_type   Out Varchar2,
        p_message_text   Out Varchar2

    ) As
        v_empno        Varchar2(5);
        v_message_type Varchar2(2);
        v_count        Number;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee by person id';
            Return;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno = v_empno;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        leave.validate_leave(
            param_empno          => v_empno,
            param_leave_type     => p_leave_type,
            param_bdate          => trunc(p_start_date),
            param_edate          => trunc(p_end_date),
            param_half_day_on    => p_half_day_on,
            param_app_no         => Null,
            param_leave_period   => p_leave_period,
            param_last_reporting => p_last_reporting,
            param_resuming       => p_resuming,
            param_msg_type       => v_message_type,
            param_msg            => p_message_text
        );
        If v_message_type = ss.failure Then
            p_message_type := 'KO';
        Else
            p_message_type := 'OK';
        End If;
    Exception
        When Others Then
            p_message_type := ss.failure;
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_validate_new_leave;

    Procedure sp_validate_pl_revision(
        p_person_id          Varchar2,
        p_meta_id            Varchar2,

        p_application_id     Varchar2,
        p_leave_type         Varchar2,
        p_start_date         Date,
        p_end_date           Date,
        p_half_day_on        Number,

        p_leave_period   Out Number,
        p_last_reporting Out Varchar2,
        p_resuming       Out Varchar2,
        p_message_type   Out Varchar2,
        p_message_text   Out Varchar2

    ) As
        v_empno        Varchar2(5);
        v_message_type Varchar2(2);
        v_count        Number;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee by metaid';
            Return;
        End If;

        leave.validate_leave(
            param_empno          => v_empno,
            param_leave_type     => p_leave_type,
            param_bdate          => trunc(p_start_date),
            param_edate          => trunc(p_end_date),
            param_half_day_on    => p_half_day_on,
            param_app_no         => p_application_id,
            param_leave_period   => p_leave_period,
            param_last_reporting => p_last_reporting,
            param_resuming       => p_resuming,
            param_msg_type       => v_message_type,
            param_msg            => p_message_text
        );
        If v_message_type = ss.failure Then
            p_message_type := 'KO';
        Else
            p_message_type := 'OK';
        End If;
    Exception
        When Others Then
            p_message_type := ss.failure;
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_validate_pl_revision;

    Procedure sp_add_leave_application(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,

        p_leave_type             Varchar2,
        p_start_date             Date,
        p_end_date               Date,
        p_half_day_on            Number,
        p_projno                 Varchar2,
        p_care_taker             Varchar2,
        p_reason                 Varchar2,
        p_med_cert_available     Varchar2 Default Null,
        p_contact_address        Varchar2 Default Null,
        p_contact_std            Varchar2 Default Null,
        p_contact_phone          Varchar2 Default Null,
        p_office                 Varchar2,
        p_lead_empno             Varchar2,
        p_discrepancy            Varchar2 Default Null,
        p_med_cert_file_nm       Varchar2 Default Null,

        p_new_application_id Out Varchar2,

        p_message_type       Out Varchar2,
        p_message_text       Out Varchar2

    ) As

        v_empno        Varchar2(5);
        v_message_type Varchar2(2);
        v_count        Number;
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee by person id';
            Return;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno = v_empno;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        leave.add_leave_app(
            param_empno            => v_empno,
            param_leave_type       => p_leave_type,
            param_bdate            => p_start_date,
            param_edate            => p_end_date,
            param_half_day_on      => p_half_day_on,
            param_projno           => p_projno,
            param_caretaker        => p_care_taker,
            param_reason           => p_reason,
            param_cert             => p_med_cert_available,
            param_contact_add      => p_contact_address,
            param_contact_std      => p_contact_std,
            param_contact_phn      => p_contact_phone,
            param_office           => p_office,
            param_dataentryby      => v_empno,
            param_lead_empno       => p_lead_empno,
            param_discrepancy      => p_discrepancy,
            param_med_cert_file_nm => p_med_cert_file_nm,
            param_tcp_ip           => Null,
            param_nu_app_no        => p_new_application_id,
            param_msg_type         => v_message_type,
            param_msg              => p_message_text
        );

        If v_message_type = ss.failure Then
            p_message_type := 'KO';
        Else
            p_message_type := 'OK';
        End If;

    End;

    Procedure sp_pl_revision_save(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,

        p_application_id         Varchar2,
        p_start_date             Date,
        p_end_date               Date,
        p_half_day_on            Number,
        p_lead_empno             Varchar2,
        p_new_application_id Out Varchar2,
        p_message_type       Out Varchar2,
        p_message_text       Out Varchar2

    ) As

        v_empno        Varchar2(5);
        v_message_type Varchar2(2);
        v_count        Number;
    Begin
        --v_message_type := '1234';
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee by person id';
            Return;
        End If;

        leave.save_pl_revision(
            param_empno       => v_empno,
            param_app_no      => p_application_id,
            param_bdate       => p_start_date,
            param_edate       => p_end_date,
            param_half_day_on => p_half_day_on,
            param_dataentryby => v_empno,
            param_lead_empno  => p_lead_empno,
            param_discrepancy => Null,
            param_tcp_ip      => Null,
            param_nu_app_no   => p_new_application_id,
            param_msg_type    => v_message_type,
            param_msg         => p_message_text
        );

        If v_message_type = ss.failure Then
            p_message_type := 'KO';
        Else
            p_message_type := 'OK';
        End If;

    End;

    Procedure sp_leave_details(
        p_person_id              Varchar2,
        p_meta_id                Varchar2,

        p_application_id         Varchar2,

        p_emp_name           Out Varchar2,
        p_leave_type         Out Varchar2,
        p_application_date   Out Varchar2,
        p_start_date         Out Varchar2,
        p_end_date           Out Varchar2,

        p_leave_period       Out Number,
        p_last_reporting     Out Varchar2,
        p_resuming           Out Varchar2,

        p_projno             Out Varchar2,
        p_care_taker         Out Varchar2,
        p_reason             Out Varchar2,
        p_med_cert_available Out Varchar2,
        p_contact_address    Out Varchar2,
        p_contact_std        Out Varchar2,
        p_contact_phone      Out Varchar2,
        p_office             Out Varchar2,
        p_lead_name          Out Varchar2,
        p_discrepancy        Out Varchar2,
        p_med_cert_file_nm   Out Varchar2,

        p_lead_approval      Out Varchar2,
        p_hod_approval       Out Varchar2,
        p_hr_approval        Out Varchar2,

        p_lead_reason        Out Varchar2,
        p_hod_reason         Out Varchar2,
        p_hr_reason          Out Varchar2,

        p_flag_is_adj        Out Varchar2,
        p_flag_can_del       Out Varchar2,

        p_message_type       Out Varchar2,
        p_message_text       Out Varchar2

    ) As
        v_count Number;
    Begin

        Select
            Count(*)
        Into
            v_count
        From
            ss_vu_leaveapp
        Where
            Trim(app_no) = Trim(p_application_id);
        If v_count = 1 Then
            get_leave_details_from_app(
                p_application_id     => p_application_id,

                p_emp_name           => p_emp_name,
                p_leave_type         => p_leave_type,
                p_application_date   => p_application_date,
                p_start_date         => p_start_date,
                p_end_date           => p_end_date,

                p_leave_period       => p_leave_period,
                p_last_reporting     => p_last_reporting,
                p_resuming           => p_resuming,

                p_projno             => p_projno,
                p_care_taker         => p_care_taker,
                p_reason             => p_reason,
                p_med_cert_available => p_med_cert_available,
                p_contact_address    => p_contact_address,
                p_contact_std        => p_contact_std,
                p_contact_phone      => p_contact_phone,
                p_office             => p_office,
                p_lead_name          => p_lead_name,
                p_discrepancy        => p_discrepancy,
                p_med_cert_file_nm   => p_med_cert_file_nm,

                p_lead_approval      => p_lead_approval,
                p_hod_approval       => p_hod_approval,
                p_hr_approval        => p_hr_approval,

                p_lead_reason      => p_lead_reason,
                p_hod_reason       => p_hod_reason,
                p_hr_reason        => p_hr_reason,

                p_flag_can_del       => p_flag_can_del,

                p_message_type       => p_message_type,
                p_message_text       => p_message_text
            );
            p_flag_is_adj := 'KO';
        Else
            get_leave_details_from_adj(
                p_application_id   => p_application_id,

                p_emp_name         => p_emp_name,
                p_leave_type       => p_leave_type,
                p_application_date => p_application_date,
                p_start_date       => p_start_date,
                p_end_date         => p_end_date,

                p_leave_period     => p_leave_period,
                p_med_cert_file_nm => p_med_cert_file_nm,

                p_reason           => p_reason,

                p_lead_approval    => p_lead_approval,
                p_hod_approval     => p_hod_approval,
                p_hr_approval      => p_hr_approval,

                p_message_type     => p_message_type,
                p_message_text     => p_message_text
            );
            p_flag_is_adj  := 'OK';
            p_flag_can_del := 'KO';
        End If;
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_delete_leave_app(
        p_person_id                  Varchar2,
        p_meta_id                    Varchar2,

        p_application_id             Varchar2,

        p_medical_cert_file_name Out Varchar2,
        p_message_type           Out Varchar2,
        p_message_text           Out Varchar2
    ) As
        v_count      Number;
        v_empno      Varchar2(5);
        rec_leaveapp ss_leaveapp%rowtype;
    Begin
        v_empno        := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_leaveapp
        Where
            Trim(app_no) = Trim(p_application_id);
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid application id';
            Return;
        End If;
        Select
            med_cert_file_name
        Into
            p_medical_cert_file_name
        From
            ss_leaveapp
        Where
            Trim(app_no) = Trim(p_application_id);

        deleteleave(trim(p_application_id));

        p_message_type := 'OK';
        p_message_text := 'Application deleted successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_delete_leave_app_force(
        p_person_id                  Varchar2,
        p_meta_id                    Varchar2,

        p_application_id             Varchar2,

        p_medical_cert_file_name Out Varchar2,
        p_message_type           Out Varchar2,
        p_message_text           Out Varchar2
    ) As
        v_count      Number;
        v_empno      Varchar2(5);
        rec_leaveapp ss_leaveapp%rowtype;
    Begin
        v_empno        := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_vu_leaveapp
        Where
            Trim(app_no) = Trim(p_application_id);
        If v_count = 1 Then
            Select
                med_cert_file_name
            Into
                p_medical_cert_file_name
            From
                ss_vu_leaveapp
            Where
                Trim(app_no) = Trim(p_application_id);
        End If;
        If v_count = 0 Then
            Select
                Count(*)
            Into
                v_count
            From
                ss_leave_adj
            Where
                adj_no = Trim(p_application_id);
            If v_count = 1 Then
                Select
                    med_cert_file_name
                Into
                    p_medical_cert_file_name
                From
                    ss_leave_adj
                Where
                    Trim(adj_no) = Trim(p_application_id);
            End If;
        End If;

        deleteleave(
            appnum      => p_application_id,
            p_force_del => 'OK'
        );

        p_message_type := 'OK';
        p_message_text := 'Application deleted successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_delete_leave_app_force;

    Procedure sp_leave_balances(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_empno            Varchar2 Default Null,
        p_start_date       Date     Default Null,
        p_end_date         Date     Default Null,

        p_open_cl      Out Varchar2,
        p_open_sl      Out Varchar2,
        p_open_pl      Out Varchar2,
        p_open_ex      Out Varchar2,
        p_open_co      Out Varchar2,
        p_open_oh      Out Varchar2,
        p_open_lv      Out Varchar2,

        p_close_cl     Out Varchar2,
        p_close_sl     Out Varchar2,
        p_close_pl     Out Varchar2,
        p_close_ex     Out Varchar2,
        p_close_co     Out Varchar2,
        p_close_oh     Out Varchar2,
        p_close_lv     Out Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_empno        Varchar2(5);
        v_message_type Varchar2(2);
        v_count        Number;
    Begin
        If p_empno Is Null Then
            v_empno := get_empno_from_meta_id(p_meta_id);
            If v_empno = 'ERRRR' Then
                p_message_type := 'KO';
                p_message_text := 'Invalid employee by person id';
                Return;
            End If;
        Else
            v_empno := p_empno;
        End If;
        /*
        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno = p_empno;
        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        */
        get_leave_balance_all(
            p_empno           => v_empno,
            p_pdate           => p_start_date,
            p_open_close_flag => ss.opening_bal,

            p_cl              => p_open_cl,
            p_sl              => p_open_sl,
            p_pl              => p_open_pl,
            p_ex              => p_open_ex,
            p_co              => p_open_co,
            p_oh              => p_open_oh,
            p_lv              => p_open_lv,

            p_message_type    => p_message_type,
            p_message_text    => p_message_text
        );

        If p_message_type = 'KO' Then
            Return;
        End If;

        get_leave_balance_all(
            p_empno           => v_empno,
            p_pdate           => p_end_date,
            p_open_close_flag => ss.closing_bal,

            p_cl              => p_close_cl,
            p_sl              => p_close_sl,
            p_pl              => p_close_pl,
            p_ex              => p_close_ex,
            p_co              => p_close_co,
            p_oh              => p_close_oh,
            p_lv              => p_close_lv,

            p_message_type    => p_message_type,
            p_message_text    => p_message_text
        );

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;

    Procedure sp_leave_approval(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_leave_approvals  typ_tab_string,
        p_approver_profile Number,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_app_no            Varchar2(70);
        v_approval          Number;
        v_remarks           Varchar2(70);
        v_count             Number;
        v_rec_count         Number;
        sqlpart1            Varchar2(60) := 'Update SS_leaveapp ';
        sqlpart2            Varchar2(500);
        strsql              Varchar2(600);
        v_odappstat_rec     ss_odappstat%rowtype;
        v_approver_empno    Varchar2(5);
        v_user_tcp_ip       Varchar2(30);
        v_msg_type          Varchar2(20);
        v_msg_text          Varchar2(1000);
        v_medical_cert_file Varchar2(200);
    Begin

        v_approver_empno := get_empno_from_meta_id(p_meta_id);
        If v_approver_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        sqlpart2         := ' set ApproverProfile_APPRL = :Approval, ApproverProfile_Code = :Approver_EmpNo, ApproverProfile_APPRL_DT = Sysdate,
                    ApproverProfile_TCP_IP = :User_TCP_IP , ApproverProfileREASON = :Reason where App_No = :paramAppNo';
        If p_approver_profile = user_profile.type_hod Or p_approver_profile = user_profile.type_sec Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'HOD');
        Elsif p_approver_profile = user_profile.type_hrd Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'HRD');
        Elsif p_approver_profile = user_profile.type_lead Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'LEAD');
        End If;

        For i In 1..p_leave_approvals.count
        Loop

            With
                csv As (
                    Select
                        p_leave_approvals(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1))            app_no,
                to_number(Trim(regexp_substr(str, '[^~!~]+', 1, 2))) approval,
                Trim(regexp_substr(str, '[^~!~]+', 1, 3))            remarks
            Into
                v_app_no, v_approval, v_remarks
            From
                csv;

            /*
            p_message_type := 'OK';
            p_message_text := 'Debug 1 - ' || p_leave_approvals(i);
            Return;
            */
            strsql := sqlpart1 || ' ' || sqlpart2;
            strsql := replace(strsql, 'LEADREASON', 'LEAD_REASON');
            Execute Immediate strsql
                Using v_approval, v_approver_empno, v_user_tcp_ip, v_remarks, trim(v_app_no);
            commit;
            If p_approver_profile = user_profile.type_hrd And v_approval = ss.approved Then
                leave.post_leave_apprl(v_app_no, v_msg_type, v_msg_text);
                /*
                If v_msg_type = ss.success Then
                    generate_auto_punch_4od(v_app_no);
                End If;
                */
            Elsif v_approval = ss.disapproved Then

                sp_process_disapproved_app(
                    p_person_id      => p_person_id,
                    p_meta_id        => p_meta_id,

                    p_application_id => Trim(v_app_no)
                );

            End If;

        End Loop;

        Commit;
        p_message_type   := 'OK';
        p_message_text   := 'Procedure executed successfully.';
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_leave_approval_lead(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_leave_approvals  typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_leave_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_leave_approvals  => p_leave_approvals,
            p_approver_profile => user_profile.type_lead,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

    Procedure sp_leave_approval_hod(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_leave_approvals  typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_leave_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_leave_approvals  => p_leave_approvals,
            p_approver_profile => user_profile.type_hod,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End sp_leave_approval_hod;

    Procedure sp_leave_approval_hr(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_leave_approvals  typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_leave_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_leave_approvals  => p_leave_approvals,
            p_approver_profile => user_profile.type_hrd,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End sp_leave_approval_hr;

End iot_leave;
/
---------------------------
--Changed PACKAGE BODY
--IOT_HSE_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_HSE_QRY" AS


    Function get_hse_suggestion(
        p_empno       Varchar2,
        p_start_date  Date,
        p_end_date    Date,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        sysdate,
                        Row_Number() Over (Order By sysdate ) row_number,
                        Count(*) Over ()                                  total_row
                    From
                        (
                             select sysdate from dual
                        )
                 --   Where
                 --       start_date >= add_months(sysdate, - 24)
                 --   Order By app_date_4_sort Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;

    End;    

    Function get_hse_suggestion_desk(
        p_empno       Varchar2,
        p_start_date  Date,
        p_end_date    Date,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        sysdate,
                        Row_Number() Over (Order By sysdate ) row_number,
                        Count(*) Over ()                                  total_row
                    From
                        (
                             select sysdate from dual
                        )
                 --   Where
                 --       start_date >= add_months(sysdate, - 24)
                 --   Order By app_date_4_sort Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;

    End;

    Function fn_hse_suggestion(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date,
        p_end_date    Date,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := get_hse_suggestion(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
  END fn_hse_suggestion;

    Function fn_hse_suggestion_desk(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date,
        p_end_date    Date,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := get_hse_suggestion_desk(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
  END fn_hse_suggestion_desk;

END IOT_HSE_QRY;
/
---------------------------
--Changed PACKAGE BODY
--IOT_HOLIDAY_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_HOLIDAY_QRY" As

   Function get_holiday_attendance(
      p_empno       Varchar2,
      p_start_date  Date,
      p_end_date    Date,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor As
      c Sys_Refcursor;
   Begin
      Open c For
         Select *
           From (
                   Select to_char(app_date, 'dd-Mon-yyyy') As applied_on,
                          a.app_no As app_no,
                          a.description As description,
                          get_emp_name(lead_apprl_empno) As lead_name,
                          a.lead_apprldesc As lead_approval,
                          a.hod_apprldesc As hod_approval,
                          a.hrd_apprldesc As hr_approval,
                          a.lead_reason As lead_remarks,
                          a.pdate As holiday_attendance_date,
                          Case
                             When (a.pdate < sysdate)
                                Or (a.hod_apprl > 0)
                             Then
                                1
                             Else
                                0
                          End delete_allowed,
                          Row_Number() Over (Order By app_date Desc) row_number,
                          Count(*) Over () total_row
                     From ss_ha_app_stat a
                    Where empno = p_empno
                      And a.app_date >= nvl(p_start_date, add_months(sysdate, - 3))
                      And trunc(a.app_date) <= nvl(p_end_date, trunc(a.app_date))
                    -- empno = p_empno And a.app_date >= add_months(sysdate, - 3)
                    Order By pdate Desc
                )
          Where row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

      Return c;

   End;

   Function fn_holiday_attendance(
      p_person_id   Varchar2,
      p_meta_id     Varchar2,
      p_start_date  Date Default Null,
      p_end_date    Date Default Null,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor As
      c                    Sys_Refcursor;
      v_empno              Varchar2(5);
      e_employee_not_found Exception;
      Pragma exception_init(e_employee_not_found, -20001);
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);
      If v_empno = 'ERRRR' Then
         Raise e_employee_not_found;
         Return Null;
      End If;
      c       := get_holiday_attendance(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
      Return c;
   End fn_holiday_attendance;

   Function fn_pending_lead_approval(
      p_person_id   Varchar2,
      p_meta_id     Varchar2,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor As
      c                    Sys_Refcursor;
      v_lead_empno         Varchar2(5);
      e_employee_not_found Exception;
      Pragma exception_init(e_employee_not_found, -20001);
   Begin
      v_lead_empno := get_empno_from_meta_id(p_meta_id);
      If v_lead_empno = 'ERRRR' Then
         Raise e_employee_not_found;
         Return Null;
      End If;

      Open c For
         Select *
           From (
                   Select to_char(app_date, 'dd-Mon-yyyy') As Application_Date,
                          a.app_no As Application_Id,
                          A.empno As Empno,
                          B.Name As Emp_Name,
                          A.PROJNO As Project,
                          GetEmpName(A.Lead_Apprl_EmpNo) As Lead_Name,
                          to_char(A.Pdate, 'dd-Mon-yyyy') ||'  '||A.START_HH
                          || ':'
                          || A.START_MM
                          || ' To '
                          || A.END_HH
                          || ':'
                          || A.END_MM As Attendance_Date,
                          A.location As office,
                          A.LEAD_REASON As Lead_remarks,
                          B.Parent As Parent,
                          Row_Number() Over (Order By a.app_date) As row_number,
                          Count(*) Over () As total_row
                     From SS_Holiday_Attendance A, SS_EmplMast B
                    Where A.EmpNo = B.EmpNo
                      And (nvl(Lead_apprl, 0) = 0)
                      And (nvl(Hrd_apprl, 0) = 0)
                      And (nvl(Hod_apprl, 0) = 0)
                      And Lead_Apprl_EmpNo = Trim(v_lead_empno)
                    Order By Parent, A.empno
                )
          Where row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
      Return c;
   End fn_pending_lead_approval;

   Function fn_pending_hod_approval(
      p_person_id   Varchar2,
      p_meta_id     Varchar2,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor As
      c                    Sys_Refcursor;
      v_hod_empno          Varchar2(5);
      e_employee_not_found Exception;
      Pragma exception_init(e_employee_not_found, -20001);
   Begin
      v_hod_empno := get_empno_from_meta_id(p_meta_id);
      If v_hod_empno = 'ERRRR' Then
         Raise e_employee_not_found;
         Return Null;
      End If;

      Open c For
         Select *
           From (
                   Select to_char(app_date, 'dd-Mon-yyyy') As Application_Date,
                          a.app_no As Application_Id,
                          A.empno As Empno,
                          B.Name As Emp_Name,
                          A.PROJNO As Project,
                          GetEmpName(A.Lead_Apprl_EmpNo) As Lead_Name,
                          to_char(A.Pdate, 'dd-Mon-yyyy') ||'  '||A.START_HH
                          || ':'
                          || A.START_MM
                          || ' To '
                          || A.END_HH
                          || ':'
                          || A.END_MM As Attendance_Date,
                          A.location As office,
                          A.HODREASON As hod_remarks,
                          B.Parent As Parent,
                          Row_Number() Over (Order By a.app_date) As row_number,
                          Count(*) Over () As total_row
                     From SS_Holiday_Attendance A, SS_EmplMast B
                    Where (nvl(Lead_apprl, 0) In (1, 4))
                      And (nvl(Hrd_apprl, 0) = 0)
                      And (nvl(Hod_apprl, 0) = 0)
                      And A.EmpNo = B.EmpNo
                      And A.EmpNo In (Select empno From SS_EmplMast Where Mngr = Trim(v_hod_empno))
                    Order By Parent, A.empno
                )
          Where row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
      Return c;
   End fn_pending_hod_approval;

   Function fn_pending_onbehalf_approval(
      p_person_id   Varchar2,
      p_meta_id     Varchar2,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor As
      c                    Sys_Refcursor;
      v_hod_empno          Varchar2(5);
      e_employee_not_found Exception;
      Pragma exception_init(e_employee_not_found, -20001);
   Begin
      v_hod_empno := get_empno_from_meta_id(p_meta_id);
      If v_hod_empno = 'ERRRR' Then
         Raise e_employee_not_found;
         Return Null;
      End If;

      Open c For
         Select *
           From (
                   Select to_char(app_date, 'dd-Mon-yyyy') As Application_Date,
                          a.app_no As Application_Id,
                          A.empno As Empno,
                          B.Name As Emp_Name,
                          A.PROJNO As Project,
                          GetEmpName(A.Lead_Apprl_EmpNo) As Lead_Name,
                          to_char(A.Pdate, 'dd-Mon-yyyy') ||'  '||A.START_HH
                          || ':'
                          || A.START_MM
                          || ' To '
                          || A.END_HH
                          || ':'
                          || A.END_MM As Attendance_Date,
                          A.location As office,
                          A.HODREASON As hod_remarks,
                          B.Parent As Parent,
                          Row_Number() Over (Order By a.app_date) As row_number,
                          Count(*) Over () As total_row
                     From SS_Holiday_Attendance A, SS_EmplMast B
                    Where (NVL(Lead_apprl, 0) In (1, 4))
                      And (NVL(Hrd_apprl, 0) = 0)
                      And (NVL(Hod_apprl, 0) = 0)
                      And A.EmpNo = B.EmpNo
                      And A.EmpNo In
                          (
                             Select empno
                               From SS_EmplMast
                              Where Mngr In
                                    (Select Mngr From SS_Delegate Where empno = Trim(v_hod_empno)
                                    )
                          )
                    Order By Parent, A.empno
                )
          Where row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
      Return c;
   End fn_pending_onbehalf_approval;

   Function fn_pending_hr_approval(
      p_person_id   Varchar2,
      p_meta_id     Varchar2,
      p_row_number  Number,
      p_page_length Number
   ) Return Sys_Refcursor As
      c       Sys_Refcursor;
      v_empno Varchar2(5);
   Begin

      Open c For
         Select *
           From (
                  Select to_char(app_date, 'dd-Mon-yyyy') As Application_Date,
                          a.app_no As Application_Id,
                          A.empno As Empno,
                          B.Name As Emp_Name,
                          A.PROJNO As Project,
                          GetEmpName(A.Lead_Apprl_EmpNo) As Lead_Name,
                          to_char(A.Pdate, 'dd-Mon-yyyy') ||'  '||A.START_HH
                          || ':'
                          || A.START_MM
                          || ' To '
                          || A.END_HH
                          || ':'
                          || A.END_MM As Attendance_Date,
                          A.location As office,
                          A.HRDREASON As Hr_remarks,
                          B.Parent As Parent,
                          Row_Number() Over (Order By a.app_date) As row_number,
                          Count(*) Over () As total_row
                     From SS_Holiday_Attendance A, SS_EmplMast B
                    Where (nvl(Lead_apprl, 0) In (1, 4))
                      And (nvl(Hod_apprl, 0) = 1)
                      And A.EmpNo = B.EmpNo
                      And (nvl(Hrd_apprl, 0) = 0)
                    Order By Parent, A.empno

                )
          Where row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
      Return c;
   End fn_pending_hr_approval;

Procedure sp_holiday_details(
          p_person_id            Varchar2,
          p_meta_id              Varchar2,

          p_Application_Id       Varchar2,

          P_Employee            Out Varchar2,
          P_PROJNO           Out Varchar2,
          P_Lead_Name        Out Varchar2,
          P_Attendance_Date  Out Varchar2,
          P_Punch_In_Time    Out Varchar2,
          P_Punch_Out_Time   Out Varchar2,
          P_REMARKS          Out Varchar2,
          P_Office           Out Varchar2,
          P_LEAD_APPRL       Out Varchar2,
          P_LEAD_APPRL_DATE  Out Varchar2,
          P_LEAD_APPRL_EMPNO Out Varchar2,
          P_HOD_APPRL        Out Varchar2,
          P_HOD_APPRL_DATE   Out Varchar2,
          P_HR_APPRL         Out Varchar2,
          P_HR_APPRL_DATE    Out Varchar2,
          P_DESCRIPTION      Out Varchar2,
          P_Application_Date Out Varchar2,
          P_HOD_Remarks      Out Varchar2,
          P_Hr_Remarks       Out Varchar2,
          P_Lead_Remarks     Out Varchar2,

          p_message_type     Out Varchar2,
          p_message_text     Out Varchar2
   ) As
   v_empno        Varchar2(5);
   v_user_tcp_ip  Varchar2(5) := 'NA';
   v_message_type Number      := 0;
Begin
   v_empno        := get_empno_from_meta_id(p_meta_id);

   If v_empno = 'ERRRR' Then
      p_message_type := 'KO';
      p_message_text := 'Invalid employee number';
      Return;
   End If;

   Select A.EMPNO ||' - ' ||GetEmpName(A.EMPNO) As Employee,
          A.PROJNO As PROJNO,
          GetEmpName(A.Lead_Apprl_EmpNo) As Lead_Name,
          to_char(A.PDATE, 'dd-Mon-yyyy') As Attendance_Date,
          to_char(A.START_HH)
          || ':'
          || to_char(A.START_MM) As Punch_In_Time,
          to_char(A.END_HH)
          || ':'
          || to_char(A.END_MM) As Punch_Out_Time,
          A.REMARKS As,
          A.LOCATION As office,
          Case A.LEAD_APPRL 
               when 0 then 'Pending'
               when 1 then 'Approved'
               when 2 then 'Rejected'
               Else '' end  As Lead_Apprl,
          to_char(A.LEAD_APPRL_DATE, 'dd-Mon-yyyy') As LEAD_APPRL_DATE,
          A.LEAD_APPRL_EMPNO As LEAD_APPRL_EMPNO,
          Case A.HOD_APPRL 
               when 0 then 'Pending'
               when 1 then 'Approved'
               when 2 then 'Rejected'
               Else '' end As HOD_APPRL,
          to_char(A.HOD_APPRL_DATE, 'dd-Mon-yyyy') As HOD_APPRL_DATE,
          Case A.HRD_APPRL 
               when 0 then 'Pending'
               when 1 then 'Approved'
               when 2 then 'Rejected'
               Else '' end  As HR_APPRL,
          to_char(A.HRD_APPRL_DATE, 'dd-Mon-yyyy') As HR_APPRL_DATE,
          A.DESCRIPTION As DESCRIPTION,
          to_char(A.app_date, 'dd-Mon-yyyy') As Application_Date,
          A.HODREASON As HOD_Remarks,
          A.HRDREASON As Hr_Remarks,
          A.LEAD_REASON As Lead_Remarks
     Into P_Employee,
          P_PROJNO,
          P_Lead_Name,
          P_Attendance_Date,
          P_Punch_In_Time,
          P_Punch_Out_Time,
          P_REMARKS,
          P_Office,
          P_LEAD_APPRL,
          P_LEAD_APPRL_DATE,
          P_LEAD_APPRL_EMPNO,
          P_HOD_APPRL,
          P_HOD_APPRL_DATE,
          P_HR_APPRL,
          P_HR_APPRL_DATE,
          P_DESCRIPTION,
          P_Application_Date,
          P_HOD_Remarks,
          P_Hr_Remarks,
          P_Lead_Remarks
     From SS_HOLIDAY_ATTENDANCE A
    Where A.APP_NO = P_Application_Id;

   p_message_type := 'OK';
   p_message_text := 'Procedure executed successfully.';

   Exception
   When Others Then
      p_message_type := 'KO';
      p_message_text := 'ERR :- '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

End sp_holiday_details;

   --  GRANT EXECUTE ON "IOT_HOLIDAY_QRY" TO "TCMPL_APP_CONFIG";

End iot_holiday_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_HOLIDAY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_HOLIDAY" As

   Procedure sp_add_holiday(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_office           Varchar2,
      p_date             Date,
      p_project          Varchar2,
      p_approver         Varchar2,
      p_hh1              Varchar2,
      p_mi1              Varchar2,
      p_hh2              Varchar2,
      p_mi2              Varchar2,
      p_reason           Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno        Varchar2(5);
      v_user_tcp_ip  Varchar2(5) := 'NA';
      v_message_type Number      := 0;
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      holiday_attendance.sp_add_holiday(
         p_person_id     => p_person_id,
         p_meta_id       => p_meta_id,
         p_from_date     => p_date,
         p_projno        => p_project,
         p_last_hh       => to_number(Trim(p_hh1)),
         p_last_mn       => to_number(Trim(p_mi1)),
         p_last_hh1      => to_number(Trim(p_hh2)),
         p_last_mn1      => to_number(Trim(p_mi2)),
         p_lead_approver => p_approver,
         p_remarks       => p_reason,
         p_location      => Trim(P_office),
         p_user_tcp_ip   => Trim(v_user_tcp_ip),
         p_message_type  => p_message_type,
         p_message_text  => p_message_text
      );

      If v_message_type = ss.failure Then
         p_message_type := 'KO';
      Else
         p_message_type := 'OK';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_add_holiday;

   Procedure sp_delete_holiday(
      p_person_id        Varchar2,
      p_meta_id          Varchar2,

      p_application_id   Varchar2,

      p_message_type Out Varchar2,
      p_message_text Out Varchar2
   ) As
      v_empno        Varchar2(5);
      v_user_tcp_ip  Varchar2(5) := 'NA';
      v_message_type Number      := 0;
   Begin
      v_empno := get_empno_from_meta_id(p_meta_id);

      If v_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      holiday_attendance.sp_delete_holiday(
         p_person_id      => p_person_id,
         p_meta_id        => p_meta_id,
         p_application_id => p_application_id,
         p_message_type   => p_message_type,
         p_message_text   => p_message_text
      );

      If v_message_type = ss.failure Then
         p_message_type := 'KO';
      Else
         p_message_type := 'OK';
      End If;

   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'Err - '
                           || sqlcode
                           || ' - '
                           || sqlerrm;

   End sp_delete_holiday;

   Procedure sp_holiday_approval(
      p_person_id         Varchar2,
      p_meta_id           Varchar2,

      p_holiday_approvals typ_tab_string,
      p_approver_profile  Number,
      p_message_type Out  Varchar2,
      p_message_text Out  Varchar2
   ) As
      v_app_no            Varchar2(70);
      v_approval          Number;
      v_remarks           Varchar2(70);
      v_count             Number;
      strsql              Varchar2(600);
      v_odappstat_rec     ss_odappstat%rowtype;
      v_approver_empno    Varchar2(5);
      v_user_tcp_ip       Varchar2(30);
      v_msg_type          Varchar2(20);
      v_msg_text          Varchar2(1000);
      v_medical_cert_file Varchar2(200);
   Begin

      v_approver_empno := get_empno_from_meta_id(p_meta_id);
      If v_approver_empno = 'ERRRR' Then
         p_message_type := 'KO';
         p_message_text := 'Invalid employee number';
         Return;
      End If;

      Null;

      Commit;
      p_message_type   := 'OK';
      p_message_text   := 'Procedure executed successfully.';
   Exception
      When Others Then
         p_message_type := 'KO';
         p_message_text := 'ERR :- '
                           || sqlcode
                           || ' - '
                           || sqlerrm;
   End;

   Procedure sp_holiday_approval_lead(
      p_person_id         Varchar2,
      p_meta_id           Varchar2,

      p_holiday_approvals typ_tab_string,

      p_message_type Out  Varchar2,
      p_message_text Out  Varchar2
   )
   As
   Begin
      sp_holiday_approval(
         p_person_id         => p_person_id,
         p_meta_id           => p_meta_id,

         p_holiday_approvals => p_holiday_approvals,
         p_approver_profile  => user_profile.type_lead,
         p_message_type      => p_message_type,
         p_message_text      => p_message_text
      );
   End;

   Procedure sp_holiday_approval_hod(
      p_person_id         Varchar2,
      p_meta_id           Varchar2,

      p_holiday_approvals typ_tab_string,

      p_message_type Out  Varchar2,
      p_message_text Out  Varchar2
   )
   As
   Begin
      sp_holiday_approval(
         p_person_id         => p_person_id,
         p_meta_id           => p_meta_id,

         p_holiday_approvals => p_holiday_approvals,
         p_approver_profile  => user_profile.type_hod,
         p_message_type      => p_message_type,
         p_message_text      => p_message_text
      );
   End sp_holiday_approval_hod;

   Procedure sp_holiday_approval_hr(
      p_person_id         Varchar2,
      p_meta_id           Varchar2,

      p_holiday_approvals typ_tab_string,

      p_message_type Out  Varchar2,
      p_message_text Out  Varchar2
   )
   As
   Begin
      sp_holiday_approval(
         p_person_id         => p_person_id,
         p_meta_id           => p_meta_id,

         p_holiday_approvals => p_holiday_approvals,
         p_approver_profile  => user_profile.type_hrd,
         p_message_type      => p_message_type,
         p_message_text      => p_message_text
      );
   End sp_holiday_approval_hr;

End IOT_HOLIDAY;
/
---------------------------
--Changed PACKAGE BODY
--IOT_GUEST_MEET_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_GUEST_MEET_QRY" As

    Function get_guest_attendance(
        p_empno       Varchar2,
        p_start_date  Date Default null,
        p_end_date    Date Default null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For
            Select
                *
            From
                (
                    Select
                        to_char(ss_guest_register.modified_on, 'dd-Mon-yyyy') As applied_on,
                        ss_guest_register.app_no                              As app_no,
                        to_char(ss_guest_register.meet_date, 'dd-Mon-yyyy')   As meeting_date,
                        to_char(ss_guest_register.meet_date, 'hh:mi AM')      As meeting_time,
                        ss_guest_register.host_name                           As host_name,
                        ss_guest_register.guest_name                          As guest_name,
                        ss_guest_register.guest_co                            As guest_company,
                        ss_guest_register.meet_off                            As meeting_place,
                        ss_guest_register.remarks                             As remarks,
                        Case
                            When trunc(ss_guest_register.meet_date) > trunc(sysdate) Then
                                1
                            Else
                                0
                        End                                                   delete_allowed,
                        Row_Number() Over (Order By ss_guest_register.modified_on Desc) row_number,
                        Count(*) Over ()                             total_row
                    From
                        ss_guest_register
                    Where                           
                        ss_guest_register.modified_by = p_empno 
                         And trunc(ss_guest_register.meet_date) >= nvl(p_start_date, trunc(sysdate))
                        And trunc(ss_guest_register.meet_date) <= nvl(p_end_date, trunc(ss_guest_register.meet_date))                             
                    Order By ss_guest_register.meet_date, ss_guest_register.modified_on
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;

    End;

    Function fn_guest_attendance(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date Default null,
        p_end_date    Date Default null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := get_guest_attendance(v_empno, p_start_date, p_end_date, p_row_number, p_page_length);
        Return c;
    End fn_guest_attendance;

End iot_guest_meet_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_GUEST_MEET
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_GUEST_MEET" AS

    Procedure sp_add_meet(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

		P_guest_name       Varchar2,
		P_guest_company    Varchar2,
        p_hh1              Varchar2,
        p_mi1              Varchar2,
        p_date             Date,
        P_office           Varchar2,
        p_reason           Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_empno         Varchar2(5);
        v_emp_name      Varchar2(60);
        v_count         Number;
        v_lead_approval Number := 0;
        v_hod_approval  Number := 0;
        v_desc          Varchar2(60);
        v_message_type  Number := 0;
    Begin
        v_empno    := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        v_emp_name := get_emp_name(v_empno);

        meet.add_meet(
            param_host_name		=> v_emp_name,
            param_guest_name	=> P_guest_name,
            param_guest_co		=> P_guest_company,
            param_meet_date		=> to_char(p_date, 'dd/mm/yyyy'),
            param_meet_hh		=> to_number(Trim(p_hh1)),
            param_meet_mn		=> to_number(Trim(p_mi1)),
            param_meet_off		=> Trim(P_office),
            param_remarks		=> p_reason,
            param_modified_by	=> v_empno,
            param_success		=> v_message_type,
            param_msg			=> p_message_text
        );

        If v_message_type = ss.failure Then
             p_message_type := 'KO';
         Else
             p_message_type := 'OK';
         End If;

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_add_meet;

    Procedure sp_delete_meet(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_application_id   Varchar2,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_count    Number;
        v_empno    Varchar2(5);
        v_tab_from Varchar2(2);
    Begin
        v_count        := 0;
        v_empno        := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        Select
            Count(*)
        Into
            v_count
        From
            ss_guest_register
        Where
            Trim(app_no) = Trim(p_application_id)
            And modified_by    = v_empno;

        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Err - Invalid application id';
            Return;
        End If;

        meet.del_meet(paramappno   => p_application_id);

        p_message_type := 'OK';
        p_message_text := 'Procedure executed successfully.';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_delete_meet;

END iot_guest_meet;
/
---------------------------
--Changed PACKAGE BODY
--IOT_EXTRAHOURS_QRY
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_EXTRAHOURS_QRY" As

    Function fn_extra_hrs_claims(
        p_empno        Varchar2,
        p_req_for_self Varchar2,
        p_start_date   Date Default Null,
        p_row_number   Number,
        p_page_length  Number
    ) Return Sys_Refcursor As
        v_request_for_self Varchar2(20);
        c                  Sys_Refcursor;
    Begin
        Open c For

            Select
                claims.*
            From
                (

                    Select
                        a.app_date                                 As claim_date,
                        a.app_no                                   As claim_no,
                        month || '-' || yyyy                       As claim_period,
                        get_emp_name(nvl(a.lead_apprl_empno, ''))  lead_name,
                        ot                                         As claimed_ot,
                        hhot                                       As claimed_hhot,
                        co                                         As claimed_co,
                        ss.approval_text(nvl(a.lead_apprl, 0))     lead_approval_desc,
                        ss.approval_text(nvl(a.hod_apprl, 0))      hod_approval_desc,
                        ss.approval_text(nvl(a.hrd_apprl, 0))      hrd_approval_desc,
                        a.lead_remarks,
                        a.hod_remarks,
                        a.hrd_remarks,
                        nvl(a.lead_apprd_ot, 0)                    As lead_approved_ot,
                        nvl(a.lead_apprd_hhot, 0)                  As lead_approved_hhot,
                        nvl(a.lead_apprd_co, 0)                    As lead_approved_co,
                        nvl(a.hod_apprd_ot, 0)                     As hod_approved_ot,
                        nvl(a.hod_apprd_hhot, 0)                   As hod_approved_hhot,
                        nvl(a.hod_apprd_co, 0)                     As hod_approved_co,
                        Case
                            When nvl(a.hrd_apprd_ot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_ot
                        End                                        As hrd_approved_ot,
                        Case
                            When nvl(a.hrd_apprd_hhot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_hhot
                        End                                        As hrd_approved_hhot,
                        Case
                            When nvl(a.hrd_apprd_co, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_co
                        End                                        As hrd_approved_co,
                        Case
                            When p_req_for_self                  = 'OK'
                                And nvl(a.lead_apprl, ss.pending) In (ss.pending, ss.apprl_none)
                                And nvl(a.hod_apprl, ss.pending) = ss.pending
                            Then
                                1
                            Else
                                0
                        End                                        can_delete_claim,
                        Row_Number() Over (Order By app_date Desc) row_number,
                        Count(*) Over ()                           total_row

                    From
                        ss_otmaster a
                    Where
                        a.empno             = p_empno
                        And to_number(a.yyyy || a.mon) >= to_number(to_char(add_months(sysdate, - 24), 'YYYYMM'))
                        And a.yyyy || a.mon = Case
                            When p_start_date Is Null Then
                                a.yyyy || a.mon
                            Else
                                to_char(p_start_date, 'yyyymm')
                        End
                    Order By a.app_date Desc
                ) claims
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;
    End fn_extra_hrs_claims;

    Function fn_extra_hrs_claims_4_self(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_start_date  Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c       := fn_extra_hrs_claims(
                       p_empno        => v_empno,
                       p_req_for_self => 'OK',
                       p_start_date   => p_start_date,
                       p_row_number   => p_row_number,
                       p_page_length  => p_page_length
                   );
        Return c;
    End fn_extra_hrs_claims_4_self;

    Function fn_extra_hrs_claims_4_other(
        p_person_id   Varchar2,
        p_meta_id     Varchar2,
        p_empno       Varchar2,
        p_start_date  Date Default Null,
        p_row_number  Number,
        p_page_length Number
    ) Return Sys_Refcursor As
        v_count              Number;
        c                    Sys_Refcursor;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        Select
            Count(*)
        Into
            v_count
        From
            ss_emplmast
        Where
            empno = p_empno;
        If v_count = 0 Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        c := fn_extra_hrs_claims(
                 p_empno        => p_empno,
                 p_req_for_self => 'KO',
                 p_start_date   => p_start_date,
                 p_row_number   => p_row_number,
                 p_page_length  => p_page_length
             );
        Return c;
    End fn_extra_hrs_claims_4_other;

    Function fn_extra_hrs_claim_detail(
        p_person_id Varchar2,
        p_meta_id   Varchar2,
        p_claim_no  Varchar2
    ) Return Sys_Refcursor As
        c Sys_Refcursor;
    Begin
        Open c For

            Select
                ot_detail.*,
                to_hrs(nvl(get_time_sheet_work_hrs(empno, pdate), 0) * 60)  As ts_work_hrs,
                to_hrs(nvl(get_time_sheet_extra_hrs(empno, pdate), 0) * 60) As ts_extra_hrs
            From
                (
                    Select
                        empno,
                        yyyy || '-' || mon                                             As claim_period,
                        app_no                                                         As claim_no,
                        d_details                                                      As day_detail,
                        w_details                                                      As week_detail,
                        w_ot_max                                                       As week_extrahours_applicable,
                        w_ot_claim                                                     As week_extrahours_claim,
                        w_co                                                           As week_claimed_co,
                        w_hhot_claim                                                   As week_holiday_ot_claim,
                        w_hhot_max                                                     As week_holiday_ot_applicable,
                        to_date(day_yyyy || '-' || of_mon || '-' || day, 'yyyy-mm-dd') As pdate
                    From
                        ss_otdetail
                    Where
                        app_no = p_claim_no
                ) ot_detail
            Order By
                pdate;
        Return c;
    End fn_extra_hrs_claim_detail;

    Function fn_pending_lead_approval(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,
        p_application_id Varchar2 Default Null,
        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        e_employee_not_found Exception;
        v_empno              Varchar2(5);
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Open c For
            Select
                *
            From
                (

                    Select
                        e.empno || ' - ' || e.name                                               As employee,
                        a.app_date                                                               As claim_date,
                        a.app_no                                                                 As claim_no,
                        month || '-' || yyyy                                                     As claim_period,
                        a.lead_apprl_empno || ' - ' || get_emp_name(nvl(a.lead_apprl_empno, '')) lead_name,
                        ot                                                                       As claimed_ot,
                        hhot                                                                     As claimed_hhot,
                        co                                                                       As claimed_co,
                        ss.approval_text(nvl(a.lead_apprl, 0))                                   lead_approval_desc,
                        ss.approval_text(nvl(a.hod_apprl, 0))                                    hod_approval_desc,
                        ss.approval_text(nvl(a.hrd_apprl, 0))                                    hrd_approval_desc,
                        a.lead_remarks,
                        a.hod_remarks,
                        a.hrd_remarks,
                        nvl(a.lead_apprd_ot, 0)                                                  As lead_approved_ot,
                        nvl(a.lead_apprd_hhot, 0)                                                As lead_approved_hhot,
                        nvl(a.lead_apprd_co, 0)                                                  As lead_approved_co,
                        nvl(a.hod_apprd_ot, 0)                                                   As hod_approved_ot,
                        nvl(a.hod_apprd_hhot, 0)                                                 As hod_approved_hhot,
                        nvl(a.hod_apprd_co, 0)                                                   As hod_approved_co,
                        Case
                            When nvl(a.hrd_apprd_ot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_ot
                        End                                                                      As hrd_approved_ot,
                        Case
                            When nvl(a.hrd_apprd_hhot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_hhot
                        End                                                                      As hrd_approved_hhot,
                        Case
                            When nvl(a.hrd_apprd_co, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_co
                        End                                                                      As hrd_approved_co,
                        Case
                            When nvl(a.lead_apprl, ss.pending) In (ss.pending, ss.apprl_none)
                                And nvl(a.hod_apprl, ss.pending) = ss.pending
                            Then
                                1
                            Else
                                0
                        End                                                                      can_delete_claim,
                        Row_Number() Over (Order By app_date Desc)                               row_number,
                        Count(*) Over ()                                                         total_row

                    From
                        ss_otmaster a,
                        ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0)    = 0)
                        And e.empno            = a.empno
                        And a.lead_apprl_empno = v_empno
                        And a.app_no           = nvl(p_application_id, a.app_no)
                        And to_number(a.yyyy || a.mon) >= to_number(to_char(add_months(sysdate, - 24), 'YYYYMM'))
                    Order By a.app_date Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;
    End fn_pending_lead_approval;

    Function fn_pending_hod_approval(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,
        p_application_id Varchar2 Default Null,
        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        e_employee_not_found Exception;
        v_empno              Varchar2(5);
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Open c For
            Select
                *
            From
                (

                    Select
                        e.empno || ' - ' || e.name                 As employee,
                        a.app_date                                 As claim_date,
                        a.app_no                                   As claim_no,
                        month || '-' || yyyy                       As claim_period,
                        get_emp_name(nvl(a.lead_apprl_empno, ''))  lead_name,
                        ot                                         As claimed_ot,
                        hhot                                       As claimed_hhot,
                        co                                         As claimed_co,
                        ss.approval_text(nvl(a.lead_apprl, 0))     lead_approval_desc,
                        ss.approval_text(nvl(a.hod_apprl, 0))      hod_approval_desc,
                        ss.approval_text(nvl(a.hrd_apprl, 0))      hrd_approval_desc,
                        a.lead_remarks,
                        a.hod_remarks,
                        a.hrd_remarks,
                        nvl(a.lead_apprd_ot, 0)                    As lead_approved_ot,
                        nvl(a.lead_apprd_hhot, 0)                  As lead_approved_hhot,
                        nvl(a.lead_apprd_co, 0)                    As lead_approved_co,
                        nvl(a.hod_apprd_ot, 0)                     As hod_approved_ot,
                        nvl(a.hod_apprd_hhot, 0)                   As hod_approved_hhot,
                        nvl(a.hod_apprd_co, 0)                     As hod_approved_co,
                        Case
                            When nvl(a.hrd_apprd_ot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_ot
                        End                                        As hrd_approved_ot,
                        Case
                            When nvl(a.hrd_apprd_hhot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_hhot
                        End                                        As hrd_approved_hhot,
                        Case
                            When nvl(a.hrd_apprd_co, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_co
                        End                                        As hrd_approved_co,
                        Case
                            When nvl(a.lead_apprl, ss.pending) In (ss.pending, ss.apprl_none)
                                And nvl(a.hod_apprl, ss.pending) = ss.pending
                            Then
                                1
                            Else
                                0
                        End                                        can_delete_claim,
                        Row_Number() Over (Order By app_date Desc) row_number,
                        Count(*) Over ()                           total_row

                    From
                        ss_otmaster a,
                        ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0) In (1, 4))
                        And (nvl(hod_apprl, 0) = 0)
                        And a.empno            = e.empno
                        And a.app_no           = nvl(p_application_id, a.app_no)
                        And e.mngr             = Trim(v_empno)
                        And to_number(a.yyyy || a.mon) >= to_number(to_char(add_months(sysdate, - 24), 'YYYYMM'))
                    Order By a.app_date Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;

    End fn_pending_hod_approval;

    Function fn_pending_onbehalf_approval(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,
        p_application_id Varchar2 Default Null,
        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        e_employee_not_found Exception;
        v_empno              Varchar2(5);
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;
        Open c For
            Select
                *
            From
                (

                    Select
                        e.empno || ' - ' || e.name                 As employee,
                        a.app_date                                 As claim_date,
                        a.app_no                                   As claim_no,
                        month || '-' || yyyy                       As claim_period,
                        get_emp_name(nvl(a.lead_apprl_empno, ''))  lead_name,
                        ot                                         As claimed_ot,
                        hhot                                       As claimed_hhot,
                        co                                         As claimed_co,
                        ss.approval_text(nvl(a.lead_apprl, 0))     lead_approval_desc,
                        ss.approval_text(nvl(a.hod_apprl, 0))      hod_approval_desc,
                        ss.approval_text(nvl(a.hrd_apprl, 0))      hrd_approval_desc,
                        a.lead_remarks,
                        a.hod_remarks,
                        a.hrd_remarks,
                        nvl(a.lead_apprd_ot, 0)                    As lead_approved_ot,
                        nvl(a.lead_apprd_hhot, 0)                  As lead_approved_hhot,
                        nvl(a.lead_apprd_co, 0)                    As lead_approved_co,
                        nvl(a.hod_apprd_ot, 0)                     As hod_approved_ot,
                        nvl(a.hod_apprd_hhot, 0)                   As hod_approved_hhot,
                        nvl(a.hod_apprd_co, 0)                     As hod_approved_co,
                        Case
                            When nvl(a.hrd_apprd_ot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_ot
                        End                                        As hrd_approved_ot,
                        Case
                            When nvl(a.hrd_apprd_hhot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_hhot
                        End                                        As hrd_approved_hhot,
                        Case
                            When nvl(a.hrd_apprd_co, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_co
                        End                                        As hrd_approved_co,
                        Case
                            When nvl(a.lead_apprl, ss.pending) In (ss.pending, ss.apprl_none)
                                And nvl(a.hod_apprl, ss.pending) = ss.pending
                            Then
                                1
                            Else
                                0
                        End                                        can_delete_claim,
                        Row_Number() Over (Order By app_date Desc) row_number,
                        Count(*) Over ()                           total_row

                    From
                        ss_otmaster a,
                        ss_emplmast e
                    Where
                        (nvl(lead_apprl, 0) In (1, 4))
                        And (nvl(hod_apprl, 0) = 0)
                        And a.empno            = e.empno
                        And a.app_no           = nvl(p_application_id, a.app_no)
                        And to_number(a.yyyy || a.mon) >= to_number(to_char(add_months(sysdate, - 24), 'YYYYMM'))
                        And e.mngr In (
                            Select
                                mngr
                            From
                                ss_delegate
                            Where
                                empno = v_empno
                        )
                    Order By a.app_date Desc
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);
        Return c;

        Return c;
    End fn_pending_onbehalf_approval;

    Function fn_pending_hr_approval(
        p_person_id      Varchar2,
        p_meta_id        Varchar2,
        p_application_id Varchar2 Default Null,
        p_row_number     Number,
        p_page_length    Number
    ) Return Sys_Refcursor As
        c                    Sys_Refcursor;
        e_employee_not_found Exception;
        v_empno              Varchar2(5);
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return Null;
        End If;

        Open c For
            Select
                *
            From
                (
                    Select
                        e.empno || ' - ' || e.name                        As employee,
                        a.app_date                                        As claim_date,
                        a.app_no                                          As claim_no,
                        month || '-' || yyyy                              As claim_period,
                        get_emp_name(nvl(a.lead_apprl_empno, ''))         As lead_name,
                        ot                                                As claimed_ot,
                        hhot                                              As claimed_hhot,
                        co                                                As claimed_co,
                        ss.approval_text(nvl(a.lead_apprl, 0))            As lead_approval_desc,
                        ss.approval_text(nvl(a.hod_apprl, 0))             As hod_approval_desc,
                        ss.approval_text(nvl(a.hrd_apprl, 0))             As hrd_approval_desc,
                        a.lead_remarks,
                        a.hod_remarks,
                        a.hrd_remarks,
                        nvl(a.lead_apprd_ot, 0)                           As lead_approved_ot,
                        nvl(a.lead_apprd_hhot, 0)                         As lead_approved_hhot,
                        nvl(a.lead_apprd_co, 0)                           As lead_approved_co,
                        nvl(a.hod_apprd_ot, 0)                            As hod_approved_ot,
                        nvl(a.hod_apprd_hhot, 0)                          As hod_approved_hhot,
                        nvl(a.hod_apprd_co, 0)                            As hod_approved_co,
                        Case
                            When nvl(a.hrd_apprd_ot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_ot
                        End                                               As hrd_approved_ot,
                        Case
                            When nvl(a.hrd_apprd_hhot, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_hhot
                        End                                               As hrd_approved_hhot,
                        Case
                            When nvl(a.hrd_apprd_co, 0) = 0 Then
                                Null
                            Else
                                a.hrd_apprd_co
                        End                                               As hrd_approved_co,
                        Case
                            When nvl(a.lead_apprl, ss.pending) In (ss.pending, ss.apprl_none)
                                And nvl(a.hod_apprl, ss.pending) = ss.pending
                            Then
                                1
                            Else
                                0
                        End                                               As can_delete_claim,
                        e.parent                                          As parent,
                        get_emp_pen_lve_4_month(a.empno, a.yyyy || a.mon) As penalty_hrs,
                        Row_Number() Over (Order By e.parent, e.empno)    As row_number,
                        Count(*) Over ()                                  As total_row
                    From
                        ss_otmaster a,
                        ss_emplmast e
                    Where
                        (nvl(hod_apprl, 0)     = 1)
                        And (nvl(hrd_apprl, 0) = 0)
                        And e.empno            = a.empno
                        And a.app_no           = nvl(p_application_id, a.app_no)
                        And to_number(a.yyyy || a.mon) >= to_number(to_char(add_months(sysdate, - 24), 'YYYYMM'))
                    Order By e.parent, a.empno
                )
            Where
                row_number Between (nvl(p_row_number, 0) + 1) And (nvl(p_row_number, 0) + p_page_length);

        Return c;
    End fn_pending_hr_approval;

End iot_extrahours_qry;
/
---------------------------
--Changed PACKAGE BODY
--IOT_EXTRAHOURS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_EXTRAHOURS" As

    Procedure sp_create_claim(
        p_person_id             Varchar2,
        p_meta_id               Varchar2,
        p_yyyymm                Varchar2,
        p_lead_approver         Varchar2,
        p_selected_compoff_days typ_tab_string,
        p_weekend_totals        typ_tab_string,
        p_sum_compoff_hrs       Number,
        p_sum_weekday_extra_hrs Number,
        p_sum_holiday_extra_hrs Number,
        p_message_type Out      Varchar2,
        p_message_text Out      Varchar2
    ) As
        v_app_no                Varchar2(13);
        v_empno                 Varchar2(5);
        e_employee_not_found    Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_yyyymm_date           Date;
        v_app_mm                Varchar2(2);
        v_app_yyyy              Varchar2(4);
        v_lead_apprl            Number;
        v_lead_apprd_ot         Number;
        v_lead_apprd_hhot       Number;
        v_lead_apprd_co         Number;
        v_lead_apprl_empno      Varchar2(5);
        v_day_date              Date;
        v_co_day                Number;
        v_pos                   Number;
        v_prev_pos              Number;
        v_week_claim_co         Number;
        v_week_claim_othh       Number;
        v_week_claim_otwrk      Number;
        v_week_applicable_otwrk Number;
        v_week_applicable_othh  Number;

    Begin
        v_empno            := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;
        v_yyyymm_date      := to_date(p_yyyymm, 'yyyymm');
        v_app_mm           := substr(p_yyyymm, 5, 2);
        v_app_yyyy         := substr(p_yyyymm, 1, 4);
        v_app_no           := v_empno || '_' || v_app_mm || '_' || v_app_yyyy;
        If nvl(p_sum_compoff_hrs, 0) = 0 And nvl(p_sum_weekday_extra_hrs, 0) = 0 And nvl(p_sum_holiday_extra_hrs, 0) = 0 Then
            p_message_type := 'KO';
            p_message_text := 'CompOff/Extrahours not claimed. Cannot create claim.';
            Return;
        End If;
        v_lead_apprl_empno := upper(trim(p_lead_approver));
        If v_lead_apprl_empno = 'NONE' Then
            v_lead_apprl      := 4;
            v_lead_apprd_ot   := nvl(p_sum_weekday_extra_hrs, 0);
            v_lead_apprd_hhot := nvl(p_sum_holiday_extra_hrs, 0);
            v_lead_apprd_co   := nvl(p_sum_compoff_hrs, 0);
        End If;
        Insert Into ss_otmaster (
            app_no,
            app_date,
            empno,
            mon,
            yyyy,
            month,
            ot,
            hhot,
            co,
            lead_apprl_empno,
            lead_apprl,
            lead_apprd_ot,
            lead_apprd_hhot,
            lead_apprd_co,
            hod_apprl,
            hrd_apprl
        )
        Values(
            v_app_no,
            sysdate,
            v_empno,
            v_app_mm,
            v_app_yyyy,
            to_char(v_yyyymm_date, 'Mon'),
            p_sum_weekday_extra_hrs,
            p_sum_holiday_extra_hrs,
            p_sum_compoff_hrs,
            v_lead_apprl_empno,
            v_lead_apprl,
            v_lead_apprd_ot,
            v_lead_apprd_hhot,
            v_lead_apprd_co,
            0,
            0
        );

        Insert Into ss_otdetail(
            empno,
            mon,
            yyyy,
            day,
            d_details,
            w_details,
            of_mon,
            app_no,
            wk_of_year,
            day_yyyy
        )
        Select
            v_empno,
            v_app_mm,
            v_app_yyyy,
            dd,
            to_char(punch_date, 'dd-Mon-yyyy') || ';' ||
            ddd || ';' ||
            shift_code || ';' ||
            first_punch || ';' ||
            last_punch || ';' ||
            to_hrs(wrk_hrs) || ';' ||
            to_hrs(delta_hrs) || ';' ||
            to_hrs(extra_hrs) || ';' ||
            remarks || ';' ||
            get_holiday(trunc(punch_date)) || ';' d_details,
            Case
                When is_sunday = 2 Then
                    wk_sum_work_hrs || ';' || wk_bfwd_delta_hrs || ';' || wk_cfwd_delta_hrs || ';' || wk_penalty_leave_hrs ||
                    ';' || wk_sum_delta_hrs || ';'
                Else
                    ''
            End                                   w_details,
            to_char(punch_date, 'mm'),
            v_app_no,
            wk_of_year,
            to_char(punch_date, 'yyyy')
        From
            Table(iot_punch_details.fn_punch_details_4_self(
                    p_person_id => p_person_id,
                    p_meta_id   => Null,
                    p_empno     => v_empno,
                    p_yyyymm    => p_yyyymm,
                    p_for_ot    => 'OK')
            );
        --p_message_type     := 'OK';
        --Return;
        For i In 1..p_selected_compoff_days.count

        Loop
            With
                csv As (
                    Select
                        p_selected_compoff_days(i) str
                    From
                        dual
                )
            Select
                to_date(regexp_substr(str, '[^,]+', 1, 1), 'dd-Mon-yyyy') c1,
                to_number(regexp_substr(str, '[^,]+', 1, 2))              c2
            Into
                v_day_date, v_pos
            From
                csv;
            Update
                ss_otdetail
            Set
                co_bool = 1
            Where
                app_no       = v_app_no
                And day_yyyy = to_char(v_day_date, 'yyyy')
                And of_mon   = to_char(v_day_date, 'mm')
                And day      = to_number(to_char(v_day_date, 'dd'));

        End Loop;
        /*
                p_message_type     := 'OK';
                Return;
        */
        For i In 1..p_weekend_totals.count
        Loop
            With
                csv As (
                    Select
                        p_weekend_totals(i) str
                    From
                        dual
                )
            Select
                to_date(regexp_substr(str, '[^,]+', 1, 1), 'dd-Mon-yyyy') c1,
                to_number(regexp_substr(str, '[^,]+', 1, 2))              c2,
                to_number(regexp_substr(str, '[^,]+', 1, 3))              c3,
                to_number(regexp_substr(str, '[^,]+', 1, 4))              c4,
                to_number(regexp_substr(str, '[^,]+', 1, 5))              c5,
                to_number(regexp_substr(str, '[^,]+', 1, 6))              c6
            Into
                v_day_date,
                v_week_claim_co,
                v_week_applicable_othh,
                v_week_claim_othh,
                v_week_applicable_otwrk,
                v_week_claim_otwrk
            From
                csv;
            Update
                ss_otdetail
            Set
                w_co = v_week_claim_co,
                w_ot_max = v_week_applicable_otwrk,
                w_ot_claim = v_week_claim_otwrk,
                w_hhot_max = v_week_applicable_othh,
                w_hhot_claim = v_week_claim_othh
            Where
                app_no       = v_app_no
                And day_yyyy = to_char(v_day_date, 'yyyy')
                And of_mon   = to_char(v_day_date, 'mm')
                And day      = to_number(to_char(v_day_date, 'dd'));
        End Loop;

        p_message_type     := 'OK';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_create_claim;

    Procedure sp_delete_claim(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,
        p_claim_no         Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_count              Number;
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin

        v_empno        := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;
        Delete
            From ss_otdetail
        Where
            app_no = p_claim_no;
        Delete
            From ss_otmaster
        Where
            app_no = p_claim_no;
        Commit;
        p_message_type := 'OK';
        p_message_text := 'Claim deleted successfully.';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_delete_claim;

    Procedure sp_extra_hrs_adjst_details(
        p_application_id         Varchar2,
        p_person_id              Varchar2,
        p_meta_id                Varchar2,

        p_emp_name           Out Varchar2,
        p_claim_no           Out Varchar2,

        p_claimed_ot         Out Varchar2,
        p_claimed_hhot       Out Varchar2,
        p_claimed_co         Out Varchar2,

        p_lead_approved_ot   Out Varchar2,
        p_lead_approved_hhot Out Varchar2,
        p_lead_approved_co   Out Varchar2,

        p_hod_approved_ot    Out Varchar2,
        p_hod_approved_hhot  Out Varchar2,
        p_hod_approved_co    Out Varchar2,

        p_hr_approved_ot     Out Varchar2,
        p_hr_approved_hhot   Out Varchar2,
        p_hr_approved_co     Out Varchar2,

        p_message_type       Out Varchar2,
        p_message_text       Out Varchar2
    ) As

        v_onduty_app ss_ondutyapp%rowtype;
        v_depu       ss_depu%rowtype;
        v_empno      Varchar2(5);
        v_count      Number;

    Begin

        Select
            Count(*)
        Into
            v_count
        From
            ss_otmaster
        Where
            Trim(app_no) = Trim(p_application_id);

        If v_count = 0 Then
            p_message_type := 'KO';
            p_message_text := 'Err - Invalid application id';
            Return;
        End If;

        Select
            e.empno || ' - ' || e.name,
            a.app_no,
            nvl(a.ot / 60, 0),
            nvl(a.hhot / 60, 0),
            nvl(a.co / 60, 0),
            nvl(a.lead_apprd_ot / 60, 0),
            nvl(a.lead_apprd_hhot, 0),
            nvl(a.lead_apprd_co, 0),
            nvl(a.hod_apprd_ot, 0),
            nvl(a.hod_apprd_hhot, 0),
            nvl(a.hod_apprd_co, 0),
            Case
                When nvl(a.hrd_apprd_ot, 0) = 0 Then
                    Null
                Else
                    a.hrd_apprd_ot
            End,
            Case
                When nvl(a.hrd_apprd_hhot, 0) = 0 Then
                    Null
                Else
                    a.hrd_apprd_hhot
            End,
            Case
                When nvl(a.hrd_apprd_co, 0) = 0 Then
                    Null
                Else
                    a.hrd_apprd_co
            End
        Into
            p_emp_name,
            p_claim_no,
            p_claimed_ot,
            p_claimed_hhot,
            p_claimed_co,
            p_lead_approved_ot,
            p_lead_approved_hhot,
            p_lead_approved_co,
            p_hod_approved_ot,
            p_hod_approved_hhot,
            p_hod_approved_co,
            p_hr_approved_ot,
            p_hr_approved_hhot,
            p_hr_approved_co
        From
            ss_otmaster a,
            ss_emplmast e
        Where
            a.empno      = e.empno
            And a.app_no = p_application_id;

        p_message_type := 'OK';

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;
    End sp_extra_hrs_adjst_details;

    Procedure sp_claim_approval(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_approvals  typ_tab_string,
        p_approver_profile Number,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_app_no         Varchar2(70);
        v_approval       Number;
        v_remarks        Varchar2(70);
        v_count          Number;
        v_rec_count      Number;
        sqlpart1         Varchar2(60) := 'Update SS_OTMaster ';
        sqlpart2         Varchar2(500);
        sqlpart3         Varchar2(500);
        strsql           Varchar2(1000);
        v_otmaster_rec   ss_otmaster%rowtype;
        v_approver_empno Varchar2(5);
        v_user_tcp_ip    Varchar2(30);
        v_msg_type       Number;
        v_msg_text       Varchar2(1000);
    Begin

        v_approver_empno := get_empno_from_meta_id(p_meta_id);
        If v_approver_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        sqlpart3         := ' ';
        sqlpart2         := ' set ApproverProfile_APPRL = :Approval, ApproverProfile_Code = :Approver_EmpNo, ApproverProfile_APPRL_DT = Sysdate,
                    ApproverProfile_TCP_IP = :User_TCP_IP , ApproverProfile_Remarks = :Remarks ';
        If p_approver_profile = user_profile.type_hod Or p_approver_profile = user_profile.type_sec Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'HOD');

            sqlpart3 := sqlpart3 || ', HOD_Apprd_OT = Lead_Apprd_OT, ';
            sqlpart3 := sqlpart3 || 'HOD_Apprd_HHOT = Lead_Apprd_HHOT, ';
            sqlpart3 := sqlpart3 || 'HOD_Apprd_CO = Lead_Apprd_CO ';
        Elsif p_approver_profile = user_profile.type_hrd Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'HRD');

            sqlpart3 := sqlpart3 || ', HRD_Apprd_OT = HOD_Apprd_OT, ';
            sqlpart3 := sqlpart3 || 'HRD_Apprd_HHOT = HOD_Apprd_HHOT, ';
            sqlpart3 := sqlpart3 || 'HRD_Apprd_CO = HOD_Apprd_CO ';
        Elsif p_approver_profile = user_profile.type_lead Then
            sqlpart2 := replace(sqlpart2, 'ApproverProfile', 'LEAD');

            sqlpart3 := sqlpart3 || ', Lead_Apprd_OT = OT, ';
            sqlpart3 := sqlpart3 || 'Lead_Apprd_HHOT = HHOT, ';
            sqlpart3 := sqlpart3 || 'Lead_Apprd_CO = CO ';
        End If;

        For i In 1..p_claim_approvals.count
        Loop

            With
                csv As (
                    Select
                        p_claim_approvals(i) str
                    From
                        dual
                )
            Select
                Trim(regexp_substr(str, '[^~!~]+', 1, 1))            app_no,
                to_number(Trim(regexp_substr(str, '[^~!~]+', 1, 2))) approval
            Into
                v_app_no, v_approval
            From
                csv;

            /*
            p_message_type := 'OK';
            p_message_text := 'Debug 1 - ' || p_leave_approvals(i);
            Return;
            */
            strsql := sqlpart1 || ' ' || sqlpart2;

            If v_approval = ss.approved Then
                strsql := strsql || ' ' || sqlpart3;
            End If;
            strsql := strsql || '  Where App_No = :p_app_no';
            /*
            p_message_type := 'OK';
            p_message_text := 'Debug - ' || v_approval || ' - ' || strsql;
            Return;
            */
            Execute Immediate strsql
                Using v_approval, v_approver_empno, v_user_tcp_ip, v_remarks, trim(v_app_no);

            If p_approver_profile = user_profile.type_hrd And v_approval = ss.approved Then
                Select
                    *
                Into
                    v_otmaster_rec
                From
                    ss_otmaster
                Where
                    app_no = v_app_no;

                If nvl(v_otmaster_rec.hrd_apprd_co, 0) > 0 Then
                    Insert Into ss_leaveledg(
                        app_no,
                        app_date,
                        leavetype,
                        description,
                        empno,
                        leaveperiod,
                        db_cr,
                        bdate,
                        adj_type
                    )
                    Values(
                        v_app_no,
                        sysdate,
                        'CO',
                        'Compensatory Off Credit',
                        v_otmaster_rec.empno,
                        v_otmaster_rec.hrd_apprd_co / 60,
                        'C',
                        to_date(v_otmaster_rec.yyyy || v_otmaster_rec.mon, 'yyyymm'),
                        'CO'

                    );

                End If;
            End If;

        End Loop;

        Commit;
        p_message_type   := 'OK';
        p_message_text   := 'Procedure executed successfully.';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End sp_claim_approval;

    Procedure sp_claim_approval_lead(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_approvals  typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin

        sp_claim_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_claim_approvals  => p_claim_approvals,
            p_approver_profile => user_profile.type_lead,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End sp_claim_approval_lead;

    Procedure sp_claim_approval_hod(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_approvals  typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_claim_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_claim_approvals  => p_claim_approvals,
            p_approver_profile => user_profile.type_hod,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End sp_claim_approval_hod;

    Procedure sp_claim_approval_hr(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_approvals  typ_tab_string,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_claim_approval(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_claim_approvals  => p_claim_approvals,
            p_approver_profile => user_profile.type_hrd,
            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End sp_claim_approval_hr;

    Procedure sp_claim_adjustment(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_no         Varchar2,
        p_approved_ot      Number,
        p_approved_hhot    Number,
        p_approved_co      Number,
        p_approver_profile Number,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_app_no         Varchar2(70);
        v_approval       Number;
        v_remarks        Varchar2(70);
        v_count          Number;
        v_rec_count      Number;
        sqlpart1         Varchar2(60) := 'Update SS_OTMaster ';
        sqlpart2         Varchar2(500);
        sqlpart3         Varchar2(500);
        strsql           Varchar2(1000);
        v_otmaster_rec   ss_otmaster%rowtype;
        v_approver_empno Varchar2(5);
        v_user_tcp_ip    Varchar2(30);
        v_msg_type       Number;
        v_msg_text       Varchar2(1000);
    Begin
        v_approver_empno := get_empno_from_meta_id(p_meta_id);
        If v_approver_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;
        v_app_no         := trim(p_claim_no);
        v_approval       := ss.approved;
        sqlpart2         := ' set ApproverProfile_APPRL = :Approval, ApproverProfile_Code = :Approver_EmpNo, ApproverProfile_APPRL_DT = Sysdate,
                    ApproverProfile_TCP_IP = :User_TCP_IP , ApproverProfile_Remarks = :Remarks ';
        sqlpart3         := ', ';
        sqlpart3         := sqlpart3 || ' ApproverProfile_Apprd_OT = :Apprd_OT, ';
        sqlpart3         := sqlpart3 || ' ApproverProfile_Apprd_HHOT = :Apprd_HHOT, ';
        sqlpart3         := sqlpart3 || ' ApproverProfile_Apprd_CO = :Apprd_CO ';

        strsql           := sqlpart1 || sqlpart2 || sqlpart3 || '  Where trim(App_No) = trim(:p_app_no)';

        If p_approver_profile = user_profile.type_hod Or p_approver_profile = user_profile.type_sec Then
            strsql := replace(strsql, 'ApproverProfile', 'HOD');

        Elsif p_approver_profile = user_profile.type_hrd Then
            strsql := replace(strsql, 'ApproverProfile', 'HRD');

        Elsif p_approver_profile = user_profile.type_lead Then
            strsql := replace(strsql, 'ApproverProfile', 'LEAD');

        End If;
        /*
        p_message_type   := 'OK';
        p_message_text   := strsql;
        return;
        */
        Execute Immediate strsql
            Using v_approval, v_approver_empno, v_user_tcp_ip, v_remarks, p_approved_ot, p_approved_hhot, p_approved_co, trim(
            v_app_no);
        If p_approver_profile = user_profile.type_hrd And v_approval = ss.approved Then
            Select
                *
            Into
                v_otmaster_rec
            From
                ss_otmaster
            Where
                app_no = v_app_no;

            If nvl(v_otmaster_rec.hrd_apprd_co, 0) > 0 Then
                Insert Into ss_leaveledg(
                    app_no,
                    app_date,
                    leavetype,
                    description,
                    empno,
                    leaveperiod,
                    db_cr,
                    bdate,
                    adj_type
                )
                Values(
                    v_app_no,
                    sysdate,
                    'CO',
                    'Compensatory Off Credit',
                    v_otmaster_rec.empno,
                    v_otmaster_rec.hrd_apprd_co / 60,
                    'C',
                    to_date(v_otmaster_rec.yyyy || v_otmaster_rec.mon, 'yyyymm'),
                    'CO'

                );

            End If;
        End If;

        Commit;
        p_message_type   := 'OK';
        p_message_text   := 'Procedure executed successfully.';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'ERR :- ' || sqlcode || ' - ' || sqlerrm;
    End;

    Procedure sp_claim_adjustment_lead(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_no         Varchar2,
        p_approved_ot      Number,
        p_approved_hhot    Number,
        p_approved_co      Number,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_claim_adjustment(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_claim_no         => p_claim_no,
            p_approved_ot      => p_approved_ot,
            p_approved_hhot    => p_approved_hhot,
            p_approved_co      => p_approved_co,
            p_approver_profile => user_profile.type_lead,

            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

    Procedure sp_claim_adjustment_hod(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_no         Varchar2,
        p_approved_ot      Number,
        p_approved_hhot    Number,
        p_approved_co      Number,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_claim_adjustment(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_claim_no         => p_claim_no,
            p_approved_ot      => p_approved_ot,
            p_approved_hhot    => p_approved_hhot,
            p_approved_co      => p_approved_co,
            p_approver_profile => user_profile.type_hod,

            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

    Procedure sp_claim_adjustment_hr(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,

        p_claim_no         Varchar2,
        p_approved_ot      Number,
        p_approved_hhot    Number,
        p_approved_co      Number,

        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    )
    As
    Begin
        sp_claim_adjustment(
            p_person_id        => p_person_id,
            p_meta_id          => p_meta_id,

            p_claim_no         => p_claim_no,
            p_approved_ot      => p_approved_ot,
            p_approved_hhot    => p_approved_hhot,
            p_approved_co      => p_approved_co,
            p_approver_profile => user_profile.type_hrd,

            p_message_type     => p_message_type,
            p_message_text     => p_message_text
        );
    End;

    Procedure sp_check_claim_exists(
        p_person_id        Varchar2,
        p_meta_id          Varchar2,
        p_yyyymm           Varchar2,
        p_claim_exists Out Varchar2,
        p_message_type Out Varchar2,
        p_message_text Out Varchar2
    ) As
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
        v_count              Number;
    Begin
        v_empno        := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;
        Select
            Count(*)
        Into
            v_count
        From
            ss_otmaster
        Where
            empno    = v_empno
            And mon  = substr(p_yyyymm, 5, 2)
            And yyyy = substr(p_yyyymm, 1, 4);
        If v_count > 0 Then
            p_claim_exists := 'OK';
        Else
            p_claim_exists := 'KO';
        End If;
        p_message_type := 'OK';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End sp_check_claim_exists;
End iot_extrahours;
/
---------------------------
--Changed PACKAGE BODY
--IOT_DESK_DETAILS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."IOT_DESK_DETAILS" As
    Procedure employee_desk_details(
        p_person_id           Varchar2,
        p_meta_id             Varchar2,

        p_desk_id         Out Varchar2,
        p_comp_name       Out Varchar2,
        p_computer        Out Varchar2,
        p_pc_model        Out Varchar2,
        p_monitor1        Out Varchar2,
        p_monitor1_model  Out Varchar2,
        p_monitor2        Out Varchar2,
        p_monitor2_model  Out Varchar2,
        p_telephone       Out Varchar2,
        p_telephone_model Out Varchar2,
        p_message_type    Out Varchar2,
        p_message_text    Out Varchar2
    ) As
        v_empno              Varchar2(5);
        e_employee_not_found Exception;
        Pragma exception_init(e_employee_not_found, -20001);
    Begin
        v_empno        := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            Raise e_employee_not_found;
            Return;
        End If;
        Select
            a.deskid,
            a.compname,
            a.computer,
            a.pcmodel,
            a.monitor1,
            a.monmodel1,
            a.monitor2,
            a.monmodel2,
            a.telephone,
            a.telmodel
        Into
            p_desk_id,
            p_comp_name,
            p_computer,
            p_pc_model,
            p_monitor1,
            p_monitor1_model,
            p_monitor2,
            p_monitor2_model,
            p_telephone,
            p_telephone_model
        From
            dms.desmas_allocation_all a
        Where
            a.empno1 = v_empno;
        p_message_type := 'OK';
    Exception
        When Others Then
            Rollback;
            p_message_type := 'KO';
            p_message_text := 'Err - ' || sqlcode || ' - ' || sqlerrm;

    End;
End;
/
---------------------------
--Changed PACKAGE BODY
--HOLIDAY_ATTENDANCE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."HOLIDAY_ATTENDANCE" As

    Procedure sp_add_holiday (
        p_person_id     Varchar2,
        p_meta_id       Varchar2,
        p_from_date     Date,
        p_projno        Varchar2,
        p_last_hh       Number,
        p_last_mn       Number,
        p_last_hh1      Number,
        p_last_mn1      Number,
        p_lead_approver Varchar2,
        p_remarks       Varchar2,
        p_location      Varchar2,
        p_user_tcp_ip   Varchar2,
        p_message_type  Out Varchar2,
        p_message_text  Out Varchar2
    ) As
        v_empno        Varchar2(5);
        v_message_type Number := 0;
    Begin
        If p_location Is Null Or p_projno Is Null Or p_last_hh Is Null Or p_lead_approver Is Null Or p_from_date Is Null Then
            p_message_type := 'KO';
            p_message_text := 'Blank values found. Cannot proceed';
            Return;
        End If;

        --check credentials
        --v_empno := get_empno_from_person_id(p_person_id);
        v_empno    := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        --save application
        add_holiday(p_person_id, p_meta_id, p_from_date, p_projno, p_last_hh,
                   p_last_mn, p_last_hh1, p_last_mn1, p_lead_approver, p_remarks,
                   p_location, p_user_tcp_ip, p_message_type, p_message_text);

        If p_message_type = 'OK' Then
            -- call send mail
            Return;
        Else
            Return;
        End If;
    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - '
                              || sqlcode
                              || ' - '
                              || sqlerrm;
    End sp_add_holiday;

    Procedure add_holiday (
        p_person_id     Varchar2,
        p_meta_id       Varchar2,
        p_from_date     Date,
        p_projno        Varchar2,
        p_last_hh       Number,
        p_last_mn       Number,
        p_last_hh1      Number,
        p_last_mn1      Number,
        p_lead_approver Varchar2,
        p_remarks       Varchar2,
        p_location      Varchar2,
        p_user_tcp_ip   Varchar2,
        p_message_type  Out Varchar2,
        p_message_text  Out Varchar2
    ) As

        v_empno              Varchar2(5);
        v_count              Number;
        v_lead_approval_none Number := 4;
        v_lead_approval      Number := 0;
        v_hod_approval       Number := 0;
        v_hrd_approval       Number := 0;
        v_recno              Number;
        v_app_no             ss_holiday_attendance.app_no%Type;
        v_description        ss_holiday_attendance.description%Type;
        v_none               Char(4) := 'None';
    Begin
        --check credentials
        --v_empno := get_empno_from_person_id(p_person_id);
        v_empno    := get_empno_from_meta_id(p_meta_id);

        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        --check if application exists
        Select
            Count(empno)
        Into v_count
        From
            ss_holiday_attendance
        Where
                empno = v_empno
            And pdate = p_from_date;

        If v_count = 0 Then
            -- get last counter no.
            Begin
                Select
                    nvl(Max(to_number(substr(app_no, instr(app_no, '/', - 1) + 1))), 0) recno
                Into v_recno
                From
                    ss_holiday_attendance
                Where
                    empno = v_empno
                Group By
                    empno;

            Exception
                When no_data_found Then
                    v_recno := 0;
            End;
            --application no.
            v_app_no := 'HA/'
                        || v_empno
                        || '/'
                        || to_char(sysdate, 'DDMMYYYY')
                        || '/'
                        || to_char(v_recno + 1);

            -- description
            v_description := 'Appl for Holiday Attendance on '
                             || to_char(p_from_date, 'DD/MM/YYYY')
                             || ' Time '
                             || p_last_hh
                             || ':'
                             || p_last_mn
                             || ' - '
                             || p_last_hh1
                             || ':'
                             || p_last_mn1
                             || ' Location - '
                             || p_location;

            Insert Into ss_holiday_attendance (
                empno,
                pdate,
                app_no,
                app_date,
                start_hh,
                start_mm,
                end_hh,
                end_mm,
                remarks,
                location,
                description,
                lead_apprl_empno,
                projno,
                lead_apprl,
                hod_apprl,
                hrd_apprl,
                user_tcp_ip
            ) Values (
                v_empno,
                p_from_date,
                v_app_no,
                sysdate,
                p_last_hh,
                p_last_mn,
                p_last_hh1,
                p_last_mn1,
                p_remarks,
                p_location,
                v_description,
                p_lead_approver,
                p_projno,
                    Case p_lead_approver
                        When v_none Then
                            v_lead_approval_none
                        Else
                            v_lead_approval
                    End,
                v_hod_approval,
                v_hrd_approval,
                p_user_tcp_ip
            );

            Commit;
            p_message_type := 'OK';
            p_message_text := 'Success';
        Else
            p_message_type := 'KO';
            p_message_text := 'Holiday attendance already created !!!';
            Return;
        End If;

    Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - '
                              || sqlcode
                              || ' - '
                              || sqlerrm;
    End add_holiday;

    Procedure sp_delete_holiday (
        p_person_id     Varchar2,
        p_meta_id       Varchar2,
        p_application_id     Varchar2,
        p_message_type  Out Varchar2,
        p_message_text  Out Varchar2   
    ) AS 
        v_empno              Varchar2(5);
        v_count              Number;
    BEGIN
     --check credentials
        --v_empno := get_empno_from_person_id(p_person_id);
        v_empno    := get_empno_from_meta_id(p_meta_id);
        If v_empno = 'ERRRR' Then
            p_message_type := 'KO';
            p_message_text := 'Invalid employee number';
            Return;
        End If;

        --check if application exists
        Select
            Count(*)
        Into v_count
        From
            ss_holiday_attendance
        Where  app_no = p_application_id and pdate > sysdate;

        If v_count > 0 Then     

            Delete from ss_holiday_attendance Where app_no = p_application_id ;
             Commit;
            p_message_type := 'OK';
            p_message_text := 'Success';

        Else
            p_message_type := 'KO';
            p_message_text := 'Application not exists.!!!';
            Return; 
        end if;

   Exception
        When Others Then
            p_message_type := 'KO';
            p_message_text := 'Err - '
                              || sqlcode
                              || ' - '
                              || sqlerrm;
END sp_delete_holiday;

End holiday_attendance;
/
---------------------------
--Changed PACKAGE BODY
--HEALTH
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."HEALTH" as

procedure send_mail(p_from varchar2, p_to varchar2, p_subject varchar2,
                    p_body varchar2, p_success out number, p_message out varchar2) as
  l_mail_conn   UTL_SMTP.connection;
  l_boundary    VARCHAR2(50) := '----=*#abc1234321cba#*=';
  begin
      l_mail_conn := UTL_SMTP.open_connection(c_smtp_mail_server, 25);
      UTL_SMTP.helo(l_mail_conn, c_smtp_mail_server);
      UTL_SMTP.mail(l_mail_conn, p_from);
      utl_smtp.rcpt(l_mail_conn, p_to);
      UTL_SMTP.open_data(l_mail_conn);
      UTL_SMTP.write_data(l_mail_conn, 'Date: ' || TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS') || UTL_TCP.crlf);
      UTL_SMTP.write_data(l_mail_conn, 'To: ' || p_to || UTL_TCP.crlf);
      UTL_SMTP.write_data(l_mail_conn, 'From: ' || p_from || UTL_TCP.crlf);
      UTL_SMTP.write_data(l_mail_conn, 'Subject: ' || p_subject || UTL_TCP.crlf);
    
      UTL_SMTP.write_data(l_mail_conn, 'MIME-Version: 1.0' || UTL_TCP.crlf);
      UTL_SMTP.write_data(l_mail_conn, 'Content-Type: multipart/alternative; boundary="' || l_boundary || '"' || UTL_TCP.crlf || UTL_TCP.crlf);
    
    
      UTL_SMTP.write_data(l_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
      UTL_SMTP.write_data(l_mail_conn, 'Content-Type: text/plain; charset="iso-8859-1"' || UTL_TCP.crlf || UTL_TCP.crlf);
  
      UTL_SMTP.write_data(l_mail_conn, replace(p_body, '!nuLine!',UTL_TCP.crlf));
      UTL_SMTP.write_data(l_mail_conn, UTL_TCP.crlf || UTL_TCP.crlf);
  
      UTL_SMTP.write_data(l_mail_conn, '--' || l_boundary || '--' || UTL_TCP.crlf);
      UTL_SMTP.close_data(l_mail_conn);
    
      UTL_SMTP.quit(l_mail_conn);
      p_success := ss.success;
      p_message := 'Email was successfully sent.';
    exception
        when others then
            p_success := ss.failure;
            p_message := 'Error : ' || sqlcode || ' - ' || sqlerrm;
  end send_mail;
  
  function get_parent(p_empno varchar2) return varchar2 as
    vParent Varchar2(4);
  begin
    select parent into vParent from ss_emplmast 
      where empno = p_empno;
    return vParent;
    exception
      when others then
      return '';
  end get_parent;
  
  function get_healthstatus(p_status number) return varchar2 as
    vStatus Varchar2(40);
  begin
    case p_status
        when 1 then
          vStatus := 'Medically Fit';
        when 2 then
          vStatus := 'Medically Fit with Recomm.';
        when 3 then
          vStatus := 'Medically Unfit';
        else
          vStatus := '0';
      end case;
    return vStatus;
    exception
      when others then
      return to_char(p_status);
  end get_healthstatus;
  
  function get_slots(p_clinic varchar2, p_location varchar2, p_date varchar2, p_isdeputaion number, p_ischeckup number) return number as
     vTotalSlots number := 0;
     vBookedSlots number := 0;
     vAvaliableSlots number := 0;
     vDateDiff number := 0;
    begin
      select to_date(p_date,'dd-mm-yy') - sysdate into vDateDiff from dual;
      if vDateDiff >= 4 then
          select applimit into vTotalSlots from ss_clinic_limit
            where clinic = p_clinic and fordeputation = p_isdeputaion and appdate = p_ischeckup;
          select count(a.applno) into vBookedSlots from ss_health_hrd a, ss_health_emp b 
            where trim(a.applno) = trim(b.applno) and b.dep = p_isdeputaion
            and a.chkdate = to_date(p_date,'dd-mm-yy') and b.clinic = p_clinic and b.clinicloc = p_location;
          vAvaliableSlots := vTotalSlots - vBookedSlots;
      end if;
      return vAvaliableSlots;
    exception
      when others then
      return 0;
  end get_slots;
  
  function get_bookedslots(p_clinic varchar2, p_date date, p_isdeputaion number) return number as
      vSlots number := 0;
    begin
      select count(a.applno) into vSlots from ss_health_hrd a, ss_health_emp b 
        where trim(a.applno) = trim(b.applno) and b.dep = p_isdeputaion
        and a.chkdate = p_date and b.clinic = p_clinic;
      return vSlots;
    exception
      when others then
      return 0;
  end get_bookedslots;
  
  function get_clinic_unqid(p_clinic varchar2, p_location varchar2) return varchar2 as
      vUnqid varchar2(4) := ''; 
    begin
      select unqid into vUnqid from ss_clinic_detail 
      where trim(clinic) = trim(p_clinic) and trim(location) = trim(p_location);
      return vUnqid;
    exception
      when others then
      return '';
  end get_clinic_unqid;
  
  function get_checkup_type(p_isdeputaion number, p_ischeckup number) return varchar2 as
      vType varchar2(100) := '';
    begin
      if p_isdeputaion = 1 and p_ischeckup = 0 then
        vType := 'Deputation';      
      end if;      
      if p_isdeputaion = 0 and p_ischeckup = 1 then
        vType := 'Regular';      
      end if;      
      if p_isdeputaion = 1 and p_ischeckup = 1 then
        vType := 'Error';      
      end if;      
      if p_isdeputaion = 0 and p_ischeckup = 0 then
        vType := 'Error';      
      end if;      
      return vType;
    exception
      when others then
      return '';
  end get_checkup_type;
  
  function get_slot_available_list(p_clinic varchar2) return sys_refcursor as
      cur sys_refcursor;
      v_stmt   varchar2(1000);
    begin
      v_stmt := ' select appdate, appday, Case when c_slots < 0 then 0 else c_slots end c_slots, ';
      v_stmt := v_stmt || ' Case when d_slots < 0 then 0 else d_slots end d_slots from'; 
      v_stmt := v_stmt || ' (with results as ( ';
      v_stmt := v_stmt || ' select sysdate + rownum + 4 appdate from dual ';
      v_stmt := v_stmt || ' connect by level < 90 ) ';
      v_stmt := v_stmt || ' select appdate, to_char(appdate, ''Dy'') appday,  ';
      v_stmt := v_stmt || ' (select health.get_slots( ''' || p_clinic || ''',to_char(appdate,''dd-mm-yy''),' ;
      v_stmt := v_stmt || '0, 1) slots from dual) c_slots, ';
      v_stmt := v_stmt || ' (select health.get_slots( ''' || p_clinic || ''',to_char(appdate,''dd-mm-yy''),' ;
      v_stmt := v_stmt || '1, 0) slots from dual) d_slots ';
      v_stmt := v_stmt || ' from results ';
      v_stmt := v_stmt || ' where to_char(appdate, ''DY'') not in (''SUN'')) '; 
      dbms_output.put_line(v_stmt);
      open cur for v_stmt;
      return cur;
  end get_slot_available_list;
  
  
end health;
/
---------------------------
--Changed PACKAGE BODY
--GENERATE_CSHARP_CODE
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."GENERATE_CSHARP_CODE" As

    Procedure proc_to_class (
        p_package_name   In               Varchar2,
        p_proc_name      In               Varchar2,
        p_class          Out              Varchar2
    ) As

        Cursor cur_proc_params Is
        Select
            object_name,
            package_name,
            argument_name,
            data_type,
            in_out
        From
            user_arguments
        Where
            package_name = Upper(p_package_name)
            And object_name = Upper(p_proc_name)
        Order By
            position;

        v_class        Varchar2(4000);
        v_properties   Varchar2(2000);
        v_datatype     Varchar2(60);
        v_class_name   Varchar2(60);
    Begin
        v_class        := 'public class CLASS_NAME ! { ! public string CommandText {get => "' --
         || Upper(p_package_name) || '.' || Upper(p_proc_name) || '"; } ! PARAM_NAMES ! }';

        v_class_name   := Replace(Initcap(p_package_name) || Initcap(p_proc_name), '_', '');

        v_class        := Replace(v_class, 'CLASS_NAME', v_class_name);
        For cur_row In cur_proc_params Loop
            v_datatype :=
                Case cur_row.data_type
                    When 'VARCHAR2' Then
                        'string'
                    When 'CHAR' Then
                        'string'
                    When 'DATE' Then
                        'DateTime'
                    When 'NUMBER' Then
                        'Int32'
                    Else 'string'
                End;

            If cur_row.in_out = 'OUT' Then
                v_properties := v_properties || ' public ' || v_datatype || ' Out' || Trim(Replace(Initcap(cur_row.argument_name)
                , '_')) || ' { get; set; } ! ';
            Else
                v_properties := v_properties || ' public ' || v_datatype || '    ' || Replace(Initcap(cur_row.argument_name), '_'
                ) || ' { get; set; } ! ';
            End If;

        End Loop;

        v_class        := Replace(Replace(v_class, 'PARAM_NAMES', v_properties), '!', Chr(13));

        p_class        := v_class;
    End proc_to_class;

    Procedure table_to_class (
        p_table_view_name Varchar2,
        p_class Out Varchar2
    ) As

        Cursor cur_columns Is
        Select
            table_name,
            column_name,
            data_type
        From
            user_tab_columns
        Where
            table_name = Upper(p_table_view_name);

        v_class        Varchar(4000);
        v_properties   Varchar2(3900);
        v_datatype     Varchar2(60);
        v_class_name   Varchar2(60);
    Begin
        v_class   := 'public class CHANGE_CLASS_NAME ! { ! PARAM_NAMES ! }';
        For cur_row In cur_columns Loop
            v_datatype     :=
                Case cur_row.data_type
                    When 'VARCHAR2' Then
                        'string'
                    When 'CHAR' Then
                        'string'
                    When 'DATE' Then
                        'DateTime'
                    When 'NUMBER' Then
                        'Int32'
                    Else 'string'
                End;

            v_properties   := v_properties || ' public ' || v_datatype || ' ' || Replace(Initcap(cur_row.column_name), '_') || '{get;set;}! '
            ;

        End Loop;

        v_class   := Replace(Replace(v_class, 'PARAM_NAMES', v_properties), '!', Chr(13));

        p_class   := v_class;
    End;

    Procedure proc_to_iot_class (
        p_package_name   In               Varchar2,
        p_proc_name      In               Varchar2,
        p_class          Out              Varchar2
    ) As

        Cursor cur_proc_params Is
        Select
            object_name,
            package_name,
            argument_name,
            data_type,
            in_out
        From
            user_arguments
        Where
            package_name = Upper(p_package_name)
            And object_name = Upper(p_proc_name)
        Order By
            position;

        v_class        Varchar2(4000);
        v_properties   Varchar2(2000);
        v_datatype     Varchar2(60);
        v_class_name   Varchar2(60);
    Begin
        v_class        := 'public class CLASS_NAME ! { ! public string CommandText {get => "' --
         || Upper(p_package_name) || '.' || Upper(p_proc_name) || '"; } ! PARAM_NAMES ! }';

        v_class_name   := Replace(Initcap(p_package_name) || Initcap(p_proc_name), '_', '');

        v_class        := Replace(v_class, 'CLASS_NAME', v_class_name);
        For cur_row In cur_proc_params Loop
            v_datatype :=
                Case cur_row.data_type
                    When 'VARCHAR2' Then
                        'string'
                    When 'CHAR' Then
                        'string'
                    When 'DATE' Then
                        'DateTime'
                    When 'NUMBER' Then
                        'Int32'
                    Else 'string'
                End;

            If cur_row.in_out = 'OUT' Then
                v_properties := v_properties || ' public ' || v_datatype || ' ' || Trim(Replace(Initcap(cur_row.argument_name)
                , '_')) || ' { get; set; } ! ';
            Else
                v_properties := v_properties || ' public ' || v_datatype || '    ' || Replace(Initcap(cur_row.argument_name), '_'
                ) || ' { get; set; } ! ';
            End If;

        End Loop;

        v_class        := Replace(Replace(v_class, 'PARAM_NAMES', v_properties), '!', Chr(13));

        p_class        := v_class;
    End proc_to_iot_class;


End generate_csharp_code;
/
---------------------------
--New PACKAGE BODY
--ANALYTICAL_REPORTS
---------------------------
CREATE OR REPLACE PACKAGE BODY "SELFSERVICE"."ANALYTICAL_REPORTS" As

    Procedure generate_delta_hours(
        p_start_date Date,
        p_end_date   Date
    ) As
        Cursor cur_dates Is
            Select
                d_date, hh.holiday
            From
                ss_days_details                 dd, ss_holidays hh
            Where
                dd.d_date = hh.holiday(+)
                And d_date Between p_start_date And p_end_date;
        Type typ_tab_dates Is Table Of cur_dates%rowtype;
        tab_dates typ_tab_dates;
    Begin
        Open cur_dates;
        Loop
            Fetch cur_dates Bulk Collect Into tab_dates Limit 50;
            For i In 1..tab_dates.count
            Loop

                Insert Into ss_report_worked_hrs(
                    empno,
                    pdate,
                    worked_hours,
                    is_holiday,
                    shift_code
                )
                With
                    emp_shift As (
                        Select
                            empno,
                            getshift1(empno, tab_dates(i).d_date) shift,
                            Case
                                When tab_dates(i).holiday Is Not Null Then
                                    1
                                Else
                                    0
                            End                                   As is_holiday
                        From
                            ss_emplmast
                        Where
                            empno In (
                                Select
                                    empno
                                From
                                    ss_punch
                                Where
                                    pdate = tab_dates(i).d_date
                            )
                    )
                Select
                    empno,
                        tab_dates(i).d_date,
                    n_workedhrs(empno, tab_dates(i).d_date, shift),
                    is_holiday,
                    shift
                From
                    emp_shift;
            End Loop;
            Delete
                From ss_report_worked_hrs
            Where
                worked_hours < 540 and is_holiday = 0;
            Commit;
            Exit When cur_dates%notfound;
        End Loop;
    End;
End analytical_reports;
/
---------------------------
--Changed FUNCTION
--WORKEDHRS3
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."WORKEDHRS3" (V_Code IN Varchar2, V_PDate IN Date, V_ShiftCode IN Varchar2) Return Number IS
		Cursor C1 is select * from SS_IntegratedPunch 
			where EmpNo = ltrim(rtrim(V_Code))
			and PDate = V_PDate Order By PDate,hhsort,mmsort,hh,mm;
		Type TabHrs  is table of Number index by Binary_Integer;
		V_TabHrs TabHrs;
		Cntr Number;
		THrs Varchar2(10);
		TotalHrs Number;
		v_I_HH Number;
		v_I_MM Number;
		v_O_HH Number;
		v_O_MM Number;
		V_InTime Number;
		V_OutTime Number;
		v_Count Number;
		V_AvailedLunchTime Number := 0;
BEGIN
		If V_ShiftCode = 'OO' Or V_ShiftCode = 'HH' Then
				Return 0;
		End If;

--	New
		
						
			Select TimeIn_HH,TimeIn_Mn,TimeOut_HH,TimeOut_Mn InTo v_I_HH, v_I_MM ,v_O_HH, v_O_MM From SS_ShiftMast 
				Where ShiftCode = Ltrim(Rtrim(v_ShiftCode));
				v_InTime := (v_I_HH*60) + v_I_MM;
				v_OutTime := (v_O_HH*60) + v_O_MM;

  	Select Count(*) InTo v_Count From SS_BusLate_LayOff_Detail 
  			Where EmpNo=Ltrim(Rtrim(v_Code)) And PDate = v_PDate;
  	If v_Count = 1 Then
  			Select TimeIn_HH,TimeIn_MM,TimeOut_HH,TimeOut_MM InTo v_I_HH, v_I_MM ,v_O_HH, v_O_MM 
					From SS_BusLate_LayOff_Mast
					Where PDate=v_PDate 
					And Code = (Select Code From SS_BusLate_LayOff_Detail Where EmpNo=Ltrim(Rtrim(v_Code)) And PDate = v_PDate);
				v_InTime := (v_I_HH*60) + v_I_MM;
				v_OutTime := (v_O_HH*60) + v_O_MM;
  	End If;
  	
-- End Of New

/*		Select 
					GetShiftInTime(v_Code,v_PDate,v_ShiftCode ),
					GetShiftOutTime(v_Code,v_PDate,v_ShiftCode )
				InTo 
					V_InTime, 
					V_OutTime
		From SS_ShiftMast Where ShiftCode = LTrim(Rtrim(V_ShiftCode));
*/			
		TotalHrs := 0;
		Cntr := 1;
		For C2 in C1 Loop
				If ((C2.HH * 60) + C2.MM) > V_OutTime + 60 Then
						V_TabHrs(Cntr) := V_OutTime  + 60;
						Cntr := Cntr + 1;
						Exit;
				Else
						If ((C2.HH * 60) + C2.MM)  < (V_InTime - 15) And Cntr = 1 Then
								V_TabHrs(Cntr) := (V_InTime -15);
								Cntr := Cntr + 1;
						ElsIf ((C2.HH * 60) + C2.MM)  >= (V_InTime - 15) Then
								If Cntr > 1 Then
										If v_TabHrs(Cntr-1) >= ((C2.HH * 60) + C2.MM) Then
												V_TabHrs(Cntr) := V_TabHrs(Cntr-1);
										ElsIf (((C2.HH * 60) + C2.MM) - v_TabHrs(Cntr-1)) <= 60 And Mod(CNtr,2)=1 Then
												V_TabHrs(Cntr) := v_TabHrs(Cntr-1);
										Else 
												V_TabHrs(Cntr) := (C2.HH * 60) + C2.MM;
										End If;
								Else
										V_TabHrs(Cntr) := (C2.HH * 60) + C2.MM;
								End If;
								Cntr := Cntr + 1;
						End If;
				End If;
		End Loop;
		Cntr := Cntr - 1;
	  If Cntr > 1 Then
		  	For i in 1..Cntr Loop
			  		If Mod(i,2) <>0 then
				  			If i = Cntr Then
						  			TotalHrs := TotalHrs - (V_TabHrs(i-1) - V_TabHrs(i-2));
						  			TotalHrs := TotalHrs + (V_TabHrs(i) - V_TabHrs(i-2));
				  			ElsIf i < Cntr Then
						  			TotalHrs := TotalHrs + (V_TabHrs(i+1) - V_TabHrs(i));
				  			End If;
			  		End If;
		  	End Loop;
		  	V_AvailedLunchTime := AvailedLunchTime1(V_Code, V_PDate ,V_ShiftCode );
		  	TotalHrs := TotalHrs - V_AvailedLunchTime;
	  End If;
	  Return TotalHrs ;
Exception
  	when others then return 0;
END
;
/
---------------------------
--Changed FUNCTION
--WORKEDHRS2
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."WORKEDHRS2" (V_Code IN Varchar2, V_PDate IN Date, V_ShiftCode IN Varchar2) Return Number IS
	Cursor C1 is select * from SS_IntegratedPunch 
		where EmpNo = ltrim(rtrim(V_Code))
		and PDate = V_PDate Order By PDate,hhsort,mmsort,hh,mm;
	Type TabHrsRec is record (TabHrs number, TabMns number);
	Type TabHrs  is table of TabHrsRec index by Binary_Integer;
	V_TabHrs TabHrs;
	Cntr Number;
	THrs Varchar2(10);
	TotalHrs Number;
	V_InTimeHH Number;
	V_InTimeMN Number;
	V_OutTimeHH Number;
	V_OutTimeMN Number;
	V_AvailedLunchTime Number := 0;
BEGIN
	Select TimeIn_HH, TimeIn_Mn, TimeOut_HH, TimeOut_Mn InTo V_InTimeHH, V_InTimeMN, V_OutTimeHH, V_OutTimeMN From SS_ShiftMast Where ShiftCode = Trim(V_ShiftCode);
	TotalHrs := 0;
	Cntr := 1;
	For C2 in C1 Loop
		If ((C2.HH * 60) + C2.MM) > (((V_OutTimeHH * 60) + V_OutTimeMN) + 60) Then
				V_TabHrs(Cntr).TabHrs := FLoor(((V_OutTimeHH * 60) + V_OutTimeMN + 60)/60);
				V_TabHrs(Cntr).TabMns := Mod(((V_OutTimeHH * 60) + V_OutTimeMN + 60),60);
				Cntr := Cntr + 1;
				Exit;
		Else
			If ((C2.HH * 60) + C2.MM  < (V_InTimeHH * 60) + V_InTimeMN - 15) And Cntr = 1 Then
				V_TabHrs(Cntr).TabHrs := FLoor(((V_InTimeHH * 60) + V_InTimeMN - 15)/60);
				V_TabHrs(Cntr).TabMns := Mod(((V_InTimeHH * 60) + V_InTimeMN - 15),60);
				Cntr := Cntr + 1;
			ElsIf ((C2.HH * 60) + C2.MM  >= (V_InTimeHH * 60) + V_InTimeMN - 15) Then
				V_TabHrs(Cntr).TabHrs := C2.HH;
				V_TabHrs(Cntr).TabMns := C2.MM;
				Cntr := Cntr + 1;
			End If;
		End If;
	End Loop;
	Cntr := Cntr - 1;
  If Cntr > 1 Then
  	For i in 1..Cntr Loop
  		If Mod(i,2) <>0 then
  			If i = Cntr Then
	  			TotalHrs := TotalHrs - (((V_TabHrs(i-1).TabHrs * 60) + V_TabHrs(i-1).TabMns) - ((V_TabHrs(i-2).TabHrs * 60) + V_TabHrs(i-2).TabMns));
	  			TotalHrs := TotalHrs + (((V_TabHrs(i).TabHrs * 60) + V_TabHrs(i).TabMns) - ((V_TabHrs(i-2).TabHrs * 60) + V_TabHrs(i-2).TabMns));
  			ElsIf i < Cntr Then
	  			TotalHrs := TotalHrs + (((V_TabHrs(i+1).TabHrs * 60) + V_TabHrs(i+1).TabMns) - ((V_TabHrs(i).TabHrs * 60) + V_TabHrs(i).TabMns));
  			End If;
  		End If;
  	End Loop;
  	V_AvailedLunchTime := AvailedLunchTime(V_Code, V_PDate ,V_ShiftCode );
  	TotalHrs := TotalHrs - V_AvailedLunchTime;
  End If;
  Return TotalHrs ;
Exception
  	when others then return 0;
END
;
/
---------------------------
--Changed FUNCTION
--WORKEDHRS11
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."WORKEDHRS11" (V_Code IN Varchar2, V_PDate IN Date, V_ShiftCode IN Varchar2) Return Number IS
	Cursor C1 is select * from SS_IntegratedPunch 
		where EmpNo = ltrim(rtrim(V_Code))
		and PDate = V_PDate Order By PDate,hhsort,mmsort,hh,mm;
	Type TabHrsRec is record (TabHrs number, TabMns number);
	Type TabHrs  is table of TabHrsRec index by Binary_Integer;
	V_TabHrs TabHrs;
	Cntr Number;
	THrs Varchar2(10);
	TotalHrs Number;
	V_InTimeHH Number;
	V_InTimeMN Number;
	V_OutTimeHH Number;
	V_OutTimeMN Number;
	v_AvailedLunchTime Number := 0;
BEGIN
	Select TimeIn_HH, TimeIn_Mn, TimeOut_HH, TimeOut_Mn InTo V_InTimeHH, V_InTimeMN, V_OutTimeHH, V_OutTimeMN From SS_ShiftMast Where ShiftCode = Trim(V_ShiftCode);
	TotalHrs := 0;
	Cntr := 1;
	For C2 in C1 Loop
		If ((C2.HH * 60) + C2.MM) > (((V_OutTimeHH * 60) + V_OutTimeMN) + 60) Then
				V_TabHrs(Cntr).TabHrs := FLoor(((V_OutTimeHH * 60) + V_OutTimeMN + 60)/60);
				V_TabHrs(Cntr).TabMns := Mod(((V_OutTimeHH * 60) + V_OutTimeMN + 60),60);
				Cntr := Cntr + 1;
				Exit;
		Else
			If ((C2.HH * 60) + C2.MM  < (V_InTimeHH * 60) + V_InTimeMN - 15) And Cntr = 1 Then
				V_TabHrs(Cntr).TabHrs := FLoor(((V_InTimeHH * 60) + V_InTimeMN - 15)/60);
				V_TabHrs(Cntr).TabMns := Mod(((V_InTimeHH * 60) + V_InTimeMN - 15),60);
				Cntr := Cntr + 1;
			ElsIf ((C2.HH * 60) + C2.MM  >= (V_InTimeHH * 60) + V_InTimeMN - 15) Then
				V_TabHrs(Cntr).TabHrs := C2.HH;
				V_TabHrs(Cntr).TabMns := C2.MM;
				Cntr := Cntr + 1;
			End If;
		End If;
	End Loop;
	Cntr := Cntr - 1;
  If Cntr > 1 Then
  	For i in 1..Cntr Loop
  		If Mod(i,2) <>0 then
  			If i = Cntr Then
	  			TotalHrs := TotalHrs - (((V_TabHrs(i-1).TabHrs * 60) + V_TabHrs(i-1).TabMns) - ((V_TabHrs(i-2).TabHrs * 60) + V_TabHrs(i-2).TabMns));
	  			TotalHrs := TotalHrs + (((V_TabHrs(i).TabHrs * 60) + V_TabHrs(i).TabMns) - ((V_TabHrs(i-2).TabHrs * 60) + V_TabHrs(i-2).TabMns));
  			ElsIf i < Cntr Then
	  			TotalHrs := TotalHrs + (((V_TabHrs(i+1).TabHrs * 60) + V_TabHrs(i+1).TabMns) - ((V_TabHrs(i).TabHrs * 60) + V_TabHrs(i).TabMns));
  			End If;
  		End If;
  	End Loop;
  	v_AvailedLunchTime := AvailedLunchTime(V_Code, V_PDate, V_ShiftCode);
  	TotalHrs := TotalHrs - v_AvailedLunchTime;
  End If;
  Return TotalHrs;
Exception
  	when others then return 0;
END
;
/
---------------------------
--Changed FUNCTION
--SS_MONTH_WRK_HRS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."SS_MONTH_WRK_HRS" 
  ( pEmpNo IN VARCHAR2,
    pMM IN VARCHAR2,
    pYYYY IN VARCHAR2)
  RETURN  Number IS
--
-- To modify this template, edit file FUNC.TXT in TEMPLATE 
-- directory of SQL Navigator
--
-- Purpose: Briefly explain the functionality of the function
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  -------------------------------------------       
   vWrkTime                 Number;
--   vWrkHrs                  Number;
--   vWrkMin                  Number;
   -- Declare program variables as shown above
BEGIN
    select  sum(N_WorkedHrs(pEmpNo,D_Date, GetShift1(pEmpNo,D_Date)) ) InTo vWrkTime from ss_days_details
        where d_yyyy = pYYYY and d_mm = pMM ;
    RETURN nvl(vWrkTime,0)/60 ;
/*EXCEPTION
   WHEN others THEN
       Return 0;*/
END;
/
---------------------------
--Changed FUNCTION
--SL_APPCOUNT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."SL_APPCOUNT" (p_EmpNo IN Varchar2, p_PDate IN Date) RETURN Number IS
		v_RetVal Number := 0;
		v_isSLeaveApp Number :=0;
		v_EGo Number := 0;
		v_LCome Number := 0;
		v_LastWrkDay Number := 0;
		v_SCode Varchar2(2);
BEGIN
  	/*v_isSLeaveApp := IsSLeaveApp(p_EmpNo,p_PDate);
  	v_EGo := EarlyGo1(p_EmpNo,p_PDate);
  	v_LCome := LateCome1(p_EmpNo,p_PDate);
  	v_LastWrkDay := IsLastWorkDay1(p_EmpNo, p_Pdate);
  	v_SCode := GetShift1(p_EmpNo, p_PDate);*/
  	
  	Select IsSLeaveApp(p_EmpNo,p_PDate),
  					EarlyGo1(p_EmpNo,p_PDate),
  					LateCome1(p_EmpNo,p_PDate),
  					IsLastWorkDay1(p_EmpNo, p_Pdate), 
  					GetShift1(p_EmpNo, p_PDate)
  			InTo
  					v_IsSLeaveApp,
  					v_EGo,
  					v_LCome,
  					v_LastWrkDay,
  					v_SCode
  			From Dual;
  			
  	If v_SCode = 'HH' Or v_SCode = 'OO' Then
  			Return v_RetVal;
  	End If;
  	If v_isSLeaveApp = 1 Then
  			If v_LCome > 90 And v_LCome <= 210 Then 
  					v_RetVal :=v_RetVal + 1;
  			End If;
  			If v_EGo > 0 And v_EGo <= 60 And v_LastWrkDay =1 Then
  					Null;
  			Else
  					If v_EGo > 0 And v_EGo < 240 Then
  							If v_EGo < 240 And v_Ego > 60 And v_LastWrkDay =1 Then
  									v_RetVal := v_RetVal + 1;	
  							ElsIf v_EGo <= 180 And v_LastWrkDay = 0 Then
  									v_RetVal := v_RetVal + 1;	
  							End If;
  					End If;
  			End If;
  	End If;
  	Return v_RetVal;
END;
/
---------------------------
--Changed FUNCTION
--SLCHECK
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."SLCHECK" (P_EMPNO IN VARCHAR2,p_lvtype varchar2,NO_DAYS IN NUMBER,S_DATE IN DATE,E_DATE IN DATE) RETURN Number IS
	v_lvprd number(8,1) := 0;
	startdate date;
	enddate date;
	Prev_date Date;
	Next_date Date;
BEGIN
startdate := s_Date;	
enddate := e_date;
-- FIRST CHECK IF LEAVE AVAILED ON PREVIOUS WORKING DAY 
Prev_date := GetLastWorkingDay(S_DATE,'-');
--IF Startdate -  Prev_Date <> 1 then -- this checks if there is holiday between 2 dates
	select COUNT(*) into v_lvprd 
	from ss_leaveledg 
	where (bdate = Prev_Date 
	OR edate = Prev_date ) 
	AND DB_CR = 'D' 
	AND EMPNO = ltrim(Rtrim(P_EMPNO)) And leaveType = 'SL'
        And Adj_Type <> 'PN';
--End if;
-- IF NO SL IS AVAILED ON PREVIOUS WORKING DAY WHICH IS NOT A HOLIDAY THEN
-- CHECK IF SL IS AVAILED ON NEXT WORKING DAY 
if v_lvprd = 0 then	
		Next_Date := GetLastWorkingDay(e_Date,'+');
		--IF Next_Date -  Startdate <> 1 then -- this checks if there is holiday between 2 dates
			select COUNT(*) into v_lvprd 
			from ss_leaveledg 
			where (bdate = Next_Date 
			OR edate = Next_date)  
			AND DB_CR = 'D' 
			AND EMPNO = ltrim(Rtrim(P_EMPNO)) And leaveType = 'SL'
                        And Adj_Type <> 'PN';
		--End if;
end if;
--The above check was in leaveledger, the below check is in leaveapp

-- FIRST CHECK IF LEAVE AVAILED ON PREVIOUS WORKING DAY 
if v_lvprd = 0 then
	--IF Startdate -  Prev_Date <> 1 then -- this checks if there is holiday between 2 dates	
		select COUNT(*) into v_lvprd 
		from ss_leaveapp
		where (bdate = Prev_Date 
		OR edate = Prev_date)  
		AND EMPNO = ltrim(Rtrim(P_EMPNO)) And leaveType = 'SL';
                
	--end if;
end if;
-- IF NO SL IS AVAILED ON PREVIOUS WORKING DAY WHICH IS NOT A HOLIDAY THEN
-- CHECK IF SL IS AVAILED ON NEXT WORKING DAY 
if v_lvprd = 0 then	
	--IF Next_Date -  Startdate <> 1 then -- this checks if there is holiday between 2 dates
		select COUNT(*) into v_lvprd 
		from ss_leaveapp 
		where (bdate = Next_Date 
		OR edate = Next_date ) 
		AND EMPNO = ltrim(Rtrim(P_EMPNO)) And leaveType = 'SL';
                
	--End if;
end if;
return v_lvprd;	
END;
/
---------------------------
--Changed FUNCTION
--PLCLCOMBINECHECK
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."PLCLCOMBINECHECK" (P_EMPNO IN VARCHAR2,p_lvtype varchar2,NO_DAYS IN NUMBER,S_DATE IN DATE,E_DATE IN DATE) RETURN Number IS
		v_lvprd number(8,1) := 0;
		ret_hday number := 0;
		startdate date;
		enddate date;
		ctr number := 0;
		i number := 1;
		v_count number:=0;
		Prev_date DATE;
		Next_Date DATE;
BEGIN
		Prev_date := getlastworkingday(S_DATE,'-');
		Next_Date := getlastworkingday(E_DATE,'+');
	
   	Select Nvl(SUM(leaveperiod),0)/8 Into v_count From ss_leaveapp
 			Where empno = P_EMPNO  And
 			((S_DATE Between bdate And edate Or E_DATE Between bdate And edate)
			or
			(bdate between S_DATE and E_DATE or edate between S_DATE and E_DATE));
			
		If v_count = 0	Then
	
				startdate := s_Date;	
				enddate := e_date;
				select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg 
					where (bdate between S_DATE and E_date Or EDate between S_Date and E_Date) 
					AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) 
					and leavetype = 'CL' And Adj_Type <> 'PN';
				--get preceeding day which is not a holiday
				if v_lvprd = 0 then
						while ctr <> 1 loop
								ret_hday := get_holiday(startdate - i);
								ret_hday := get_holiday(enddate + i);
								if ret_hday = 1 or ret_hday = 2 or ret_hday = 3 then
										i := i+1;
								else 
										ctr := 1;
								end if;			
						end loop;
						begin
								--first check if CL  availed on preceeding day
								select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg where bdate = PREV_DATE  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = 'CL' And Adj_Type <> 'PN';
                                                                
								if v_lvprd = 0 then 
										--check if CL availed on succeeding day
										select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg where edate = NEXT_DATE  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = 'CL' And Adj_Type <> 'PN';
								end if;
						EXCEPTION WHEN OTHERS THEN
								v_lvprd := 0;				
						end;	
				end if;	
				if v_lvprd = 0 then			
						--check in Application table
						select (nvl(sum(leaveperiod),0)/8) into v_lvprd from ss_leaveapp where (bdate between S_DATE and E_date Or EDate between S_Date and E_Date) AND  EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = 'CL' and (hod_apprl <> 2 or hrd_apprl <> 2);			
						if v_lvprd = 0 then
								begin
										--first check if CL availed on preceeding day	
										select (nvl(sum(leaveperiod),0)/8)  into v_lvprd from ss_leaveapp where 
											PREV_DATE Between BDate And EDate AND 
											EMPNO = ltrim(Rtrim(P_EMPNO)) and 
											leavetype = 'CL' and 
											(hod_apprl <> 2 or hrd_apprl <> 2) ;
										if v_lvprd = 0 then 
												--check if CL availed on succeeding day
												select (nvl(sum(leaveperiod),0)/8)  into v_lvprd from ss_leaveapp where 
													NEXT_DATE  Between BDate And EDate AND 
													EMPNO = ltrim(Rtrim(P_EMPNO)) and 
													leavetype = 'CL' and (hod_apprl <> 2 or hrd_apprl <> 2) ;
										end if;
								end;	
						end if;	
				end if;
					
				if v_lvprd = 0 then
						return 0;-- valid  
				else			
						return 6;-- CL availed one day before/after  PL/SL
				end if;
		else
				return 1; -- Leave already availed on same day
		end if;
END;
/
---------------------------
--Changed FUNCTION
--PENALTYLEAVE
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."PENALTYLEAVE" (p_EmpNo IN Varchar2, p_PDate IN Date)
											
											RETURN Number IS
											
		v_RetVal Number := 0;
		v_LateCome Number;
		v_EGo Number;
		isLastWrkDy Number;
		v_LCAppCntr Number;
		v_SLAppCntr Number;
		v_LCApp Number;
		v_SLApp Number;
BEGIN
	
		v_LateCome := LateCome1(p_EmpNo, p_PDate); 
		v_EGo := EarlyGo1(p_EmpNo, p_PDate);
		isLastWrkDy := isLastWorkDay1(p_EmpNo,p_PDate);
		v_LCAppCntr := GetLComeAppCntr(p_EmpNo,p_PDate);
		v_SLAppCntr := GetSLeaveAppCntr(p_EmpNo,p_PDate);
		v_LCApp := IsLComeEGoApp(p_EmpNo,p_PDate);
		v_SLApp := IsSLeaveApp(p_EmpNo,p_PDate);
  	
  	If v_LateCome > 210 Then 
  			v_RetVal := v_RetVal + Floor((v_LateCome-30) / 60);
  			If Floor((v_LateCome-30) / 60) < (v_LateCome-30) / 60 Then
  					v_RetVal := v_RetVal + 1;
  			End If;
  	ElsIf (v_LateCome > 30 And v_LateCome <= 90) Then
		  	If v_LCApp = 0 Or v_LCAppCntr > 2 Then
		  			v_RetVal := v_RetVal + Floor((v_LateCome-30) / 60);
		  			If Floor((v_LateCome-30) / 60) < (v_LateCome-30) / 60 Then
		  					v_RetVal := v_RetVal + 1;
		  			End If;
		  	End If;
  	ElsIf (v_LateCome > 90) Then
		  	If v_SLApp = 0 Or v_SLAppCntr > 2 Then
		  			v_RetVal := v_RetVal + Floor((v_LateCome-30) / 60);
		  			If Floor((v_LateCome-30) / 60) < (v_LateCome-30) / 60 Then
		  					v_RetVal := v_RetVal + 1;
		  			End If;
		  	End If;
  	End If;


		If (v_EGo > 240 And isLastWrkDy = 1) Or (v_EGo > 180 And isLastWrkDy = 0) Then
  			v_RetVal := v_RetVal + Floor((v_EGo) / 60);
  			If Floor((v_EGo) / 60) < (v_EGo) / 60 Then
  					v_RetVal := v_RetVal + 1;
  			End If;
		End If;
		If (isLastWrkDy = 1) And (v_SLApp = 0 Or v_SLAppCntr > 2) And (v_EGo > 60 And v_EGo <= 240) Then
  			v_RetVal := v_RetVal + Floor((v_EGo) / 60);
  			If Floor((v_EGo) / 60) < (v_EGo) / 60 Then
  					v_RetVal := v_RetVal + 1;
  			End If;
		ElsIf (isLastWrkDy = 0) And (v_SLApp = 0 Or v_SLAppCntr > 2) And (v_EGo > 0 And v_EGo <= 180) Then
  			v_RetVal := v_RetVal + Floor((v_EGo) / 60);
  			If Floor((v_EGo) / 60) < (v_EGo) / 60 Then
  					v_RetVal := v_RetVal + 1;
  			End If;
  	End If;
  	Return v_RetVal;
END;
/
---------------------------
--Changed FUNCTION
--OTPERIOD2
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."OTPERIOD2" (V_Code IN Varchar2, V_PDate IN Date, SCode IN Varchar2) RETURN number IS
		TotalHrs number;
		Cursor C1(OHrs IN Number) is select * from SS_IntegratedPunch 
			where EmpNo = ltrim(rtrim(V_Code))
			and PDate = V_PDate and ((HH * 60) + MM) > OHrs order by PDate,hhsort,mmsort,hh,mm;
		Type TabHrs  is table of Number index by Binary_Integer;
		V_TabHrs TabHrs;
		
		Cntr Number;
		THrs Varchar2(10);
		
		V_ShiftOut Number;
		V_Cntr Number;
BEGIN
		If Ltrim(RTrim(SCode)) = 'OO' Or Ltrim(RTrim(SCode)) = 'HH' Then
				V_ShiftOut := 0;
				Cntr := 1;
		Else
				Select GetShiftOutTime(V_Code,V_PDate,SCode) InTo V_ShiftOut From Dual;
				V_TabHrs(1) := V_ShiftOut + 60;
				V_ShiftOut := V_ShiftOut + 60;
				Cntr := 2;
		End If;
		
		TotalHrs := 0;
		For C2 in C1(V_ShiftOut) Loop
		--		If Cntr > 1 Then
						/*If (V_TabHrs(Cntr-1) > (C2.HH * 60) + C2.MM) Or (((C2.HH * 60) + C2.MM) - v_TabHrs(Cntr-1) <= 60) Then
								V_TabHrs(Cntr) := V_TabHrs(Cntr-1);
						Else*/
								V_TabHrs(Cntr) := (C2.HH * 60) + C2.MM;
						--End If;
			/*	Else
						V_TabHrs(Cntr) := (C2.HH * 60) + C2.MM;
				End If;*/
				Cntr := Cntr + 1;
		End Loop;
		Cntr := Cntr - 1;
	  If Cntr > 1 Then
		  	For i in 1..Cntr Loop
			  		If Mod(i,2) <>0 then
				  			If i = Cntr Then
						  			TotalHrs := TotalHrs - (V_TabHrs(i-1) - V_TabHrs(i-2));
						  			TotalHrs := TotalHrs + (V_TabHrs(i) - V_TabHrs(i-2));
				  			ElsIf i < Cntr Then
						  			TotalHrs := TotalHrs + (V_TabHrs(i+1) - V_TabHrs(i));
				  			End If;
			  		End If;
		  	End Loop;
		  	--TotalHrs := (((V_TabHrs(Cntr).TabHrs * 60) + V_TabHrs(Cntr).TabMns) - ((V_TabHrs(1).TabHrs * 60) + V_TabHrs(1).TabMns));
	  End If;
	  Return TotalHrs;
END
;
/
---------------------------
--New FUNCTION
--N_WORKEDHRS_INCLUDE_2ND_SHIFT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_WORKEDHRS_INCLUDE_2ND_SHIFT" (
    p_empno      In Varchar2,
    p_date       In Date,
    p_shift_code In Varchar2
) Return Number Is

    Cursor c1 Is
        Select
            *
        From
            ss_integratedpunch
        Where
            empno         = ltrim(rtrim(p_empno))
            And pdate     = p_date
            And falseflag = 1
        Order By
            pdate,
            hhsort,
            mmsort,
            hh,
            mm;

    Type tabhrs Is
        Table Of Number Index By Binary_Integer;
    Type tabodappl Is
        Table Of Number Index By Binary_Integer;
    v_tabhrs           tabhrs;
    v_tabodappl        tabodappl;
    cntr               Number;
    thrs               Varchar2(10);
    totalhrs           Number;
    v_i_hh             Number;
    v_i_mm             Number;
    v_o_hh             Number;
    v_o_mm             Number;
    v_intime           Number;
    v_outtime          Number;
    v_count            Number;
    v_availedlunchtime Number := 0;
Begin
    If p_shift_code <> 'OO' And p_shift_code <> 'HH' Then
        Select
            timein_hh,
            timein_mn,
            timeout_hh,
            timeout_mn
        Into
            v_i_hh,
            v_i_mm,
            v_o_hh,
            v_o_mm
        From
            ss_shiftmast
        Where
            shiftcode = ltrim(rtrim(p_shift_code));

        v_intime  := (v_i_hh * 60) + v_i_mm;
        v_outtime := (v_o_hh * 60) + v_o_mm;

        If v_intime > (12 * 60) and p_date >= to_date('1-Mar-2022','dd-Mon-yyyy') Then -- After 12:00  noon
            v_intime := 0 + 15;
        End If;


    Else
        v_intime := 0 + 15;
    End If;
    /*
        Begin
            Select
                timein_hh,
                timein_mm,
                timeout_hh,
                timeout_mm
            Into
                v_i_hh,
                v_i_mm,
                v_o_hh,
                v_o_mm
            From
                ss_buslate_layoff_mast
            Where
                pdate    = p_date
                And code = (
                    Select
                        code
                    From
                        ss_buslate_layoff_detail
                    Where
                        empno     = ltrim(rtrim(p_empno))
                        And pdate = p_date
                );

            v_intime  := (v_i_hh * 60) + v_i_mm;
            v_outtime := (v_o_hh * 60) + v_o_mm;


        Exception
            When no_data_found Then
                Null;
        End;
    */
    totalhrs := 0;
    cntr     := 1;
    For c2 In c1
    Loop
        v_tabodappl(cntr) := c2.odtype;
        If ((c2.hh * 60) + c2.mm) < (v_intime - 15) And cntr = 1 Then
            v_tabhrs(cntr) := (v_intime - 15);
            cntr           := cntr + 1;
        Elsif ((c2.hh * 60) + c2.mm) >= (v_intime - 15) Then
            If cntr > 1 Then
                If v_tabhrs(cntr - 1) > ((c2.hh * 60) + c2.mm) Then
                    v_tabhrs(cntr) := v_tabhrs(cntr - 1);
                Elsif (((c2.hh * 60) + c2.mm) - v_tabhrs(cntr - 1)) <= 60 And Mod(cntr, 2) = 1 And (v_tabodappl(cntr) <> 0
                Or v_tabodappl(cntr - 1) <> 0) Then
                    v_tabhrs(cntr) := v_tabhrs(cntr - 1);
                Else
                    v_tabhrs(cntr) := (c2.hh * 60) + c2.mm;
                End If;
            Else
                v_tabhrs(cntr) := (c2.hh * 60) + c2.mm;
            End If;

            cntr := cntr + 1;
        End If;

    End Loop;

    cntr     := cntr - 1;
    If cntr > 1 Then
        For i In 1..cntr
        Loop
            If Mod(i, 2) <> 0 Then
                If i = cntr Then
                    totalhrs := totalhrs - (v_tabhrs(i - 1) - v_tabhrs(i - 2));

                    totalhrs := totalhrs + (v_tabhrs(i) - v_tabhrs(i - 2));

                Elsif i < cntr Then
                    totalhrs := totalhrs + (v_tabhrs(i + 1) - v_tabhrs(i));
                End If;

            End If;
        End Loop;

        v_availedlunchtime := availedlunchtime1(p_empno, p_date, p_shift_code);
        totalhrs           := totalhrs - v_availedlunchtime;
    End If;

    Return totalhrs;
Exception
    When Others Then
        Return 0;
End;
/
---------------------------
--Changed FUNCTION
--N_TIMESHEETALLOWED
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_TIMESHEETALLOWED" (param_empno varchar2) RETURN Number AS 
  vCount Number;
  vAssign varchar2(4);
  v_Ret_Val Number;
  v_TimeSheet_Allowed constant Number := 1;
  v_TimeSheet_NotAllowed constant Number := 0;
BEGIN
  Select Assign Into vAssign from ss_emplmast where empno=param_empno;
  Select count(*) InTo vCount From SS_CostMast Where phase <> '99' And costcode = vAssign;
  If vCount > 0 Then
    v_Ret_Val := v_timesheet_allowed;
  else
    v_Ret_Val := v_timesheet_notallowed;
  end If;
  return v_ret_val;
  Exception
  When Others then
    return v_timesheet_notallowed;
END N_TIMESHEETALLOWED;
/
---------------------------
--New FUNCTION
--N_OTPERIOD_INLCUDE_2ND_SHIFT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_OTPERIOD_INLCUDE_2ND_SHIFT" (
    p_empno       In Varchar2,
    p_date        In Date,
    p_shift_code  In Varchar2,
    p_delta_hrs   In Number,
    p_compoff_hrs In Number Default 0
) Return Number Is

    v_ret_ot_hrs       Number;

    Type typ_tab_hrs Is
        Table Of Number Index By Binary_Integer;
    v_tab_hrs          typ_tab_hrs;
    cntr               Number;
    thrs               Varchar2(10);
    v_shift_out_time   Number;
    v_shift_in_time    Number;
    v_is_ot_applicable Number;
    v_punchnos         Number;
    vtrno              Char(5);
    v4ot               Boolean := true;
    v_is_train_ot      Number;

    v_ot_start_time    Number;
    v_ot_end_time      Number;

    v_from_hrs         Number;
    v_to_hrs           Number;
Begin
    If p_shift_code = 'TN' Or p_shift_code = 'PA' Or p_shift_code = 'GE' Or p_shift_code = 'GV' Then
        Return 0;
    End If;

    Select
        Count(*)
    Into
        v_is_ot_applicable
    From
        ss_shiftmast
    Where
        shiftcode                 = Trim(p_shift_code)
        And nvl(ot_applicable, 0) = 1;

    If trunc(p_date) In (
            trunc(To_Date('21-FEB-2017', 'dd-MON-yyyy')),
            trunc(To_Date('28-SEP-2017', 'dd-MON-yyyy'))
        )
    Then
        Return 0;
    End If;

    If v_is_ot_applicable = 0 And trim(p_shift_code) <> 'HH' And trim(p_shift_code) <> 'OO' Then
        Return 0;
    End If;

    --Training

    v_is_train_ot    := n_ot_4_training(p_empno, p_date);
    If v_is_train_ot = ss.ss_false Then
        Return 0;
    End If;
    --Training

    If p_date < To_Date('1-Mar-2022', 'dd-Mon-yyyy') Then
        Return n_otperiod(
            p_empno,
            p_date,
            p_shift_code,
            p_delta_hrs,
            p_compoff_hrs
        );
    End If;

    v_ret_ot_hrs     := 0;

    Select
        ((hh * 60) + mm) mins Bulk Collect
    Into
        v_tab_hrs
    From
        ss_integratedpunch
    Where
        empno         = ltrim(rtrim(p_empno))
        And pdate     = p_date
        And falseflag = 1
        And Trim(mach) <> 'WFH0'
    Order By
        pdate,
        hhsort,
        mmsort,
        hh,
        mm;
    If (v_tab_hrs.count Mod 2) <> 0 Then
        Return 0;
    End If;

    v_shift_out_time := getshiftouttime(p_empno, p_date, p_shift_code, v4ot);

    v_shift_in_time  := getshiftintime(p_empno, p_date, p_shift_code);
    If p_shift_code In ('OO', 'HH') Then

        v_ot_start_time := 0;
        v_ot_end_time   := 1439;
    Elsif v_shift_in_time > (12 * 60) Then
        v_ot_start_time := 0;
        v_ot_end_time   := v_shift_in_time;
    Else
        v_ot_start_time := v_shift_out_time;
        v_ot_end_time   := 1439;
    End If;

    v_ret_ot_hrs     := 0;
    For i In 1..v_tab_hrs.count
    Loop
        If Mod(i, 2) = 0 Then
            If v_tab_hrs(i) < v_ot_start_time Then
                Continue;
            End If;
            If v_tab_hrs(i - 1) > v_ot_end_time Then
                Exit;
            End If;

            v_from_hrs   := greatest(v_ot_start_time, v_tab_hrs(i - 1));

            v_to_hrs     := least(v_ot_end_time, v_tab_hrs(i));

            v_ret_ot_hrs := v_ret_ot_hrs + v_to_hrs - v_from_hrs;

        End If;
    End Loop;

    If p_shift_code <> 'OO' And p_shift_code <> 'HH' Then

        v_ret_ot_hrs := least(p_delta_hrs, v_ret_ot_hrs);

    Elsif p_shift_code = 'OO' Or p_shift_code = 'HH' Then

        v_ret_ot_hrs := v_ret_ot_hrs - availedlunchtime1(p_empno, p_date, p_shift_code);

    End If;

    If p_compoff_hrs = 1 Then
        If v_ret_ot_hrs >= 120 Then
            v_ret_ot_hrs := (floor(v_ret_ot_hrs / 60) * 60);
        Else
            v_ret_ot_hrs := 0;
        End If;
    Else
        If p_shift_code = 'OO' Or p_shift_code = 'HH' Then
            If v_ret_ot_hrs >= 240 Then
                v_ret_ot_hrs := (floor(v_ret_ot_hrs / 60) * 60);
            Else
                v_ret_ot_hrs := 0;
            End If;

        Else
            If v_ret_ot_hrs >= 120 Then
                v_ret_ot_hrs := 120;
            Else
                v_ret_ot_hrs := 0;
            End If;
        End If;
    End If;

    Return v_ret_ot_hrs;
End;
/
---------------------------
--Changed FUNCTION
--N_MEAL_VR_LEAVE_BAL
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_MEAL_VR_LEAVE_BAL" (
     pEmpNo In Varchar2, pBeginDate in Date , pEndDate In Date, pLeaveType In Varchar2 ) return Number
as
    vSingleMM Number;
    vMultipleMM Number;
    vRetVal Number;
begin
    If Ltrim(Rtrim(pLeaveType)) <> 'SL' Then
        /*----------------------------------------------------*/
        /*   Leave period extends over a period of 1 month    */
        /*----------------------------------------------------*/
        Begin
            select sum( Nvl((leaveperiod / 8),0)  ) * -1 InTo vSingleMM from SS_LeaveLedg 
                where 
                bdate >= pBeginDate and bdate <= pEndDate 
                And adj_type <> 'YA'
                And adj_type <> 'DA'
                --And description not like 'Year End % Adjustment Entry%' and description not like 'On Deputation Leave Adj%'
                and EmpNo=Ltrim(Rtrim(pEmpNo)) 
                and ( (Leavetype = Ltrim(Rtrim(pLeaveType)) and db_Cr = 'D' ) Or (LeaveType = Ltrim(Rtrim(pLeaveType)) And Adj_Type = 'LP') );
        Exception
            When No_Data_Found Then
                vSingleMM := 0;
        End;
--    ElsIf Ltrim(Rtrim(LeaveType)) = 'SL' Then
    ElsIf Ltrim(Rtrim(pLeaveType)) = 'SL' Then
        Begin
            Select Sum(Nvl(Leaves,0)) InTo vSingleMM From
            (
              select sum( (leaveperiod / 8*-1)  - holidaysbetween(bdate,edate) )  As Leaves
                from SS_LeaveLedg where
                bdate >= pBeginDate and bdate <= pEndDate
                And adj_type <> 'LE' 
                And adj_type <> 'YA'
                And adj_type <> 'DA'
                --And description not like 'Year End % Adjustment Entry%'
                --and description not like 'On Deputation Leave Adj%'
                And empno=Ltrim(Rtrim(pEmpNo)) 
                and ( (Leavetype = Ltrim(Rtrim(pLeaveType)) and db_Cr = 'D' ) Or (LeaveType = Ltrim(Rtrim(pLeaveType)) And Adj_Type = 'LP') )
            );
        Exception
            When No_Data_Found Then
                vSingleMM := 0;
        End;
        vRetVal := vSingleMM;
    End If;
    /*----------------------------------------------------*/
    /*   Leave period extends over a period of 2 months   */
    /*----------------------------------------------------*/
    Begin
      Select Sum(Nvl(Leaves,0)) InTo vMultipleMM From 
      (
          select sum( (edate - pBeginDate ) - holidaysbetween(pBeginDate,edate) ) As Leaves
          from SS_LeaveLedg where 
          to_char(bdate,'mmyyyy') <> to_char(nvl(edate,bdate),'mmyyyy')
          and To_Char(edate,'mmyyyy') = To_Char(pBeginDate,'mmyyyy')
          And adj_type <> 'LE' 
          And adj_type <> 'YA'
          And adj_type <> 'DA'
          and ( (Leavetype = Ltrim(Rtrim(pLeaveType)) and db_Cr = 'D' ) Or (LeaveType = Ltrim(Rtrim(pLeaveType)) And Adj_Type = 'LP') )
          And empno = Ltrim(Rtrim(pEmpNo)) 
        union all 
          select Sum( (pEndDate - bdate) - HolidaysBetween(bdate,pEndDate) ) as leaves 
          from SS_LeaveLedg where 
          to_char(bdate,'mmyyyy') <> to_char(nvl(edate,bdate),'mmyyyy') 
          and To_Char(bdate,'mmyyyy') = To_Char(pEndDate,'mmyyyy')
          And adj_type <> 'LE'
          And adj_type <> 'YA'
          And adj_type <> 'DA'
          And empno = Ltrim(Rtrim(pEmpNo)) 
          and ( (Leavetype = Ltrim(Rtrim(pLeaveType)) and db_Cr = 'D' ) Or (LeaveType = Ltrim(Rtrim(pLeaveType)) And Adj_Type = 'LP') )
      );
    Exception
      When No_Data_Found Then
        vMultipleMM := 0;
    End;
    vRetVal := Nvl(vMultipleMM,0) + Nvl(vSingleMM,0);
    Return vRetVal;
end;
/
---------------------------
--Changed FUNCTION
--N_LUNCH_TIME
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_LUNCH_TIME" 
(
  P_EMPNO IN VARCHAR2  
, P_DATE IN DATE  
, P_SCODE IN VARCHAR2  
) RETURN NUMBER AS 
	Cursor C1 is select * from SS_IntegratedPunch 
		where EmpNo = ltrim(rtrim(p_EmpNo))
		and PDate = p_date order by PDate,hhsort,mmsort,hh,mm;
	Type TabHrsRec is record (punch_hrs number);
	Type TabHrs  is table of TabHrsRec index by Binary_Integer;
	V_TabHrs TabHrs;
	vCntr Number;
  vParent char(4);
	vL_StartHrs 			Number ;
	vL_EndHrs 				Number ;
	vFirstPunch 	Number ;
	vLastPunch 		Number ;
  vLunchDura    Number ;
BEGIN
	vCntr := 1;
	For C2 in C1 Loop
		V_TabHrs(vCntr).punch_Hrs := (C2.HH * 60) + C2.MM;
		--V_TabHrs(Cntr).TabMns := C2.MM;
		vCntr := vCntr + 1;
	End Loop;
  select parent into vParent from ss_emplmast where empno = trim(p_empno);
  
  Select (StartHH *60) + StartMN, (EndHH * 60) + EndMN 
    InTo vL_StartHrs, vL_EndHrs
    From SS_LunchMast Where ShiftCode = Ltrim(RTrim(p_SCode)) And Parent = Ltrim(RTrim(vParent));
  select Nvl(lunch_mn,0) into vLunchDura from ss_shiftmast where shiftcode = p_scode;
  
  If vCntr < 3 Then
    return vLunchDura;
----------->>>> Return    
  End If;
  vCntr := vCntr - 1;
  If v_tabhrs(1).punch_hrs >= vL_StartHrs and v_tabhrs(1).punch_hrs >= vL_EndHrs Then
    If v_tabhrs(1).punch_hrs - vL_StartHrs < vLunchDura Then
      Return v_tabhrs(1).punch_hrs - vL_StartHrs ;
    End If;
  End If;
  for i in 1 .. vCntr Loop
    If i mod 2 = 0 then
      If i < vCntr Then
        If v_tabhrs(i).punch_Hrs >= vL_StartHrs and v_tabhrs(i).punch_Hrs <= vL_EndHrs Then
        
          If (v_tabhrs(i + 1).punch_hrs - v_tabhrs(i).punch_hrs) >= vLunchDura Then 
            Return 0;
          ElsIf (v_tabhrs(i + 1).punch_hrs - v_tabhrs(i).punch_hrs) >= 0 And (v_tabhrs(i + 1).punch_hrs - v_tabhrs(i).punch_hrs) < vLunchDura Then 
            Return vLunchDura - (v_tabhrs(i + 1).punch_hrs - v_tabhrs(i).punch_hrs);
          End If;
        End If;
      End If;
    end if;
  End Loop;
  return vLunchDura;
END N_LUNCH_TIME;
/
---------------------------
--Changed FUNCTION
--N_LEAVE_SUM
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_LEAVE_SUM" (
     pEmpNo In Varchar2, pBeginDate in Date , pEndDate In Date,
    pLeaveType In Varchar2 )
  return Number
as
    vSingleMM Number;
    vMultipleMM Number;
    vRetVal Number;
begin
    If Ltrim(Rtrim(pLeaveType)) <> 'SL' Then
        /*----------------------------------------------------*/
        /*   Leave period extends over a period of 1 month    */
        /*----------------------------------------------------*/
        Begin
            select sum( Nvl((leaveperiod / 8),0)  ) * -1 InTo vSingleMM from SS_LeaveLedg 
                where 
                --to_char(bdate,'mmyyyy') = to_char(nvl(edate,bdate),'mmyyyy')
                bdate >= pBeginDate and Nvl(edate,bdate) <= pEndDate 
                And adj_type <> 'YA'
                And adj_type <> 'DA'
                --And description not like 'Year End % Adjustment Entry%' and description not like 'On Deputation Leave Adj%'
                and EmpNo=Ltrim(Rtrim(pEmpNo)) 
                and (Leavetype = Ltrim(Rtrim(pLeaveType))  and db_Cr = 'D');
        Exception
            When No_Data_Found Then
                vSingleMM := 0;
        End;
--    ElsIf Ltrim(Rtrim(LeaveType)) = 'SL' Then
    ElsIf Ltrim(Rtrim(pLeaveType)) = 'SL' Then
        Begin
            Select Sum(Nvl(Leaves,0)) InTo vSingleMM From
            (
              select sum( (leaveperiod / 8*-1)  - holidaysbetween(bdate,edate) )  As Leaves
                from SS_LeaveLedg where
                --to_char(bdate,'mmyyyy') = to_char(nvl(edate,bdate),'mmyyyy')
                bdate >= pBeginDate and Nvl(edate,bdate) <= pEndDate 
                And adj_type <> 'LE' 
                And adj_type <> 'YA'
                And adj_type <> 'DA'
                --And description not like 'Year End % Adjustment Entry%'
                --and description not like 'On Deputation Leave Adj%'
                And empno=Ltrim(Rtrim(pEmpNo)) 
                And (Leavetype = Ltrim(Rtrim(pLeaveType)) and db_Cr  = 'D') );
        Exception
            When No_Data_Found Then
                vSingleMM := 0;
        End;
        vRetVal := vSingleMM;
    End If;
    /*----------------------------------------------------*/
    /*   Leave period extends over a period of 2 months   */
    /*----------------------------------------------------*/
    Begin
      Select Sum(Nvl(Leaves,0)) InTo vMultipleMM From 
      (
          select sum( (edate - (pBeginDate-1) ) - holidaysbetween(pBeginDate,edate) ) As Leaves
          from SS_LeaveLedg where 
          to_char(bdate,'mmyyyy') <> to_char(nvl(edate,bdate),'mmyyyy')
          and To_Char(edate,'mmyyyy') = To_Char(pBeginDate,'mmyyyy')
          and db_Cr = 'D' And adj_type <> 'LE' 
          And adj_type <> 'YA'
          And adj_type <> 'DA'
          and leavetype = Ltrim(Rtrim(pLeaveType))
          And empno = Ltrim(Rtrim(pEmpNo)) 
        union all 
          select Sum( ((pEndDate+1) - bdate) - HolidaysBetween(bdate,pEndDate) ) as leaves 
          from SS_LeaveLedg where 
          to_char(bdate,'mmyyyy') <> to_char(nvl(edate,bdate),'mmyyyy') 
          and To_Char(bdate,'mmyyyy') = To_Char(pEndDate,'mmyyyy')
          and db_Cr = 'D' And adj_type <> 'LE'
          And adj_type <> 'YA'
          And adj_type <> 'DA'
          And empno = Ltrim(Rtrim(pEmpNo)) and leavetype = Ltrim(Rtrim(pLeaveType))
      );
    Exception
      When No_Data_Found Then
        vMultipleMM := 0;
    End;
    vRetVal := Nvl(vMultipleMM,0) + Nvl(vSingleMM,0);
    Return vRetVal;
end;
/
---------------------------
--Changed FUNCTION
--N_IS_EMP_ABSENT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_IS_EMP_ABSENT" (
    param_empno        in varchar2,
    param_date         in varchar2,
    param_shift_code   in varchar2,
    param_doj          in varchar2
) return varchar2 as

    v_holiday           number;
    v_count             number;
    c_is_absent         constant number := 1;
    c_not_absent        constant number := 0;
    c_leave_depu_tour   constant number := 2;
    v_on_ldt            number;
    v_ldt_appl          number;
begin
    v_holiday    := get_holiday(param_date);
    if v_holiday > 0 or nvl(param_shift_code,'ABCD') in (
        'HH',
        'OO'
    ) then
        --return -1;
        return c_not_absent;
    end if;
    
    --Check DOJ & DOL

    if param_date < nvl(param_doj,param_date) then
        --return -5;
        return c_not_absent;
    end if;
    v_on_ldt     := isleavedeputour(param_date,param_empno);
    if v_on_ldt = 1 then
        --return -2;
        --return c_leave_depu_tour;
        return c_not_absent;
    end if;
    select
        count(empno)
    into v_count
    from
        ss_integratedpunch
    where
        empno = trim(param_empno)
        and pdate = param_date;

    if v_count > 0 then
        --return -3;
        return c_not_absent;
    end if;
    v_ldt_appl   := isldt_appl(param_empno,param_date);
    if v_ldt_appl > 0 then
        --return -6;
        return c_not_absent;
    end if;
    --return -4;
    return c_is_absent;
end n_is_emp_absent;
/
---------------------------
--New FUNCTION
--N_DELTAHRS_INCLUDE_2ND_SHIFT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_DELTAHRS_INCLUDE_2ND_SHIFT" (
    p_empno       In Varchar2,
    p_date        In Date,
    p_shiftcode   In Varchar2,
    p_penalty_hrs In Number
) Return Number Is

    v_count      Number := 0;
    v_retval     Number := 0;
    v_wrkhrs     Number := 0;

    v_esthrs     Number := 0;

    v_otime      Number := 0;
    v_itime      Number := 0;
    vfirstpunch  Number;
    vlastpunch   Number;
    x            Number;
    v_isleave    Number;
    vlcomeegohrs Number;
    vpunchcount  Number;
Begin
    Select
        Count(*)
    Into
        vpunchcount
    From
        ss_integratedpunch
    Where
        empno         = Trim(p_empno)
        And pdate     = trunc(p_date)
        And falseflag = 1;
    If ltrim(rtrim(p_shiftcode)) = 'OO' Or ltrim(rtrim(p_shiftcode)) = 'HH' Or vpunchcount < 2 Then
        Return v_retval;
    End If;
    v_count := 0;

    Select
        Count(*)
    Into
        v_count
    From
        ss_depu
    Where
        bdate <= p_date
        And edate >= p_date
        And empno     = p_empno
        And hod_apprl = 1
        And hrd_apprl = 1;

    Select
        Count(*)
    Into
        v_isleave
    From
        ss_leaveledg
    Where
        empno                            = ltrim(rtrim(p_empno))
        And bdate <= p_date
        And nvl(edate, bdate) >= p_date
        And (hd_date Is Null Or (hd_part = 1 And hd_date <> p_date))
        And (adj_type                    = 'LA' Or adj_type = 'LC');

    If v_count > 0 Or v_isleave > 0 Then
        v_retval := 0;
    Else

        v_itime     := getshiftintime(p_empno, p_date, p_shiftcode);
        v_otime     := getshiftouttime(p_empno, p_date, p_shiftcode);
        If p_date >= To_Date('1-Mar-2022', 'dd-Mon-yyyy') Then
            v_wrkhrs := n_workedhrs_include_2nd_shift(lpad(trim(p_empno), 5, '0'), p_date, p_shiftcode);
        Else
            v_wrkhrs := n_workedhrs(lpad(trim(p_empno), 5, '0'), p_date, p_shiftcode);
        End If;
        vfirstpunch := get_punch_num(lpad(p_empno, 5, '0'), p_date, 'OK', 'DHRS');
        vlastpunch  := get_punch_num(lpad(p_empno, 5, '0'), p_date, 'KO', 'DHRS');

        Select
            Count(*)
        Into
            v_count
        From
            ss_integratedpunch
        Where
            empno         = Trim(p_empno)
            And pdate     = p_date
            And falseflag = 1;
        If v_count > 0 Then
            v_esthrs := shift_work_hrs(p_empno, p_date, p_shiftcode);
        Else
            v_esthrs := 0;
        End If;
        If v_itime < vfirstpunch Then
            vlcomeegohrs := vfirstpunch - v_itime;
        End If;
        If v_otime > vlastpunch Then
            vlcomeegohrs := nvl(vlcomeegohrs, 0) + (v_otime - vlastpunch);
        End If;

        If p_penalty_hrs > 0 Then
            If (p_penalty_hrs * 60) < vlcomeegohrs Then
                vlcomeegohrs := p_penalty_hrs * 60;
            End If;
        Else
            vlcomeegohrs := 0;
        End If;
        v_retval    := vlcomeegohrs + v_wrkhrs - v_esthrs;

    End If;
    Select
        Count(*)
    Into
        vpunchcount
    From
        ss_integratedpunch
    Where
        empno         = Trim(p_empno)
        And pdate     = p_date
        And falseflag = 1;
    If Mod(vpunchcount, 2) <> 0 And v_retval > 0 And p_date >= '31-OCT-11' Then
        v_retval := 0;
    End If;
    Return nvl(v_retval, 0);

End;
/
---------------------------
--Changed FUNCTION
--N_CFWDDELTAHRS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."N_CFWDDELTAHRS" (p_EmpNo IN Varchar2, p_PDate IN Date, p_SaveTot In Number) RETURN Number IS

-- p_SaveTot - if '1' Then totals of Last Complete Week of the month are stored in the database.
-- p_SaveTot - if '0' Then totals of Last Complete Week of the month are retrived from the database.
		
		Cursor C1 (c_EmpNo IN Varchar2, c_Date IN Date) Is
				Select c_EmpNo As EmpNo, To_Number(D_DD) As Days, 
						LateCome1(c_EmpNo,D_Date) AS LCome,
						D_Date AS PDate, 
						GetShift1(c_EmpNo, D_Date) AS SCode,
						Get_Holiday(D_Date) As isSunday,
						EarlyGo1(c_EmpNo,D_Date) AS EGo,
						isLComeEGoApp(c_EmpNo,D_Date) AS LC_App,
						isSLeaveApp(c_EmpNo,D_Date) AS SL_App,
						isLastWorkDay1(c_EmpNo, D_Date) AS isLWD,
						Wk_Of_Year
				From SS_Days_Details
				Where D_Date >= c_Date And D_Date <= Last_Day(c_Date)
				Order by D_Date;
				
		LC_AppCntr Number := 0;
		SL_AppCntr Number := 0;
		v_OpenLC_Cntr Number := 0;
		v_OpenMM Number :=0;
		v_SDate Date;
		v_Count Number :=0;
		v_DHrs Number :=0;
		v_SumDHrs Number :=0;
		v_CFwdHrs Number :=0;
		v_RetVal Number := 0;
		v_CFwdHrsOfLastWeek Number :=0;
		--v_CFwdSLAppCntr Number :=0;
		
BEGIN
		If To_Number(To_Char(p_PDate,'dd')) = 1 Then
				Select Count(*) InTo v_Count From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo);
				If v_Count = 0 Then
						v_SDate := To_Date('30-nov-2001');
				Else
						Select PDate, MM, LC_AppCntr InTo v_SDate, v_OpenMM, v_OpenLC_Cntr From SS_DeltaHrsBal 
							Where PDate < p_PDate 
							And EmpNo = Trim(p_EmpNo)
							And PDate = (Select Max(PDate) From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo) Group By EmpNo);
				End If;
				v_SDate := v_SDate + 1;
				If v_SDate <> p_PDate Then
						For C2 IN C1(p_EmpNo,v_SDate) Loop
								LC_AppCntr := LC_AppCntr + C2.LC_App;
								SL_AppCntr := SL_AppCntr + C2.SL_App;
								
								/*If To_Char(Last_Day(v_SDate),'Dy') <> 'Sun' Then
										If To_Number(To_Char(Last_Day(v_SDate),'IW')) <> To_Number(C2.Wk_Of_Year) Then
											v_CFwdSLAppCntr := 	v_CFwdSLAppCntr + C2.SL_App;
										End If;
								End If;*/
								
								Select N_DeltaHrs(C2.EmpNo,C2.PDate,C2.SCode,PenaltyLeave1(C2.LCome,C2.EGo,C2.isLWD,LC_AppCntr,SL_AppCntr,C2.LC_App,C2.SL_App)) InTo v_DHrs From Dual;
								v_SumDHrs := v_SumDHrs + v_DHrs;
								If C2.isLWD = 1 And C2.PDate <> Last_Day(v_SDate) Then
										Select CFwd_DHRs_Week(LastDay_CFwd_DHrs1(v_DHrs, C2.EGo, C2.SL_App, SL_AppCntr, C2.isLWD), C2.isLWD, v_SumDHRs) InTo v_CFwdHrs From Dual;
										Select Least(Greatest(v_SumDHrs,v_CFwdHrs),0) InTo v_SumDHrs From Dual;
								End If;
								/*If C2.isLDM = 1 And C2.isLWD = 0 Then
										Null;
								End If;*/
								If C2.isSunday = 2 Then
										v_CFwdHrsOfLastWeek := v_SumDHrs;
										LC_AppCntr := 0;
								End If;
						End Loop;
						If p_SaveTot = 1 Then
								Delete From SS_DeltaHrsBal_OT where EmpNo = p_EmpNo And Mon = To_Char(v_SDate,'MM') And YYYY = To_Char(v_SDate, 'yyyy');
								Insert InTo SS_DeltaHrsBal_OT (EmpNo,Mon,YYYY,DeltaHrs) Values (p_EmpNo,LPad(To_Char(v_SDate,'MM'),2,'0'),LPad(To_Char(v_SDate,'YYYY'),4,'0'),v_CFwdHrsOfLastWeek);
								Commit;
						End If;
						v_RetVal := v_SumDHrs;
						LC_AppCntr := 0;
				Else
						v_RetVal := v_OpenMM;
				End If;
				Return v_RetVal;
		End If;
END
;
/
---------------------------
--Changed FUNCTION
--LATECOME
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."LATECOME" (EmpNum IN Varchar2, V_PDate IN Date) RETURN Number IS
	getDate		  Varchar2(2);
	ITime  			Number;
	LCome 			Number;
	SCode 			Varchar2(2);
	IsHoliday 	Number;	
	VCount 			Number;
	ITimeHH 		Number;
	ITimeMn 		Number;
	OTimeHH 		Number;
	OTimeMn 		Number;	
	PunchNos 		Number;
	FirstPunch 	Number;
	V_AvailedLunchTime  Number;
	V_EstimatedLunchTime Number;
BEGIN		
		ITime := 0;
		LCome := 0;
		IsHoliday := CheckHoliday(V_PDate);
		If IsHoliday = 3 then
			SCode := 'HH';
		ElsIf IsHoliday = 0 then
			getDate := To_Char(V_Pdate, 'dd');						

			Select Substr(s_mrk, ((To_number(getDate) * 2) - 1), 2) Into SCode From ss_muster
				Where empno = lpad(trim(EmpNum),5,'0') And mnth = Trim(To_Char(V_Pdate, 'yyyymm'));

			select TimeIn_HH,TimeIn_Mn,TimeOut_HH,TimeOut_Mn into ITimeHH, ITimeMn, OTimeHH, OTimeMn
				from SS_ShiftMast where ShiftCode = Trim(SCode); 
			ITime := ITimeHH * 60 + ITimeMn;
		End If;
		select count(*) into PunchNos from SS_IntegratedPunch where empno = lpad(trim(EmpNum),5,'0') and PDate = V_PDate Order By PDate, HHSort, MMSort;
		If PunchNos > 1 then
				FirstPunch := FirstLastPunch1(lpad(trim(EmpNum),5,'0'),V_PDate,0);
				If IsHoliday = 0 then
					V_AvailedLunchTime := AvailedLunchTime(EmpNum, V_PDate ,SCode);
					V_EstimatedLunchTime := EstimatedLunchTime(EmpNum, V_PDate ,SCode);
					LCome := FirstPunch - ITime - (V_EstimatedLunchTime - V_AvailedLunchTime);
					If LCome < 1 then
						LCome := 0;
					End If;
				End If;
		End if;
		Return LCome;
Exception 
	When Others Then
		Return -1;		
END;
/
---------------------------
--Changed FUNCTION
--LASTDAY_CFWD_DHRS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."LASTDAY_CFWD_DHRS" (p_EmpNo IN Varchar2, p_PDate IN Date) RETURN Number IS
		v_RetVal Number := 0;
		v_EGo Number;
		isLastWrkDy Number;
		v_SLAppCntr Number;
		v_SLApp Number;
		v_ShiftCode Varchar2(10);
		v_DeltaHrs Number;
BEGIN
		Select GetShift1(p_EmpNo,p_PDate) InTo v_ShiftCode From Dual;
		Select 	EarlyGo(p_EmpNo, p_PDate),
						GetSLeaveAppCntr(p_EmpNo,p_PDate),
						IsSLeaveApp(p_EmpNo,p_PDate),
						DeltaHrs(p_EmpNo,p_PDate,v_ShiftCode)
				InTo v_EGo,v_SLAppCntr,v_SLApp,v_DeltaHrs
				From Dual;

		If v_EGo > 0 And v_DeltaHrs < 0 Then
			If (v_EGo <= 60) Then
					Select Greatest(v_EGo,v_DeltaHrs) InTo v_RetVal From Dual;
	  			v_RetVal := v_EGo;
			ElsIf (v_SLApp = 1 And v_SLAppCntr <= 2) And (v_EGo > 60 And v_EGo <= 240) Then
					Select Greatest(v_EGo,v_DeltaHrs) InTo v_RetVal From Dual;
	  			v_RetVal := v_EGo;
			End If;
		End If;
  	Return v_RetVal * -1;
END
;
/
---------------------------
--Changed FUNCTION
--IS_LEAVE
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."IS_LEAVE" 
(
  PARAM_EMPNO IN VARCHAR2 
, PARAM_DATE IN DATE 
) RETURN NUMBER AS 
  v_cntr number;
BEGIN
    Select count(*) into v_cntr from ss_holidays where holiday = param_date;
    if v_cntr <> 0 then return 0; end if;
    Select count(*) into V_Cntr from SS_LeaveLedg 
  	where EmpNo = trim(PARAM_EMPNO) and BDate <= param_date and nvl(EDate,BDate) >= param_date
  	and (ADJ_Type = 'LA' or ADJ_Type = 'LC') ;
    If v_cntr > 0 Then
        Return 1;
    Else
        Return 0; 
    End If;
END IS_LEAVE;
/
---------------------------
--Changed FUNCTION
--IS_GRADE_X
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."IS_GRADE_X" (param_empno in varchar2) RETURN number AS 
  vCount Number;
BEGIN
  Select count(*) Into vCount from ss_emplmast 
    where empno=param_empno and grade like 'X%'
    and status = 1;
  RETURN vCount;
END IS_GRADE_X;
/
---------------------------
--Changed FUNCTION
--ISLASTWORKDAY
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."ISLASTWORKDAY" (V_Date IN Date) RETURN Number IS 
	isHoliday Number;
BEGIN
  isHoliday := Get_Holiday(V_Date+1);
  If isHoliday = 0 Then
  	Return 0;
  ElsIf isHoliday = 1 Then
  	Return 1;
  Else
  	return isLastWorkDay(V_Date + 1);
  End If;
END;
/
---------------------------
--Changed FUNCTION
--ISEXTRAHOURS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."ISEXTRAHOURS" (p_EmpNo Varchar2, p_Month Varchar2, p_Year Varchar2) RETURN Number IS
		v_Cntr Number;
BEGIN
  	Select Count(*) InTo v_Cntr From (Select N_WorkedHrs(p_EmpNo, D_Date,GetShift1(p_EmpNo,D_Date)) - EstimatedWrkHrs(p_EmpNo, D_Date) 
  		 As ExtraHrs From SS_Days_Details
  		Where D_Date >= N_GetStartDate(p_Month, p_Year) And D_Date <= N_GetEndDate(p_Month, p_Year)) Where ExtraHrs >= 30 ;
  	IF v_Cntr > 0 Then
  		 Return 1;
  	Else
  		Return 0;
  	End If;
Exception
		When Others Then
			Return 0;  			
END;
/
---------------------------
--Changed FUNCTION
--HOLIDAYSBETWEEN
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."HOLIDAYSBETWEEN" (PStartDate IN Date, PEndDate in Date )RETURN number is
	VCount number;
BEGIN
	Select count(*) into VCount from SS_Holidays where Holiday between PStartDate and PEndDate;
	If VCount > 0 then
  		return VCount;
	Else
			return 0;
  End If;
END;
/
---------------------------
--Changed FUNCTION
--GET_TIME_SHET_EXTRA_HRS_TOT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_TIME_SHET_EXTRA_HRS_TOT" 
(
  PARAM_MM IN VARCHAR2  
, PARAM_YYYY IN VARCHAR2  
, PARAM_EMPNO IN VARCHAR2  
) RETURN NUMBER AS 
  vRetVal Number;
BEGIN
Select Sum(Extra_Hours) InTo vRetVal From (
  select get_time_sheet_Extra_Hrs(param_empno,d_date) as Extra_Hours from ss_days_details 
    where d_date >= n_getstartdate(param_mm,param_yyyy)
    and d_date <= n_getenddate(param_mm,param_yyyy) );
    Return vRetVal;
    Exception
    When Others then return null;
END GET_TIME_SHET_EXTRA_HRS_TOT;
/
---------------------------
--Changed FUNCTION
--GET_TIME_SHEET_WORK_HRS_TOT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_TIME_SHEET_WORK_HRS_TOT" (param_empno varchar2,param_mm varchar2, param_yyyy varchar2)
RETURN VARCHAR2 AS 
  vRetVal Number;
BEGIN
Select Sum(Work_Hours) InTo vRetVal From (
  select get_time_sheet_work_Hrs(param_empno,d_date) as Work_hours from ss_days_details 
    where d_date >= n_getstartdate(param_mm,param_yyyy)
    and d_date <= n_getenddate(param_mm,param_yyyy) );
    Return vRetVal;
    Exception
    When Others then return null;
END GET_TIME_SHEET_WORK_HRS_TOT;
/
---------------------------
--Changed FUNCTION
--GET_TIME_SHEET_EXTRA_HRS_TOT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_TIME_SHEET_EXTRA_HRS_TOT" 
(
  PARAM_EMPNO IN VARCHAR2  
,  PARAM_MM IN VARCHAR2  
, PARAM_YYYY IN VARCHAR2  
) RETURN NUMBER AS 
  vRetVal Number;
BEGIN
Select Sum(Extra_Hours) InTo vRetVal From (
  select get_time_sheet_Extra_Hrs(param_empno,d_date) as Extra_Hours from ss_days_details 
    where d_date >= n_getstartdate(param_mm,param_yyyy)
    and d_date <= n_getenddate(param_mm,param_yyyy) );
    Return vRetVal;
    Exception
    When Others then return null;
END GET_TIME_SHEET_EXTRA_HRS_TOT;
/
---------------------------
--Changed FUNCTION
--GET_PROJECT_DESC
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_PROJECT_DESC" 
(
  param_projno IN VARCHAR2  
) RETURN VARCHAR2 AS 
lcl_desc varchar2(100);
BEGIN
  if trim(param_projno) is null then 
    return '';
  End If;
  select name into lcl_desc from ss_projmast where projno = param_projno;
  return lcl_desc;
Exception
  when others then 
    return '';
END GET_PROJECT_DESC;
/
---------------------------
--Changed FUNCTION
--GET_PARENT_NAME
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_PARENT_NAME" 
(
  param_parent in varchar2 
) return varchar2 as 
  v_ret_val varchar2(60);
begin
  select name into v_ret_val from ss_costmast where costcode = trim(param_parent);
  return v_ret_val;
exception
  when others then return null;
end get_parent_name;
/
---------------------------
--Changed FUNCTION
--GET_MUSTER_STATUS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_MUSTER_STATUS" 
  ( parEmpNo IN Varchar2,
    parDate IN Date )
  RETURN  CHAR IS
--
--  THIS FUNCTION RETURN THE EMPLOYEE MUSTER STATUS FOR THE DAY
--  This functin returns the employee muster status for the day eg. leave, deputation, on duty, in office, etc.
--  Return values of this function
--------
--  PP  --  Employee is Present
--  IO  --  Forgetting Punch Card - But present in office
--  OD  --  On Duty for the whole day
--  LE  --  Employee is on leave
--  DP  --  Employee is on Deputaion
--  TR  --  Employee is on Tour
--  HT  --  Employee is at Home Town
--  AB  --  Employee is Absent
--  VS  --  Employee is on duty for  VISA PROBLEM
--  NA  --  Not Applicable (eg. parDate is < DOJ of Employee)
--------
    vRetVal     CHAR(2);
    vCount      Number;
BEGIN 
    vRetVal := 'NA';

    -- Check if employee has punched his Punch Card ( P R E S E N T )
    Select Count(*) InTo vCount From SS_Punch
        Where EmpNo = Trim(parEmpNo) And PDate = parDate;
    If vCount > 0 Then            Return 'PP';        End If;

    -- Check If Employee is on   L E A V E
    Select Count(*) InTo vCount From SS_LeaveLedg Where EmpNo = Trim(parEmpNo)
        And Bdate <= parDate And Nvl(EDate,BDate) >= parDate
        And DB_CR = 'D' And Adj_Type In ( 'LC', 'DR', 'LA');
    If vCount > 0 Then            Return 'LE';        End If;
    
    -- Check If Employee is on   O N   D U T Y
    Select Count(*) InTo vCount From SS_OnDuty Where EmpNo = Trim(parEmpNo)
        And PDate = parDate And Type = 'OD';
    If vCount > 0 Then            Return  'OD';        End If;
    
    -- Check If Employee has applied for  F O R G E T T I N G   P U N C H   C A R D
    Select Count(*) InTo vCount From SS_OnDuty Where EmpNo = Trim(parEmpNo)
        And PDate = parDate And Type = 'IO';
    If vCount > 0 Then            Return  'IO';        End If;


    -- Check If Employee is  H O M E   T O W N
    Select Count(*) InTo vCount From SS_Depu Where EmpNo = Trim(parEmpNo)
        And BDate <= parDate And EDate >= parDate And Type = 'HT';
    If vCount > 0 Then            Return  'HT';        End If;

    -- Check If Employee is on  D E P U T A T I O N
    Select Count(*) InTo vCount From SS_Depu Where EmpNo = Trim(parEmpNo)
        And BDate <= parDate And EDate >= parDate And Type = 'DP';
    If vCount > 0 Then            Return  'DP';        End If;

    -- Check If Employee is on   T O U R
    Select Count(*) InTo vCount From SS_Depu Where EmpNo = Trim(parEmpNo)
        And BDate <= parDate And EDate >= parDate And Type = 'TR';
    If vCount > 0 Then            Return  'TR';        End If;

    -- Check If Employee is on duty for  V I S A   P R O B L E M
    Select Count(*) InTo vCount From SS_Depu Where EmpNo = Trim(parEmpNo)
        And BDate <= parDate And EDate >= parDate And Type = 'VS';
    If vCount > 0 Then            Return  'VS';        End If;

    -- Check If Employee is  A B S E N T
    If IsAbsent(parEmpNo,pardate) = 1 Then   Return 'AB';   End If;


    RETURN vRetVal;
EXCEPTION
   WHEN Others THEN
       Return vRetVal;
END;
/
---------------------------
--Changed FUNCTION
--GET_MGR_USERID
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_MGR_USERID" 
(
  P_USERID_IN IN VARCHAR2  
) RETURN VARCHAR2 AS 

v_userid_in VARCHAR2(50);
v_empno VARCHAR2(5); 
v_mngr VARCHAR2(5);
v_userid VARCHAR2(50);
v_email VARCHAR2(45);
BEGIN
    v_userid_in := UPPER(LTRIM(RTRIM(p_userid_in)));
    
    SELECT empno INTO v_empno from USERIDS
    WhERE 'TICB\'|| upper(ltrim(rtrim(userid))) = v_userid_in;
    
    SELECT MNGR INTO v_mngr FROM SS_EMPLMAST
    WHERE empno = v_empno;
    
    SELECT ltrim(rtrim(USERID)),ltrim(rtrim(email)) INTO v_userid,v_email FROM USERIDS
    WHERE empno = v_mngr;
    
    v_userid := 'TICB\'|| v_userid;
   
    RETURN v_userid;
EXCEPTION
   WHEN OTHERS THEN
        RETURN 'TICB\Darshan';
END GET_MGR_USERID;
/
---------------------------
--Changed FUNCTION
--GET_EMP_NAME_FROM_PERSON_ID
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_EMP_NAME_FROM_PERSON_ID" (
    p_person_id In Varchar2
) Return Varchar2 As
    v_emp_name     Varchar2(60);
    v_person_id Varchar2(10);
Begin
    v_person_id := trim(substr(p_person_id, 2));

    Select
        name
    Into
        v_emp_name
    From
        ss_emplmast
    Where
        Trim(personid) In (Trim(p_person_id), v_person_id)
        And status = 1;
    Return v_emp_name;
Exception
    When Others Then
        Return 'ERRRR';
End get_emp_name_from_person_id;
/
---------------------------
--Changed FUNCTION
--GET_EMP_DEPT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_EMP_DEPT" 
(
  param_empno in varchar2 
) return varchar2 as 
  v_parent varchar2(4);
  v_cost_desc varchar2(60);
begin
  if param_empno = 'ALLSS' Then
    return 'All Services';
  End If;
  Select parent into v_parent from ss_Emplmast where empno=param_empno;
  select name into v_cost_desc from ss_costmast where costcode = v_parent;
  return v_cost_desc;
Exception
  When Others then
    return 'ERRRRR';
end get_emp_dept;
/
---------------------------
--Changed FUNCTION
--GET_EMP_COMPANY
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GET_EMP_COMPANY" (pEmpNo IN VARCHAR, pDate IN DATE)  RETURN VARCHAR IS
		varRetCompany		CHAR (4);
BEGIN

  	Select Company InTo varRetCompany From ( Select Company From SS_EMP_COMP_LASTDATE_4_MUSTER Where EmpNo = pEmpNo And
  		LastDate >= pDate Order by LastDate Desc ) Where RowNum = 1;
  	Return varRetCompany;
Exception
    When NO_DATA_FOUND Then
        Begin
            Select Company InTo varRetCompany From SS_EmplMast Where Empno = pEmpNo;
            Return varRetCompany;
        Exception
            When NO_DATA_FOUND Then
                Return ' ';
        END;
    When Others Then
            Return ' ';
END;
/
---------------------------
--Changed FUNCTION
--GETSLEAVEAPPCNTR
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETSLEAVEAPPCNTR" (p_EmpNo IN Varchar2, p_PDate IN Date) Return Number IS
		v_RetVal Number:= 0;
		v_EndDy Number;
		v_Mon varchar2(30);
		
BEGIN
		v_EndDy := To_Number(To_Char(p_PDate,'dd'));
		For i In 1 .. v_EndDy Loop
				v_RetVal := v_RetVal + SL_AppCount(p_EmpNo, To_Date(i||to_Char(p_PDate,'-mm-yyyy'),'dd-mm-yyyy'));
		End Loop;
  	return v_RetVal;
END;
/
---------------------------
--Changed FUNCTION
--GETSHIFTINTIME1
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETSHIFTINTIME1" (p_EmpNo In Varchar2, p_PDate In Date,
												p_ShiftCode In Varchar2) RETURN Number IS
		v_Cntr Number := 0;
		v_Count Number := 0;
		v_HDPart Number := 0;
		v_RetVal Number := 0;
		v_HH Number :=0;
		v_MM Number :=0;
		v_HH1 Number :=0;
		v_MM1 Number :=0;
BEGIN
  	Select Count(*) InTo v_Cntr From SS_LeaveLedg 
  		Where EmpNo=Ltrim(Rtrim(p_EmpNo)) And HD_Date = p_PDate;
  	
		  	If v_Cntr = 1 Then
		  			Select Nvl(HD_Part,0) InTo v_HDPart From SS_LeaveLedg 
		  				Where EmpNo=Ltrim(Rtrim(p_EmpNo)) And HD_Date = p_PDate;
		  	End If;
		  	If v_HDPart = 0 Then
		  			Select TimeIn_HH,TimeIn_Mn InTo v_HH,v_MM From SS_ShiftMast 
		  				Where ShiftCode = Ltrim(Rtrim(p_ShiftCode));
		  			v_RetVal := (v_HH*60) + v_MM;
		  	ElsIf v_HDPart = 2 Then
		  			Select HDay1_StartHH,HDay1_StartMM InTo v_HH, v_MM From SS_HalfDayMast 
		  				Where ShiftCode = Ltrim(Rtrim(p_ShiftCode)) And Parent = (Select Parent From SS_EmplMast Where EmpNo = Ltrim(Rtrim(p_EmpNo)));
		  			v_RetVal := (v_HH*60) + v_MM;
		  	ElsIf v_HDPart = 1 Then
		  			Select HDay2_StartHH,HDay2_StartMM InTo v_HH, v_MM From SS_HalfDayMast 
		  				Where ShiftCode = Ltrim(Rtrim(p_ShiftCode)) And Parent = (Select Parent From SS_EmplMast Where EmpNo = Ltrim(Rtrim(p_EmpNo)));
		  			v_RetVal := (v_HH*60) + v_MM;
		  	End If;
  	Select Count(*) InTo v_Count From SS_BusLate_LayOff_Detail 
  			Where EmpNo=Ltrim(Rtrim(p_EmpNo)) And PDate = p_PDate;
  	If v_Count = 1 Then
  			
  			Select TimeIn_HH,TimeIn_MM InTo v_HH1, v_MM1
					From SS_BusLate_LayOff_Mast
					Where PDate=p_PDate 
					And Code = (Select Code From SS_BusLate_LayOff_Detail Where EmpNo=Ltrim(Rtrim(p_EmpNo)) And PDate = p_PDate);
  			If v_RetVal < ((v_HH1 * 60) + v_MM1) Then
  					
  					v_RetVal := ((v_HH1 * 60) + v_MM1);
  			End If;
  	End If;
  	Return v_RetVal;

Exception
  	When Others Then
  			return 0;
END
;
/
---------------------------
--Changed FUNCTION
--GETLCOMEAPPCNTR
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETLCOMEAPPCNTR" (p_EmpNo IN Varchar2, p_PDate IN Date) RETURN Number IS
		v_RetVal Number:= 0;
		v_WeekDy Number;
		v_StartDate Date;
		v_loopCntr Number := 0;
BEGIN
  	v_WeekDy := To_Number(To_Char(p_PDate,'d'));
  	If v_WeekDy > 1 And v_WeekDy < 7 Then
  			For i In 2 .. v_WeekDy Loop
  					v_RetVal := v_RetVal + LC_AppCount(p_EmpNo, (v_StartDate - v_WeekDy + i));
  			End Loop;
  	End If;
  	Return v_RetVal;
END
;
/
---------------------------
--Changed FUNCTION
--GETLASTWORKINGDAY
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETLASTWORKINGDAY" (F_DATE IN DATE,OPER IN VARCHAR2) RETURN date IS
	x number :=0;
	c_dt date := F_DATE;
	v_count number := 1;
begin	
IF oper = '-' THEN	--Previos Working Date
	while v_count <> 0 loop
		x:= x+1;
		select count(*) into v_count from ss_holidays where holiday = c_dt - x;
	end loop;
	RETURN  c_dt - x;
elsif oper = '+'	then  --Next Working Date
	while v_count <> 0 loop
		x:= x+1;
		select count(*) into v_count from ss_holidays where holiday = c_dt + x;
	end loop;
	RETURN  c_dt + x;
end if;	
END;
/
---------------------------
--Changed FUNCTION
--GETLASTDAYOFWEEK
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETLASTDAYOFWEEK" (p_PDate IN Date) RETURN Date IS
		v_WeekFDay Date;
		v_NextDate Date;
		v_LWDay Date;
		v_RetVal Date;
		ExitLoop Number := 0;
		v_LWDay1 Date;
		vn_LWDay Number;
		vn_NextDate Number;
BEGIN
		v_WeekFDay := p_PDate;
		v_NextDate := p_PDate;
		While ExitLoop < 1 Loop
				
  			Select GetLastWorkingDay(v_NextDate,'+') InTo v_LWDay from dual;
  			vn_LWDay  := To_Number(To_Char(v_LWDay,'d'));
  			vn_NextDate  := To_Number(To_Char(v_NextDate,'d'));
  			If vn_LWDay  < vn_NextDate  Then
  					If vn_LWDay = 1 Then
  							v_RetVal := v_LWDay;
  							ExitLoop := 10;
  					Else
		  					Select GetLastWorkingDay(v_LWDay,'-') InTo v_LWDay1 from dual;
		  					If v_LWDay1 <= v_WeekFDay Then
		  							Select GetLastWorkingDay(v_NextDate,'+') InTo v_WeekFDay from dual;
		  					Else
										v_RetVal := v_NextDate;
										ExitLoop := 10;
		  					End If;
		  			End If;
  			End If;
  			v_NextDate := v_LWDay;
		End Loop;
		Return v_RetVal;
END
;
/
---------------------------
--Changed FUNCTION
--GETEMPNAME
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETEMPNAME" (I_EmpNo IN Varchar2) RETURN Varchar2 IS
		vEmpName Varchar2(80);
		vEmpNo Varchar2(10) := LPad(Trim(I_EmpNo),5);
BEGIN
  	vEmpName := ' ';
  	Select Name InTo vEmpName From SS_EmplMast Where EmpNo = Trim(vEmpNo);
		return vEmpName;
Exception
		When Others Then
			return vEmpName;
END;
/
---------------------------
--Changed FUNCTION
--GETDIFFSICK
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETDIFFSICK" (P_EMPNO IN VARCHAR2,p_lvtype varchar2,NO_DAYS IN NUMBER,S_DATE IN DATE,E_DATE IN DATE) RETURN Number IS
v_lvprd number(8,1) := 0;
v_lvprd1 number(8,1) := 0;
ret_hday number := 0;
startdate date;
enddate date;
ctr number := 0;
i number := 1;
BEGIN
startdate := s_Date;	
enddate := e_date;
select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveledg where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO));
--get preceeding day which is not a holiday

if v_lvprd = 0 then

	while ctr <> 1 loop
		ret_hday := get_holiday(startdate - i);
		ret_hday := get_holiday(enddate + i);
		if ret_hday = 1 or ret_hday = 2 or ret_hday = 3 then
			i := i+1;
		else 
			ctr := 1;
		end if;			
	end loop;
begin
			--first check if CL availed on preceeding days	
			select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveledg where bdate = startdate - i  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO));

			if v_lvprd = 0 then 
			--check if CL availed on succeeding days
				select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8)  into v_lvprd from ss_leaveledg where edate = enddate - i  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO));
			end if;
end;	
end if;	
if v_lvprd = 0 then			
			--check in Application table
		select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8)  into v_lvprd from ss_leaveapp where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND  EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2);			
		if v_lvprd = 0 then
				begin
						--first check if CL availed on preceeding days	
						select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveapp where bdate = startdate - i  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2) ;
						if v_lvprd = 0 then 
						--check if CL availed on succeeding days
							select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveapp where edate = enddate - i  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2); 

						end if;
				end;	
		end if;	
end if;
if v_lvprd = 0 then
	return 0;-- valid  
else			
	return 6;-- CL availed one day before/after  SL
end if;
END;
/
---------------------------
--Changed FUNCTION
--GETDIFFPLSLCL
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETDIFFPLSLCL" (P_EMPNO IN VARCHAR2,p_lvtype varchar2,NO_DAYS IN NUMBER,S_DATE IN DATE,E_DATE IN DATE) RETURN Number IS
v_lvprd number(8,1) := 0;
v_lvprd1 number(8,1) := 0;
v_lvprdex number(8,1) := 0; 
ret_hday number := 0;
startdate date;
enddate date;
ctr number := 0;
i number := 1;
Prev_date Date;
Next_date Date;
BEGIN
startdate := s_Date;	
enddate := e_date;
	if p_LvType = 'CL' THEN
			select (nvl(sum(DECODE(leavetype,'PL',leaveperiod,0)),0) * -1/8) ,(nvl(sum(DECODE(leavetype,'SL',leaveperiod,0)),0) * -1/8),(nvl(sum(DECODE(leavetype,'EX',leaveperiod,0)),0) * -1/8) into v_lvprd,v_lvprd1,v_lvprdex from ss_leaveledg where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) And Adj_Type<>'PN';
			v_lvprd := v_lvprd+v_lvprd1+v_lvprdex;
			--get preceeding day which is not a holiday
			
			if v_lvprd = 0 then
						Prev_date := GetLastWorkingDay(S_DATE,'-');
						Next_Date := GetLastWorkingDay(E_DATE,'+');
			begin
						--first check if PL or SL availed on preceeding days	
						select (nvl(sum(DECODE(leavetype,'PL',leaveperiod,0)),0) * -1/8) ,(nvl(sum(DECODE(leavetype,'SL',leaveperiod,0)),0) * -1/8),(nvl(sum(DECODE(leavetype,'EX',leaveperiod,0)),0) * -1/8) into v_lvprd,v_lvprd1,v_lvprdex from ss_leaveledg where bdate = startdate - i  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) And Adj_Type<>'PN';
						v_lvprd := v_lvprd+v_lvprd1+v_lvprdex;
						if v_lvprd = 0 then 
						--check if PL or SL availed on succeeding days
							select (nvl(sum(DECODE(leavetype,'PL',leaveperiod,0)),0) * -1/8) ,(nvl(sum(DECODE(leavetype,'SL',leaveperiod,0)),0) * -1/8),(nvl(sum(DECODE(leavetype,'EX',leaveperiod,0)),0) * -1/8) into v_lvprd,v_lvprd1,v_lvprdex from ss_leaveledg where edate = enddate - i  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) And Adj_Type<>'PN';
							v_lvprd := v_lvprd+v_lvprd1+v_lvprdex;
						end if;
			end;	
			end if;	
			if v_lvprd = 0 then			
						--check in Application table
					select (nvl(sum(DECODE(leavetype,'PL',leaveperiod,0)),0) * -1/8) ,(nvl(sum(DECODE(leavetype,'SL',leaveperiod,0)),0) * -1/8),(nvl(sum(DECODE(leavetype,'EX',leaveperiod,0)),0) * -1/8) into v_lvprd,v_lvprd1,v_lvprdex from ss_leaveapp where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND  EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2) ;
					v_lvprd := v_lvprd+v_lvprd1+v_lvprdex;
					if v_lvprd = 0 then
							begin
									--first check if PL or SL availed on preceeding days	
									select (nvl(sum(DECODE(leavetype,'PL',leaveperiod,0)),0) * -1/8) ,(nvl(sum(DECODE(leavetype,'SL',leaveperiod,0)),0) * -1/8),(nvl(sum(DECODE(leavetype,'EX',leaveperiod,0)),0) * -1/8) into v_lvprd,v_lvprd1,v_lvprdex from ss_leaveapp where bdate = Prev_Date  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2) ;
									v_lvprd := v_lvprd+v_lvprd1+v_lvprdex;
									if v_lvprd = 0 then 
									--check if PL or SL availed on succeeding days
										select (nvl(sum(DECODE(leavetype,'PL',leaveperiod,0)),0) * -1/8) ,(nvl(sum(DECODE(leavetype,'SL',leaveperiod,0)),0) * -1/8),(nvl(sum(DECODE(leavetype,'EX',leaveperiod,0)),0) * -1/8) into v_lvprd,v_lvprd1,v_lvprdex from ss_leaveapp where edate = Next_Date  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2) ;
										v_lvprd := v_lvprd+v_lvprd1+v_lvprdex;
									end if;
							end;	
					end if;	
			end if;
			if v_lvprd = 0 then
				return 0;-- valid  
			else			
				return 6;-- PL/SL availed one day before/after  CL
			end if;
    Else  -- leave not CL
			select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveledg where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) And Adj_Type<>'PN';
			--get preceeding day which is not a holiday
		
			if v_lvprd = 0 then
						Prev_date := GetLastWorkingDay(S_DATE,'-');
						Next_Date := GetLastWorkingDay(E_DATE,'+');
			begin
						--first check if CL availed on preceeding days	
						select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveledg where bdate = startdate - i  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) And Adj_Type<>'PN';
						if v_lvprd = 0 then 
						--check if CL 
							select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd  from ss_leaveledg where edate = enddate - i  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) And Adj_Type<>'PN';
						end if;
			end;	
			end if;	
			if v_lvprd = 0 then			
						--check in Application table
					select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveapp where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND  EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2);
					if v_lvprd = 0 then
							begin
									--first check if CL availed on preceeding days	
									select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveapp where bdate = Prev_Date  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2)  ;
									
									if v_lvprd = 0 then 
									--check if CL  availed on succeeding days
										select (nvl(sum(DECODE(leavetype,'CL',leaveperiod,0)),0) * -1/8) into v_lvprd from ss_leaveapp where edate = Next_Date  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and (hod_apprl <> 2 or hrd_apprl <> 2) ;
									end if;
							end;	
					end if;	
			end if;
			if v_lvprd = 0 then
				return 0;-- valid  
			else			
				return 6;-- PL/SL availed one day before/after  CL
			end if;
	end if;			-- Main If
END;
/
---------------------------
--Changed FUNCTION
--GETCONSECUTIVECL1
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETCONSECUTIVECL1" (P_EMPNO IN VARCHAR2, p_lvtype varchar2, NO_DAYS IN NUMBER,
													 S_DATE IN DATE, E_DATE IN DATE) RETURN Number IS
	v_count number := 0;
	v_lvprd number(8,1) := 0;
	v_nodays number:=0;
	ret_hday number;
	v_lvprdtot number :=0;
	v_Date date;
	Prev_date date;
	Next_Date date;
BEGIN
	--This program is being used currently
	Prev_date := getlastworkingday(S_DATE,'-');
	Next_Date := getlastworkingday(E_DATE,'+');
	--1
/*		select (nvl(sum(leaveperiod/8),0) * -1) into v_lvprd 
		from ss_leaveledg where bdate = Prev_Date	AND DB_CR = 'D' 
		AND ltrim(rtrim(EMPNO)) = ltrim(Rtrim(P_EMPNO)) 
		and ltrim(rtrim(leavetype)) = ltrim(rtrim(p_lvtype)) ;
		
	--2
		if v_lvprd<=3 then
			select (nvl(sum(leaveperiod/8),0) * -1) into v_lvprd 
			from ss_leaveledg where bdate = Next_Date	AND DB_CR = 'D' 
			AND ltrim(rtrim(EMPNO)) = ltrim(Rtrim(P_EMPNO)) 
			and ltrim(rtrim(leavetype)) = ltrim(rtrim(p_lvtype)) ;
			v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;
		
	--3
		if v_lvprdtot<=3 then
			select (nvl(sum(leaveperiod/8),0) * -1) into v_lvprd 
			from ss_leaveledg where edate = Prev_Date	AND DB_CR = 'D' 
			AND ltrim(rtrim(EMPNO)) = ltrim(Rtrim(P_EMPNO)) 
			and ltrim(rtrim(leavetype)) = ltrim(rtrim(p_lvtype)) ;
			v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;
		
	--4
		if v_lvprdtot <=3 then
			select (nvl(sum(leaveperiod/8),0) * -1) into v_lvprd 
			from ss_leaveledg where edate = Next_Date	AND DB_CR = 'D' 
			AND ltrim(rtrim(EMPNO)) = ltrim(Rtrim(P_EMPNO)) 
			and ltrim(rtrim(leavetype)) = ltrim(rtrim(p_lvtype)) ;
			v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;
	*/	
		--5
		if v_lvprdtot <=3 then
				select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
				where (Bdate = Prev_Date)
			  and EMPNO = ltrim(Rtrim(P_EMPNO)) and ltrim(rtrim(leavetype)) = ltrim(rtrim(p_lvtype)) ;
			  v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;
		
		--6
		if v_lvprdtot<= 3 then
				select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
				where (Bdate = Next_Date)
			  and EMPNO = P_EMPNO and leavetype = ltrim(rtrim(p_lvtype)) ;
			  v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;
		
		--7
		if v_lvprdtot <=3 then
				select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
				where (Edate = Prev_Date)
			  and EMPNO = Ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) ;
			  v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;
		--8
		if v_lvprdtot<= 3 then
				select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
				where (Edate = Next_Date)
			  and EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) ;
			  v_lvprdtot:=v_lvprdtot+v_lvprd;
		end if;

if v_lvprd > 3 then
	return 7; --prefix/suffix encountered		  	
else
	return 0;
end if;
		
END
;
/
---------------------------
--Changed FUNCTION
--GETCONSECUTIVECL
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETCONSECUTIVECL" (P_EMPNO IN VARCHAR2, p_lvtype varchar2, NO_DAYS IN NUMBER,
													 S_DATE IN DATE, E_DATE IN DATE) RETURN Number IS
	v_count number := 0;
	v_lvprd number(8,1) := 0;
	v_nodays number:=0;
	ret_hday number;
BEGIN
	--Program is not being used
	ret_hday := get_holiday(S_DATE - 1);
	if ret_hday = 1 or ret_hday = 2 or ret_hday = 3 then
		ret_hday := get_holiday(E_Date +1);
	end if;
		if ret_hday = 0 then 
			select (nvl(sum(leaveperiod),0) * -1)/8 into v_lvprd from ss_leaveledg 
				where bdate between S_DATE and E_date and E_Date between S_Date and E_Date 
				AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) 
				and leavetype = ltrim(rtrim(p_lvtype));
				
				v_nodays := NO_DAYS + v_lvprd;
				if v_nodays <=3 then
					begin
						for i in 1..3 loop
							select (nvl(sum(leaveperiod),0) * -1)/8 into v_lvprd from ss_leaveledg where bdate = S_DATE - i AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype));
							v_nodays := v_nodays + v_lvprd;
							if v_nodays > 3 then
								null;
							end if;
						end loop;
					exception 
						when others then
							v_lvprd := 0;
					end;
				end if;
				if v_nodays <=3 then
					begin
						for i in 1..3 loop
							select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg where edate = E_DATE + i AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) ;
							v_nodays := v_nodays + v_lvprd;
							if v_nodays > 3 then
								null;
							end if;
						end loop;
					exception 
						when others then
							v_lvprd := 0;
					end;
				end if;	 
				
				
				if v_nodays <=3 then
						select (nvl(sum(leaveperiod),0)/8) into v_lvprd from ss_leaveapp where bdate between S_DATE and E_date and E_Date between S_Date and E_Date and EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) and (hod_apprl <> 2 or hrd_apprl <> 2) ;
						v_nodays := NO_DAYS + v_lvprd;
				end if;
				if v_nodays <=3 then
						begin
						for i in 1..3 loop
							select (nvl(sum(leaveperiod),0)/8) into v_lvprd from ss_leaveapp where bdate = S_DATE - i  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) and (hod_apprl <> 2 or hrd_apprl <> 2);
							v_nodays := v_nodays + v_lvprd;
							if v_nodays > 3 then
								null;
							end if;
							end loop;
						exception 
							when others then
							v_lvprd := 0;
						end;
				end if;
				if v_nodays <=3 then
						begin
						for i in 1..3 loop
							select (nvl(sum(leaveperiod),0)/8) into v_lvprd from ss_leaveapp where edate = E_DATE + i AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype))  and (hod_apprl <> 2 or hrd_apprl <> 2);
							v_nodays := v_nodays + v_lvprd;
							if v_nodays > 3 then
								null;
							end if;
							end loop;
						exception 
							when others then
							v_lvprd := 0;
						end;
				end if;	 
				  if v_nodays <= 3 then
				  	return 4; --valid
				  else
				  	return 5; --no. of days of consecutive leave exceeds 3
				  end if;
		else
					return 7;	--prefix/suffix encountered		  	
		end if;				  
END
;
/
---------------------------
--Changed FUNCTION
--GETABSENTDATE_SHIFT
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETABSENTDATE_SHIFT" (
    empnum        in varchar2,
    thedate       in date,
    param_shift   varchar2
) return number is
    v_holiday    number;
    v_count      number;
    isabsent     number;
    v_onleave    number;
    dateofjoin   date;
begin
    isabsent    := 0;
    v_holiday   := get_holiday(thedate);
    if nvl(param_shift,'ABCD') not in (
        'HH',
        'OO'
    ) and v_holiday = 0 then
        --If v_holiday = 0 Then
        select
            count(empno)
        into v_count
        from
            ss_integratedpunch
        where
            empno = trim(empnum)
            and pdate = thedate;

        if v_count = 0 then
            v_onleave   := isleavedeputour(thedate,empnum);
            if v_onleave = 0 then
                select
                    nvl(doj,thedate)
                into dateofjoin
                from
                    ss_emplmast
                where
                    empno = trim(empnum);

                if thedate < dateofjoin then
                    isabsent   := 0;
                else
                    isabsent   := 1;
                end if;

            elsif v_onleave = 1 then
                isabsent   := 2;
            else
                isabsent   := 3;
            end if;

        end if;

        --End If;

    end if;

    return isabsent;
end;
/
---------------------------
--Changed FUNCTION
--GETABSENTDATE
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."GETABSENTDATE" (EmpNum In Varchar2, TheDate In Date) RETURN Number IS
	v_holiday Number;
	v_count Number;
	IsAbsent Number;
	v_onleave Number;
	dateofjoin Date;
BEGIN		
  IsAbsent := 0;
  v_holiday := Get_Holiday(TheDate);
  
  If v_holiday = 0 Then
  	 Select Count(empno) Into v_count From ss_integratedpunch
  	 	  Where empno = Trim(EmpNum) And pdate = TheDate;
	  	 	  If v_count = 0 Then
				 	  	v_onleave := IsLeaveDepuTour(TheDate, EmpNum);
				 	  	If v_onleave = 0 Then
								Select Nvl(doj, TheDate) Into dateofjoin From ss_emplmast
									Where empno = Trim(EmpNum);			 	  		
									If TheDate < dateofjoin Then
										IsAbsent := 0;										 	  			
									Else	
					 	  			IsAbsent := 1;	
					 	  		End If;	  		
				 	  	ElsIf v_onleave = 1 Then
				 	  		IsAbsent := 2;	
				 	  	Else
				 	  		IsAbsent := 3;	
				 	  	End If;				 	  		
	  	 	  End If; 	
  End If;	 	  
  Return IsAbsent;
END


;
/
---------------------------
--Changed FUNCTION
--ESTIMATEDWRKHRS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."ESTIMATEDWRKHRS" (p_EmpNo Varchar2, p_DAte Date) RETURN Number IS
		v_Cntr Number;
		v_InTime Number;
		v_OutTime Number;
		v_LunchTime Number;
		v_ShiftCode Varchar2(2);
		v_RetVal Number := 0;
BEGIN
		
		v_ShiftCode := GetShift1(p_EmpNo, p_Date);
		v_InTime := GetShiftInTime(p_EmpNo, p_Date, v_ShiftCode);
		v_OutTime := GetShiftOutTime(p_EmpNo, p_Date, v_ShiftCode);
		v_LunchTime := AvailedLunchTime1(p_EmpNo, p_Date, v_ShiftCode);
		v_RetVal := v_OutTime - v_InTime - v_LunchTime;
		Return v_RetVal;
		 
Exception
		When Others Then
			Return 0;  			
END;
/
---------------------------
--Changed FUNCTION
--ESTIMATEDLUNCHTIME1
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."ESTIMATEDLUNCHTIME1" (p_EmpNo IN Varchar2, p_PDate IN Date, p_SCode IN Varchar2) RETURN Number IS
		v_RetVal Number := 0;
		vStartHH Number := 0;
		vStartMN Number := 0;
		vEndHH Number := 0;
		vEndMN Number := 0;
		vParent Varchar2(10);
		vITime Number := 0;
		vOTime Number := 0;
BEGIN
  	If p_SCode= 'OO' Or p_SCode = 'HH' Then
  			Return v_RetVal;
  	Else
				Select Assign InTo vParent From SS_EmplMast Where EmpNo = Trim(p_EmpNo);
				Select 
						GetShiftInTime(p_EmpNo,p_PDate,p_SCode), 
						GetShiftOutTime(p_EmpNo,p_PDate,p_SCode)
					InTo
						vITime,
						vOTime
				From Dual;
				
				Select StartHH, StartMN, EndHH, EndMN 
						InTo vStartHH, vStartMN, vEndHH, vEndMN 
						From SS_LunchMast Where ShiftCode = Trim(p_SCode) And Parent = Trim(vParent);
						
				If vITime >= (vEndHH * 60) + vEndMN Then
						v_RetVal := 0;
				ElsIf vOTime <= (vStartHH * 60) + vStartMN Then
						v_RetVal := 0;
				ElsIf vOTime <= (vEndHH * 60) + vEndMN Then
						v_RetVal := vOTime - ((vStartHH * 60) + vStartMN);
				ElsIf vITime >= (vStartHH * 60) + vStartMN Then
						v_RetVal := vITime - ((vEndHH * 60) + vEndMN);
				ElsIf vOTime - vITime = 0 Then
				        v_RetVal := 0;
				Else
						v_RetVal := 30;
				End If;
  	End If;
  	return v_RetVal;
Exception
  	When Others Then
  		return 30;
END;
/
---------------------------
--Changed FUNCTION
--ESTIMATEDLUNCHTIME
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."ESTIMATEDLUNCHTIME" (
      p_EmpNo IN VARCHAR2,
      p_PDate IN DATE,
      p_SCode IN VARCHAR2)
    RETURN NUMBER
  IS
    v_RetVal NUMBER := 0;
    vStartHH NUMBER := 0;
    vStartMN NUMBER := 0;
    vEndHH   NUMBER := 0;
    vEndMN   NUMBER := 0;
    vParent  VARCHAR2(10);
  BEGIN
  --xx
    IF Get_Holiday(p_PDate) = 0 THEN
      --SELECT Assign INTO vParent FROM SS_EmplMast WHERE EmpNo = Trim(p_EmpNo);
      SELECT lunch_mn
      INTO v_retval
      FROM ss_shiftmast
      WHERE SHIFTCODE = trim(p_scode);
      /*Select StartHH, StartMN, EndHH, EndMN
      InTo vStartHH, vStartMN, vEndHH, vEndMN
      From SS_LunchMast Where ShiftCode = Trim(p_SCode) And Parent = Trim(vParent);
      v_RetVal := ((vEndHH * 60) + vEndMN) - ((vStartHH * 60) + vStartMN);*/
    END IF;
    RETURN v_RetVal;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN 30;
  END;
/
---------------------------
--Changed FUNCTION
--EARLYGO
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."EARLYGO" (EmpNum IN Varchar2, V_PDate IN Date) Return Number IS
	getDate Varchar2(2);
	VCount number;
	ITimeHH number;
	ITimeMn number;
	OTimeHH number;
	OTimeMn number;	
	PunchNos number;
	LastPunch number;
	EGo Number;
	IsHoliday Varchar2(2);
	SCode Varchar2(10);
	OTime Number;
	V_AvailedLunchTime Number;
	V_EstimatedLunchTime Number;
BEGIN			
		EGo := 0;
		IsHoliday := CheckHoliday(V_PDate);
		If IsHoliday = 3 then
			SCode := 'HH';
		ElsIf IsHoliday = 0 then
			getDate := To_Char(V_Pdate, 'dd');			
				
			Select Substr(s_mrk, ((To_number(getDate) * 2) - 1), 2) Into SCode From ss_muster
				Where empno = Trim(lpad(EmpNum,5,'0')) And mnth = Trim(To_Char(V_Pdate, 'yyyymm'));
			
			select TimeIn_HH,TimeIn_Mn,TimeOut_HH,TimeOut_Mn into ITimeHH, ITimeMn, OTimeHH, OTimeMn
				from SS_ShiftMast where ShiftCode = Trim(SCode); 
			OTime := ((OTimeHH*60) + OTimeMn);
		End If;
		select count(*) into PunchNos from SS_IntegratedPunch where empno = ltrim(rtrim(lpad(EmpNum,5,'0'))) and PDate = V_PDate Order By PDate, HHSort, MMSort;
		If PunchNos > 1 then
				LastPunch := FirstLastPunch1(lpad(EmpNum,5,'0'),V_PDate,1);
				If IsHoliday = 0 then
					V_AvailedLunchTime := AvailedLunchTime(lpad(EmpNum,5,'0'), V_PDate ,SCode);
					V_EstimatedLunchTime := EstimatedLunchTime(lpad(EmpNum,5,'0'), V_PDate ,SCode);
					EGo := OTime - LastPunch - (V_EstimatedLunchTime - V_AvailedLunchTime);
					If EGo < 1 then
						EGo := 0;
					End If;
				End If; 
		End if;
		Return EGo;
END;
/
---------------------------
--Changed FUNCTION
--DM_GET_EMP_OFFICE
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."DM_GET_EMP_OFFICE" (
    param_empno In Varchar2
) Return Varchar2 As
    v_office Varchar2(10) := '';
Begin

    Select
        office
    Into
        v_office
    From
        (
            Select
                office
            From
                dms.dm_usermaster um,
                dms.dm_deskmaster dm
            Where
                empno         = param_empno
                And um.deskid = dm.deskid
        )
    Where
        Rownum = 1;

    Return v_office;
Exception
    When Others Then
        Return '-';
End dm_get_emp_office;
/
---------------------------
--Changed FUNCTION
--DELTAHRS1
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."DELTAHRS1" (p_EmpNo IN Varchar2, 
									 p_PDate IN Date, p_ShiftCode In Varchar2,
									 v_PLevHrs IN Number ) RETURN Number IS
									 
		v_Count Number := 0;
		v_RetVal Number := 0;
		v_WrkHrs Number :=0;
		--v_PLevHrs Number :=0;
		v_EstHrs Number :=0;
		--v_ShiftCode Varchar2(3000):='';
		v_OTime Number := 0;
		v_ITime Number := 0;
		x number;
		v_isLeave Number;
BEGIN
		If Ltrim(rtrim(p_ShiftCode)) = 'OO' Or Ltrim(Rtrim(p_ShiftCode)) = 'HH' Then
				Return v_RetVal;
		End If;


		Select count(*) InTo v_Count from ss_depu where bdate <= p_PDate
			and edate >= p_PDate and EmpNo = p_EmpNo And HOD_Apprl = 1 And HRD_Apprl=1;

		Select Count(*) InTo v_isLeave From SS_LeaveLedg Where EmpNo= Ltrim(Rtrim(p_EmpNo))
			and BDate <= p_PDate and Nvl(EDate,BDate) >= p_PDate And HD_Date is Null 
			and (Adj_Type = 'LA' Or Adj_Type='LC');

		If v_Count > 0 Or v_isLeave > 0 Then
				v_RetVal := 0;
		Else
				Select 
						GetShiftInTime(p_EmpNo,p_PDate,p_ShiftCode),
						GetShiftOutTime(p_EmpNo,p_PDate,p_ShiftCode)
					InTo 
						v_ITime, 
						v_OTime
					From SS_ShiftMast 
					Where ShiftCode = Trim(p_ShiftCode); 
						
				Select 	EstimatedLunchTime1(p_EmpNo,p_PDate,p_ShiftCode),
								WorkedHrs3(lpad(trim(p_EmpNo),5,'0'), p_PDate,p_ShiftCode) 
					InTo v_EstHrs,v_WrkHrs From Dual;
				Select Count(*) InTo v_Count From SS_IntegratedPunch 
						Where EmpNo = Trim(p_EmpNo) 
						And PDate = p_PDate;
				If v_Count > 0 Then
						v_EstHrs := v_OTime - v_ITime - v_EstHrs;
				Else
						v_EstHrs := 0;
				End If;
				v_RetVal := v_WrkHrs + (v_PLevHrs * 60) - v_EstHrs;
				--dbms_output.put_line('WrkHrs :- ' || v_WrkHrs);
				--dbms_output.put_line('PLevhr :- ' || v_PLevHrs);
				--dbms_output.put_line('EstHrs :- ' || v_EstHrs);
		End If;
		Return v_RetVal;
END;
/
---------------------------
--Changed FUNCTION
--DELTAHRS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."DELTAHRS" (p_EmpNo IN Varchar2, p_PDate IN Date, p_ShiftCode In Varchar2) RETURN Number IS
		v_Count Number := 0;
		v_RetVal Number := 0;
		v_WrkHrs Number :=0;
		v_PLevHrs Number :=0;
		v_EstHrs Number :=0;
		--v_ShiftCode Varchar2(3000):='';
		v_ITimeHH Number := 0; 
		v_ITimeMn Number := 0;
		v_OTimeHH Number := 0;
		v_OTimeMn Number := 0;
		v_ITime Number := 0;
		x number;
BEGIN
		If Get_Holiday(p_PDate) = 0 Then
				v_ITime:=0;
				Select TimeIn_HH,TimeIn_Mn,TimeOut_HH,TimeOut_Mn InTo v_ITimeHH, v_ITimeMn, v_OTimeHH, v_OTimeMn
						From SS_ShiftMast Where ShiftCode = Trim(p_ShiftCode); 
						
				v_ITime := v_ITimeHH * 60 + v_ITimeMn ;
				Select 	EstimatedLunchTime(p_EmpNo,p_PDate,p_ShiftCode),
								WorkedHrs2(lpad(trim(p_EmpNo),5,'0'), p_PDate,p_ShiftCode),
								PenaltyLeave(p_EmpNo, p_PDate)
					InTo v_EstHrs,v_WrkHrs,v_PLevHrs From Dual;
				Select Count(*) InTo v_Count From SS_IntegratedPunch 
						Where EmpNo = Trim(p_EmpNo) 
						And PDate = p_PDate;
				If v_Count > 0 Then
						v_EstHrs := ((v_OTimeHH*60) + v_OTimeMn) - ((v_ITimeHH * 60) + v_ITimeMn) - v_EstHrs;
				Else
						v_EstHrs := 0;
				End If;
				v_RetVal := v_WrkHrs + (v_PLevHrs * 60) - v_EstHrs;
		End If;
		--dbms_output.put_line('WrkHrs :- ' || v_WrkHrs);
		--dbms_output.put_line('PLevhr :- ' || v_PLevHrs);
		--dbms_output.put_line('EstHrs :- ' || v_EstHrs); 
		Return v_RetVal;
END;
/
---------------------------
--Changed FUNCTION
--CLPLDIFF
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."CLPLDIFF" (P_EMPNO IN VARCHAR2,p_lvtype varchar2,NO_DAYS IN NUMBER,S_DATE IN DATE,E_DATE IN DATE) RETURN Number IS
v_lvprd number(8,1) := 0;
ret_hday number := 0;
startdate date;
enddate date;
ctr number := 0;
i number := 1;
v_count number:=0;
Prev_date DATE;
Next_Date DATE;
BEGIN
	Prev_date := getlastworkingday(S_DATE,'-');
	Next_Date := getlastworkingday(E_DATE,'+');
   Select Nvl(SUM(leaveperiod),0)/8 Into v_count From ss_leaveapp
 		Where empno = ltrim(rTrim(P_EMPNO))  And
 		((S_DATE Between bdate And edate Or E_DATE Between bdate And edate)
		or
		(bdate between S_DATE and E_DATE or edate between S_DATE and E_DATE));
		
If v_count = 0	Then
	
		startdate := s_Date;	
		enddate := e_date;
		select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg where bdate between S_DATE and E_date and E_Date between S_Date and E_Date AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype NOT IN ('CL','CO','OH');
		--get preceeding day which is not a holiday
		
		if v_lvprd = 0 then
			while ctr <> 1 loop
				ret_hday := get_holiday(startdate - i);
				ret_hday := get_holiday(enddate + i);
				if ret_hday = 1 or ret_hday = 2 or ret_hday = 3 then
					i := i+1;
				else 
					ctr := 1;
				end if;			
			end loop;
			begin
				
				select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd  from ss_leaveapp 
				where Bdate = Prev_date AND  EMPNO = ltrim(Rtrim(p_empno)) and leavetype NOT IN ('CL','CO','OH');
			if v_lvprd = 0 then 				
				select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd  from ss_leaveapp
				where Bdate = Next_date And  EMPNO = ltrim(Rtrim(p_empno)) and leavetype NOT IN ('CL','CO','OH');
			end if;
			if v_lvprd = 0 then 				
				select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd  from ss_leaveapp
				where Edate = Prev_date And  EMPNO = ltrim(Rtrim(p_empno)) and leavetype NOT IN ('CL','CO','OH');
			end if;
			if v_lvprd = 0 then 				
				select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd  from ss_leaveapp
				where Edate = Next_date And  EMPNO = p_empno and leavetype NOT IN ('CL','CO','OH');
			end if;
					--first check if CL  availed on preceeding day
			if v_lvprd = 0 then 							
					select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg where bdate = PREV_DATE  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype NOT IN ('CL','CO','OH');
			end if;
					if v_lvprd = 0 then 
					--check if CL availed on succeeding day
						select (nvl(sum(leaveperiod),0) * -1/8) into v_lvprd from ss_leaveledg where edate = NEXT_DATE  AND DB_CR = 'D' AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype NOT IN ('CL','CO','OH');
					end if;
		EXCEPTION WHEN OTHERS THEN
					v_lvprd := 0;				
		end;	
		end if;	
		if v_lvprd = 0 then			
					--check in Application table
				select (nvl(sum(leaveperiod),0)/8) into v_lvprd from ss_leaveapp where bdate between S_DATE and E_date and EDate between S_Date and E_Date AND  EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype NOT IN ('CL','CO','OH') and (hod_apprl <> 2 or hrd_apprl <> 2);			
				if v_lvprd = 0 then
						begin
								--first check if CL availed on preceeding day	
								select (nvl(sum(leaveperiod),0)/8)  into v_lvprd from ss_leaveapp where bdate = PREV_DATE  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype NOT IN ('CL','CO','OH') and (hod_apprl <> 2 or hrd_apprl <> 2);
								if v_lvprd = 0 then 
								--check if CL availed on succeeding day
									select (nvl(sum(leaveperiod),0)/8)  into v_lvprd from ss_leaveapp where edate = NEXT_DATE  AND EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype NOT IN ('CL','CO','OH') and (hod_apprl <> 2 or hrd_apprl <> 2);
								end if;
						end;	
				end if;	
		end if;
					
		if v_lvprd = 0 then
			return 0;-- valid  
		else			
			return 6;-- CL availed one day before/after  PL/SL
		end if;
		else
			return 1; -- Leave already availed on same day
	end if;
END;
/
---------------------------
--Changed FUNCTION
--CHECKHOLIDAY
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."CHECKHOLIDAY" (PDate IN Date) RETURN number IS 
	VCount number;
BEGIN
	Select count(*) into VCount from SS_Holidays where Holiday = PDate;
	If VCount > 0 then
  	If trim(To_Char(PDate,'day')) = 'sunday' then
  		return 2;
  	ElsIf trim(To_Char(PDate,'day')) = 'saturday' then
	  	return 1;
  	Else
	  	return 3;
	  End If;
  Else return 0;
  End If;
END;
/
---------------------------
--Changed FUNCTION
--CFWDOTDELTAHRS
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."CFWDOTDELTAHRS" (p_EmpNo IN Varchar2, p_PDate IN Date) RETURN Number IS

		Cursor C1 (c_EmpNo IN Varchar2, c_Date IN Date) Is
				Select c_EmpNo As EmpNo, Days, LateCome(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS LCome,
						To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy')) AS PDate, 
						GetShift1(c_EmpNo, To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS SCode,
						Get_Holiday(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) As isSunday,
						EarlyGo1(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS EGo,
						isLComeEGoApp(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS LC_App,
						isSLeaveApp(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS SL_App,
						--isLastDayOfMonth(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS isLDM,
						isLastWorkDay1(c_EmpNo, To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS isLWD
				From SS_Days, SS_Muster 
				Where EmpNo = c_EmpNo 
				And MnTh = To_Char(c_Date,'yyyymm')
				And Days <= To_Number(To_Char(Last_Day(c_Date),'dd'))
				And To_Number(MnTh) >= 200201
				Order by Days;
				
		LC_AppCntr Number := 0;
		SL_AppCntr Number := 0;
		v_OpenLC_Cntr Number := 0;
		v_OpenMM Number :=0;
		v_SDate Date;
		v_Count Number :=0;
		v_DHrs Number :=0;
		v_SumDHrs Number :=0;
		v_SumOTDHrs Number :=0;
		v_CFwdHrs Number :=0;
		v_RetVal Number := 0;
		 
BEGIN
		If To_Number(To_Char(p_PDate,'dd')) = 1 And p_PDate > To_Date('1-jan-2002') Then
				Select Count(*) InTo v_Count From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo) ;
				If v_Count = 0 Then
						v_SDate := To_Date('30-nov-2001');
				Else
						Select PDate, MM, LC_AppCntr, OT_MM InTo v_SDate, v_OpenMM, v_OpenLC_Cntr, v_SumOTDHrs From SS_DeltaHrsBal 
							Where PDate < p_PDate 
							And EmpNo = Trim(p_EmpNo)
							And PDate = (Select Max(PDate) From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo) Group By EmpNo);
				End If;
				v_SDate := v_SDate + 1;
				If v_SDate <> p_PDate Then
						For C2 IN C1(p_EmpNo,v_SDate) Loop
								LC_AppCntr := LC_AppCntr + C2.LC_App;
								SL_AppCntr := SL_AppCntr + C2.SL_App;
								Select DeltaHrs1(C2.EmpNo,C2.PDate,C2.SCode,PenaltyLeave1(C2.LCome,C2.EGo,C2.isLWD,LC_AppCntr,SL_AppCntr,C2.LC_App,C2.SL_App)) InTo v_DHrs From Dual;
								If v_DHrs >= 30 Then
										v_SumOTDHrs := v_SumOTDHrs + v_DHrs;
								End If;
								If C2.isSunday = 2 Then
										v_SumOTDHrs := 0;
										LC_AppCntr := 0;
								End If;
						End Loop;
						v_RetVal := v_SumOTDHrs;
						LC_AppCntr := 0;
				Else
						v_RetVal := v_OpenMM;
				End If;
		End If;
		Return nvl(v_RetVal,0);
END
;
/
---------------------------
--Changed FUNCTION
--CFWDDELTAHRSTEST1
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."CFWDDELTAHRSTEST1" (p_EmpNo IN Varchar2, p_PDate IN Date) RETURN Number IS
  
		Cursor C1 (c_EmpNo IN Varchar2, c_Date IN Date) Is
				Select c_EmpNo As EmpNo, Days, LateCome1(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS LCome,
						To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy')) AS PDate, 
						GetShift1(c_EmpNo, To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS SCode,
						Get_Holiday(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) As isSunday,
						EarlyGo1(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS EGo,
						isLComeEGoApp(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS LC_App,
						isSLeaveApp(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS SL_App,
						--isLastDayOfMonth(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS isLDM,
						isLastWorkDay1(c_EmpNo, To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS isLWD
				From SS_Days, SS_Muster 
				Where EmpNo = c_EmpNo 
				And MnTh = To_Char(c_Date,'yyyymm')
				And Days <= To_Number(To_Char(Last_Day(c_Date),'dd'))
				Order by Days;
				
		LC_AppCntr Number := 0;
		SL_AppCntr Number := 0;
		v_OpenLC_Cntr Number := 0;
		v_OpenMM Number :=0;
		v_SDate Date;
		v_Count Number :=0;
		v_DHrs Number :=0;
		v_SumDHrs Number :=0;
		v_CFwdHrs Number :=0;
		v_RetVal Number := 0;
		 
BEGIN
		If To_Number(To_Char(p_PDate,'dd')) = 1 Then
				Select Count(*) InTo v_Count From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo);
				If v_Count = 0 Then
						v_SDate := To_Date('30-nov-2001');
				Else
						Select PDate, MM, LC_AppCntr InTo v_SDate, v_OpenMM, v_OpenLC_Cntr From SS_DeltaHrsBal 
							Where PDate < p_PDate 
							And EmpNo = Trim(p_EmpNo)
							And PDate = (Select Max(PDate) From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo) Group By EmpNo);
				End If;
				v_SDate := v_SDate + 1;
				If v_SDate <> p_PDate Then
						For C2 IN C1(p_EmpNo,v_SDate) Loop
								LC_AppCntr := LC_AppCntr + C2.LC_App;
								SL_AppCntr := SL_AppCntr + C2.SL_App;
								Select DeltaHrs1(C2.EmpNo,C2.PDate,C2.SCode,PenaltyLeave1(C2.LCome,C2.EGo,C2.isLWD,LC_AppCntr,SL_AppCntr,C2.LC_App,C2.SL_App)) InTo v_DHrs From Dual;
								v_SumDHrs := v_SumDHrs + v_DHrs;
								If C2.isLWD = 1 And C2.PDate <> Last_Day(v_SDate) Then
										Select CFwd_DHRs_Week(LastDay_CFwd_DHrs1(v_DHrs, C2.EGo, C2.SL_App, SL_AppCntr, C2.isLWD), C2.isLWD, v_SumDHRs) InTo v_CFwdHrs From Dual;
										Select Least(Greatest(v_SumDHrs,v_CFwdHrs),0) InTo v_SumDHrs From Dual;
								End If;
								/*If C2.isLDM = 1 And C2.isLWD = 0 Then
										Null;
								End If;*/
								If C2.isSunday = 2 Then
										LC_AppCntr := 0;
								End If;
						End Loop;
						v_RetVal := v_SumDHrs;
						LC_AppCntr := 0;
				Else
						v_RetVal := v_OpenMM;
				End If;
				Return v_RetVal;
		End If;
END
;
/
---------------------------
--Changed FUNCTION
--CFWDDELTAHRSTEST
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."CFWDDELTAHRSTEST" (p_EmpNo IN Varchar2, p_PDate IN Date) RETURN Number IS
 
		Cursor C1 (c_EmpNo IN Varchar2, c_Date IN Date) Is
				Select c_EmpNo As EmpNo, Days, LateCome(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS LCome,
						To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy')) AS PDate, 
						SubStr(s_mrk,((days-1) * 2)+1,2) AS SCode,
						Get_Holiday(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) As isSunday,
						EarlyGo(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS EGo,
						isLComeEGoApp(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS LC_App,
						isSLeaveApp(c_EmpNo,To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS SL_App,
						--isLastDayOfMonth(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS isLDM,
						isLastWorkDay(To_Date(Days ||'-'||To_Char(c_Date,'mon-yyyy'))) AS isLWD
				From SS_Days, SS_Muster 
				Where EmpNo = c_EmpNo 
				And MnTh = To_Char(c_Date,'yyyymm')
				And Days <= To_Number(To_Char(Last_Day(c_Date),'dd'))
				Order by Days;
				
		LC_AppCntr Number := 0;
		SL_AppCntr Number := 0;
		v_OpenLC_Cntr Number := 0;
		v_OpenMM Number :=0;
		v_SDate Date;
		v_Count Number :=0;
		v_DHrs Number :=0;
		v_SumDHrs Number :=0;
		v_CFwdHrs Number :=0;
		v_RetVal Number := 0;
BEGIN
		If To_Number(To_Char(p_PDate,'dd')) = 1 Then
				Select Count(*) InTo v_Count From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo);
				If v_Count = 0 Then
						v_SDate := To_Date('01-dec-2001');
				Else
						Select PDate, MM, LC_AppCntr InTo v_SDate, v_OpenMM, v_OpenLC_Cntr From SS_DeltaHrsBal 
							Where PDate < p_PDate 
							And EmpNo = Trim(p_EmpNo)
							And PDate = (Select Max(PDate) From SS_DeltaHrsBal Where PDate < p_PDate And EmpNo = Trim(p_EmpNo) Group By EmpNo);
				End If;
				v_SDate := v_SDate + 1;
				If v_SDate <> p_PDate Then
						For C2 IN C1(p_EmpNo,v_SDate) Loop
								LC_AppCntr := LC_AppCntr + C2.LC_App;
								SL_AppCntr := SL_AppCntr + C2.SL_App;
								Select DeltaHrs1(C2.EmpNo,C2.PDate,C2.SCode,PenaltyLeave1(C2.LCome,C2.EGo,C2.isLWD,LC_AppCntr,SL_AppCntr,C2.LC_App,C2.SL_App)) InTo v_DHrs From Dual;
								v_SumDHrs := v_SumDHrs + v_DHrs;
								If C2.isLWD = 1 Then
										Select LastDay_CFwd_DHrs1(v_DHrs, C2.EGo, C2.SL_App, SL_AppCntr, C2.isLWD) InTo v_CFwdHrs From Dual;
										Select Least(Greatest(v_SumDHrs,v_CFwdHrs),0) InTo v_SumDHrs From Dual;
								End If;
								/*If C2.isLDM = 1 And C2.isLWD = 0 Then
										Null;
								End If;*/
								If C2.isSunday = 2 Then
										LC_AppCntr := 0;
								End If;
						End Loop;
						v_RetVal := v_SumDHrs;
						LC_AppCntr := 0;
				End If;
				Return v_RetVal;
		End If;
END
;
/
---------------------------
--Changed FUNCTION
--CASUALLEAVECHECK
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."CASUALLEAVECHECK" (P_EMPNO IN VARCHAR2, p_lvtype varchar2, NO_DAYS IN NUMBER,
													 S_DATE IN DATE, E_DATE IN DATE) RETURN number IS
	counter_hday number := 0;													 
 	v_Counter number :=0;
	v_count number := 0;
	v_lvprd number(8,1) := 0;
	v_nodays number:=0;
	ret_hday number;
	v_lvprdtot  number :=0;
	v_Date date;
	Prev_date date;
	Next_Date date;
BEGIN
   Select Nvl(SUM(leaveperiod),0)/8 Into v_count From ss_leaveapp
 		Where empno = ltrim(rTrim(P_EMPNO)) And 
 		((S_DATE Between bdate And edate Or E_DATE Between bdate And edate)
		or
		(bdate between S_DATE and E_DATE or edate between S_DATE and E_DATE));
		
	 If v_count = 0	Then
			Prev_date := GetLastWorkingDay(S_DATE,'-');
			Next_Date := GetLastWorkingDay(E_DATE,'+');
			if  (S_Date - Prev_date  > 1)   then
				select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
				where (Bdate = Prev_Date) and EMPNO = ltrim(Rtrim(P_EMPNO)) 
				and leavetype = ltrim(rtrim(p_lvtype));
					if v_lvprd = 0 then
										select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
										where (Edate = Prev_Date) and EMPNO = ltrim(Rtrim(P_EMPNO)) 
										and leavetype = ltrim(rtrim(p_lvtype));
					end if;
					if (NEXT_DATE -E_DATE > 1) and v_lvprd = 0 then
							select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
							where (Edate = Next_Date) and EMPNO = ltrim(Rtrim(P_EMPNO)) 
							and leavetype = ltrim(rtrim(p_lvtype));
						if v_lvprd = 0 then
							select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
							where (Bdate = Next_Date) and EMPNO = ltrim(Rtrim(P_EMPNO)) 
							and leavetype = ltrim(rtrim(p_lvtype));
						end if;
					end if;
					if v_lvprd <> 0 then
						counter_hday:=1;
					end if;
			Else
						select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
							where (Bdate = Prev_Date) and EMPNO = ltrim(Rtrim(P_EMPNO)) 
							and leavetype = ltrim(rtrim(p_lvtype));
						  v_lvprdtot:=v_lvprdtot+v_lvprd;
									--6
									if v_lvprdtot<= 3 then
											select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
											where (Bdate = Next_Date)
										  and EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) ;
										  v_lvprdtot:=v_lvprdtot+v_lvprd;
									end if;
									
									--7
									if v_lvprdtot <=3 then
											select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
											where (Edate = Prev_Date and Edate <> Bdate)
										  and EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) ;
										  v_lvprdtot:=v_lvprdtot+v_lvprd;
									end if;
									--8
									if v_lvprdtot<= 3 then
											select (nvl(sum(leaveperiod),0))/8 into v_lvprd from ss_leaveapp 
											where (Edate = Next_Date and Edate <> BDate)
										  and EMPNO = ltrim(Rtrim(P_EMPNO)) and leavetype = ltrim(rtrim(p_lvtype)) ;
										  v_lvprdtot:=v_lvprdtot+v_lvprd;
									end if;
									
							if v_lvprdtot > 3 then
								return 7; --prefix/suffix encountered		  	
							else
								return 0;
							end if;
			end if;
						if counter_hday = 1	then
							return 2;
						else 
							return 0;
						end if;							
		
	Else
		Return 1;						
	End If;	
	
END;
/
---------------------------
--Changed FUNCTION
--AVAILEDLUNCHTIME1_COPY
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."AVAILEDLUNCHTIME1_COPY" (
    p_empno   In        Varchar2,
    p_date    In        Date,
    p_scode   In        Varchar2
) Return Number Is

    Cursor c1 Is
    Select
        *
    From
        ss_integratedpunch
    Where
        empno = Ltrim(Rtrim(p_empno))
        And pdate      = p_date
        And falseflag  = 1
    Order By
        pdate,
        hhsort,
        mmsort,
        hh,
        mm;

    Type tab_hrs_rec Is Record (
        punch_hrs           Number
    );
    Type tab_hrs Is
        Table Of tab_hrs_rec Index By Binary_Integer;
    v_tab_hrs           tab_hrs;
    v_cntr              Number;
    v_parent            Char(4);
    v_lunch_start_hrs   Number;
    v_lunch_end_hrs     Number;
    v_first_punch       Number;
    v_last_punch        Number;
    v_lunch_dura        Number;
    v_next_punch        Number;
    v_act_lunch_hrs     Number;
Begin
    Select
        Count(*)
    Into v_cntr
    From
        ss_integratedpunch
    Where
        empno = p_empno
        And pdate = p_date;

    If isleavedeputour(
        p_date,
        p_empno
    ) > 0 Or v_cntr < 2 Then
        Return 0;
    End If;

    v_cntr   := 1;
    For c2 In c1 Loop
        v_tab_hrs(v_cntr).punch_hrs   := ( c2.hh * 60 ) + c2.mm;
    --V_tab_hrs(Cntr).TabMns := C2.MM;

        v_cntr                        := v_cntr + 1;
    End Loop;

    Select
        parent
    Into v_parent
    From
        ss_emplmast
    Where
        empno = Trim(p_empno);
  --if p_scode in ('XX', 'MM') Then

    If Trim(p_scode) In (
        'OO',
        'HH'
    ) Then
        v_lunch_start_hrs   := 720;
        v_lunch_end_hrs     := 840;
        v_lunch_dura        := 30;
    Else
        Select
            ( starthh * 60 ) + startmn,
            ( endhh * 60 ) + endmn
        Into
            v_lunch_start_hrs,
            v_lunch_end_hrs
        From
            ss_lunchmast
        Where
            shiftcode = Ltrim(Rtrim(p_scode))
            And parent = Ltrim(Rtrim(v_parent));

        Select
            Nvl(lunch_mn, 0)
        Into v_lunch_dura
        From
            ss_shiftmast
        Where
            shiftcode = p_scode;

    End If;

    v_cntr   := v_cntr - 1;
    If v_lunch_start_hrs >= v_tab_hrs(v_cntr).punch_hrs Or v_lunch_start_hrs <= v_tab_hrs(1).punch_hrs Then
        Return 0;
    End If;

    If v_cntr = 2 Then
        If v_tab_hrs(1).punch_hrs <= v_lunch_start_hrs And v_tab_hrs(2).punch_hrs >= ( v_lunch_start_hrs + v_lunch_dura ) Then
            Return v_lunch_dura;
      --elsif v_tab_hrs(1).Punch_hrs <= v_lunch_start_hrs AND v_tab_hrs(2).Punch_hrs <= (v_lunch_start_hrs + v_lunch_dura) THEN
      --return (v_lunch_start_hrs + v_lunch_dura) - v_tab_hrs(2).Punch_hrs;
        Elsif v_tab_hrs(1).punch_hrs <= v_lunch_start_hrs And v_tab_hrs(2).punch_hrs >= ( v_lunch_start_hrs ) Then
            If v_tab_hrs(2).punch_hrs - ( v_lunch_start_hrs ) < v_lunch_dura Then
                v_lunch_dura := v_tab_hrs(2).punch_hrs - ( v_lunch_start_hrs );
            End If;
        End If;
    End If;

    If v_tab_hrs(1).punch_hrs >= v_lunch_start_hrs And v_tab_hrs(1).punch_hrs <= v_lunch_end_hrs Then
        If v_tab_hrs(1).punch_hrs - v_lunch_start_hrs < v_lunch_dura Then
            Return v_tab_hrs(1).punch_hrs - v_lunch_start_hrs;
        End If;
    End If;

    --When last punch is between Lunch Start Time and Lunch Duration

    If v_tab_hrs(v_cntr).punch_hrs >= v_lunch_start_hrs And v_tab_hrs(v_cntr).punch_hrs <= v_lunch_end_hrs Then
        For i In 1..v_cntr Loop 
        --
            If i Mod 2 = 0 Then
                Continue;
            End If;
            If v_tab_hrs(i).punch_hrs > v_lunch_end_hrs Then
                Exit;
            End If;
            If v_tab_hrs(i).punch_hrs >= v_lunch_start_hrs Then
                v_act_lunch_hrs := Nvl(v_act_lunch_hrs, 0) + v_tab_hrs(i + 1).punch_hrs - v_tab_hrs(i).punch_hrs;
            Else
                If v_tab_hrs(i + 1).punch_hrs >= v_lunch_start_hrs Then
                    v_act_lunch_hrs := v_tab_hrs(i + 1).punch_hrs - v_lunch_start_hrs;
                End If;
            End If;

        End Loop;

        Return Least(v_act_lunch_hrs, v_lunch_dura);
        /*
        If v_tab_hrs(v_cntr).punch_hrs - v_lunch_start_hrs < v_lunch_dura Then
            Return v_tab_hrs(v_cntr).punch_hrs - v_lunch_start_hrs;
        End If;
        */
    End If;

    For i In 1..v_cntr Loop 
    --

     If i Mod 2 = 0 Then
        If i < v_cntr Then
            If v_tab_hrs(i).punch_hrs >= v_lunch_start_hrs And v_tab_hrs(i).punch_hrs <= v_lunch_end_hrs Then
                v_next_punch := Least(v_tab_hrs(i + 1).punch_hrs, v_lunch_end_hrs);
                If ( v_next_punch - v_tab_hrs(i).punch_hrs ) >= v_lunch_dura Then
                    Return 0;
                    Exit;
                Elsif ( v_next_punch - v_tab_hrs(i).punch_hrs ) > 0 And ( v_next_punch - v_tab_hrs(i).punch_hrs ) < v_lunch_dura Then
                    Return v_lunch_dura - ( v_next_punch - v_tab_hrs(i).punch_hrs );
                    Exit;
                End If;

            End If;

        End If;

    End If;
    End Loop;

    Return v_lunch_dura;
  --END ;
  -- v_RetVal   Number := 0;
  -- v_parent    Varchar2(4);
  -- vStartHH    Number := 0;
  -- vStartMN    Number := 0;
  -- vEndHH     Number := 0;
  -- vEndMN     Number := 0;
  -- v_first_punch  Number := 0;
  -- v_last_punch   Number := 0;
  --BEGIN
  --
  -- v_first_punch := FirstLastPunch1(I_EmpNo,I_PDate,0);
  -- v_last_punch := FirstLastPunch1(I_EmpNo,I_PDate,1);
  --
  /*Select FirstLastPunch1(I_EmpNo,I_PDate,0), FirstLastPunch1(I_EmpNo,I_PDate,1)
  InTo v_first_punch, v_last_punch
  From Dual;*/
  /*If I_PDate <= To_Date('27-Jul-2003') Then*/
  --   If Ltrim(Rtrim(I_SCode)) = 'OO' Or Ltrim(Rtrim(I_SCode)) = 'HH' Then
  --     If v_first_punch < 720 And v_last_punch > 820 Then
  --       v_RetVal := 30;
  --     End If;
  --     Return v_RetVal;
  --   End If;
  --   Select Assign InTo v_parent From SS_EmplMast Where EmpNo = Ltrim(RTrim(I_EmpNo));
  --   Select StartHH, StartMN, EndHH, EndMN
  --    InTo vStartHH, vStartMN, vEndHH, vEndMN
  --    From SS_LunchMast Where ShiftCode = Ltrim(RTrim(I_SCode)) And Parent = Ltrim(RTrim(v_parent));
  --   If v_first_punch >= (vEndHH * 60) + vEndMN Then
  --     Return 0;
  --   ElsIf v_last_punch <= (vStartHH * 60) + vStartMN Then
  --     Return 0;
  --   ElsIf v_first_punch <= (vStartHH * 60) + vStartMN And v_last_punch >= ((vEndHH * 60) + vEndMN) Then
  --     Return ((vEndHH * 60) + vEndMN) - ((vStartHH * 60) + vStartMN);
  --   ElsIf (v_first_punch > (vStartHH * 60) + vStartMN) And (v_first_punch < (vEndHH * 60) + vEndMN) And v_last_punch >= (vEndHH * 60) + vEndMN Then
  --     Return ((vEndHH * 60) + vEndMN) - v_first_punch;
  --   ElsIf (v_first_punch < (vStartHH * 60) + vStartMN) And (v_last_punch < (vEndHH * 60) + vEndMN) And v_last_punch >= (vStartHH * 60) + vStartMN Then
  --     Return v_last_punch - ((vStartHH * 60) + vStartMN);
  --   ElsIf (v_first_punch > (vStartHH * 60) + vStartMN) And (v_last_punch < (vEndHH * 60) + vEndMN) Then
  --     Return v_last_punch - v_first_punch;
  --   ElsIf NVL(LTrim(rTrim(v_first_punch)),0) = 0 Then
  --     Return 0;
  --   ElsIf IsLeaveDepuTour(I_PDate, I_EmpNo) > 0 Then
  --     Return 0;
  --   Else
  --     Return 30;
  --   End If;
  /*Else
  If I_SCode = 'OO' Or I_SCode = 'HH' Then
  vStartHH := 12;
  vStartMN := 0;
  vEndHH   := 13;
  vEndMN   := 40;
  Else
  Select Assign InTo v_parent From SS_EmplMast Where EmpNo = Ltrim(RTrim(I_EmpNo));
  Select StartHH, StartMN, EndHH, EndMN
  InTo vStartHH, vStartMN, vEndHH, vEndMN
  From SS_LunchMast Where ShiftCode = Ltrim(RTrim(I_SCode)) And Parent = Ltrim(RTrim(v_parent));
  End If;
  If v_first_punch >= (vEndHH * 60) + vEndMN Then
  Return 0;
  ElsIf v_last_punch <= (vStartHH * 60) + vStartMN Then
  Return 0;
  ElsIf v_first_punch <= (vStartHH * 60) + vStartMN And v_last_punch >= ((vEndHH * 60) + vEndMN) Then
  If I_SCode = 'OO' Or I_SCode = 'HH' Then
  v_RetVal := ((vEndHH * 60) + vEndMN) - ((vStartHH * 60) + vStartMN);
  Select Least(v_RetVal,30) InTo v_RetVal From Dual;
  Return v_RetVal;
  Else
  Return ((vEndHH * 60) + vEndMN) - ((vStartHH * 60) + vStartMN);
  End If;
  ElsIf (v_first_punch > (vStartHH * 60) + vStartMN) And (v_first_punch < (vEndHH * 60) + vEndMN) And v_last_punch >= (vEndHH * 60) + vEndMN Then
  If I_SCode = 'OO' Or I_SCode = 'HH' Then
  v_RetVal := ((vEndHH * 60) + vEndMN) - v_first_punch;
  Select Least(v_RetVal,30) InTo v_RetVal From Dual;
  Return v_RetVal;
  Else
  Return ((vEndHH * 60) + vEndMN) - v_first_punch;
  End If;
  ElsIf (v_first_punch < (vStartHH * 60) + vStartMN) And (v_last_punch < (vEndHH * 60) + vEndMN) And v_last_punch >= (vStartHH * 60) + vStartMN Then
  If I_SCode = 'OO' Or I_SCode = 'HH' Then
  v_RetVal := v_last_punch - ((vStartHH * 60) + vStartMN);
  Select Least(v_RetVal,30) InTo v_RetVal From Dual;
  Return v_RetVal;
  Else
  Return v_last_punch - ((vStartHH * 60) + vStartMN);
  End If;
  ElsIf (v_first_punch > (vStartHH * 60) + vStartMN) And (v_last_punch < (vEndHH * 60) + vEndMN) Then
  If I_SCode = 'OO' Or I_SCode = 'HH' Then
  v_RetVal := v_last_punch - v_first_punch;
  Select Least(v_RetVal,30) InTo v_RetVal From Dual;
  Return v_RetVal;
  Else
  Return v_last_punch - v_first_punch;
  End If;
  ElsIf NVL(LTrim(rTrim(v_first_punch)),0) = 0 Then
  Return 0;
  ElsIf IsLeaveDepuTour(I_PDate, I_EmpNo) > 0 Then
  Return 0;
  Else
  Return 30;
  End If;
  End If;  */
Exception
    When Others Then
        Return 30;
End;
/
---------------------------
--Changed FUNCTION
--AVAILEDLUNCHTIME
---------------------------
CREATE OR REPLACE FUNCTION "SELFSERVICE"."AVAILEDLUNCHTIME" (I_EmpNo IN Varchar2, I_PDate IN Date, I_SCode IN Varchar2) Return Number IS 
	v_RetVal			Number := 0;
	vParent 			Varchar2(4);
	vStartHH 			Number := 0;
	vStartMN 			Number := 0;
	vEndHH 				Number := 0;
	vEndMN 				Number := 0;
	vFirstPunch 	Number := 0;
	vLastPunch 		Number := 0;
	vIsHoliday		Number := 0;
BEGIN
  v_RetVal := AVAILEDLUNCHTIME1(i_empno,i_pdate,i_scode);
  return v_retval;
/*
	If I_SCode = 'OO' Or I_SCode = 'HH' Then
			Return 0;
	End If;
	Select Assign InTo vParent From SS_EmplMast Where EmpNo = Trim(I_EmpNo);
	
	Select Get_HOliday(I_PDate), FirstLastPunch1(I_EmpNo,I_PDate,0), FirstLastPunch1(I_EmpNo,I_PDate,1), StartHH, StartMN, EndHH, EndMN 
		InTo vIsHoliday, vFirstPunch, vLastPunch, vStartHH, vStartMN, vEndHH, vEndMN 
		From SS_LunchMast Where ShiftCode = Trim(I_SCode) And Parent = Trim(vParent);
	
	If vFirstPunch >= (vEndHH * 60) + vEndMN And vIsHoliday = 0 Then
			Return 0;
	ElsIf vLastPunch <= (vStartHH * 60) + vStartMN And vIsHoliday = 0 Then
			Return 0;
	ElsIf vFirstPunch <= (vStartHH * 60) + vStartMN And vIsHoliday = 0 And vLastPunch >= ((vEndHH * 60) + vEndMN) Then
			Return ((vEndHH * 60) + vEndMN) - ((vStartHH * 60) + vStartMN);
	ElsIf (vFirstPunch > (vStartHH * 60) + vStartMN) And (vFirstPunch < (vEndHH * 60) + vEndMN) And vIsHoliday = 0 Then
			Return ((vEndHH * 60) + vEndMN) - vFirstPunch;
	ElsIf NVL(Trim(vFirstPunch),0) = 0 And vIsHoliday = 0 Then
			Return 0;
	ElsIf vIsHoliday > 0 Or IsLeaveDepuTour(I_PDate, I_EmpNo) > 0 Then
			Return 0;
	Else
			Return 30;
	End If;
  
Exception
	When Others Then
		Return 30;
    */
END;
/
